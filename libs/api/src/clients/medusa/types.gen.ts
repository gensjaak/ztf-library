// This file is auto-generated by @hey-api/openapi-ts

/**
 * The API key's details.
 */
export type AdminApiKey = {
  /**
   * The api key's ID.
   */
  id: string;
  /**
   * The api key's token.
   */
  token: string;
  /**
   * The redacted form of the API key's token. This is useful when showing portion of the token.
   */
  redacted: string;
  /**
   * The api key's title.
   */
  title: string;
  /**
   * The api key's type. `secret` is used for a user's API key, whereas `publishable` is used for Publishable API keys.
   */
  type: "secret" | "publishable";
  /**
   * The date and time the API key was last used.
   */
  last_used_at: string;
  /**
   * The ID of the user that created the API key, if available.
   */
  created_by: string;
  /**
   * The date and time the API key was created.
   */
  created_at: string;
  /**
   * The ID of the user that revoked the API key, if available.
   */
  revoked_by: string;
  /**
   * The date and time the API key was revoked. The API key is considered revoked when this property is set.
   */
  revoked_at: string;
  /**
   * The date the API key was updated.
   */
  updated_at: string;
  /**
   * The date the API key was deleted.
   */
  deleted_at: string;
};

/**
 * The api key's type. `secret` is used for a user's API key, whereas `publishable` is used for Publishable API keys.
 */
export type type = "secret" | "publishable";

/**
 * The API key's details.
 */
export type AdminApiKeyResponse = {
  api_key: AdminApiKey;
};

/**
 * The application method's details.
 */
export type AdminApplicationMethod = {
  promotion?: AdminPromotion;
  /**
   * The application method's target rules.
   */
  target_rules?: Array<AdminPromotionRule>;
  /**
   * The application method's buy rules.
   */
  buy_rules?: Array<AdminPromotionRule>;
  /**
   * The application method's ID.
   */
  id: string;
  /**
   * The application method's type. If it's `fixed`, the promotion discounts a fixed amount. If it's `percentage`, the promotion discounts a percentage.
   */
  type?: "fixed" | "percentage";
  /**
   * Which item does the promotion apply to. `items` mean the promotion applies to the cart's items; `shipping_methods` means the promotion applies to the cart's shipping methods; `order` means the promotion applies on the entire order.
   */
  target_type?: "items" | "shipping_methods" | "order";
  /**
   * How is the promotion amount discounted. `each` means the discounted amount is applied on each applicable item; `across` means the discounted amount is split accross the applicable items.
   */
  allocation?: "each" | "across";
  /**
   * The amount to be discounted.
   */
  value?: number;
  /**
   * The application method's currency code.
   */
  currency_code?: string;
  /**
   * The max quantity allowed in the cart for the associated promotion to be applied.
   */
  max_quantity?: number;
  /**
   * The minimum quantity required for a `buyget` promotion to be applied. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `2`.
   */
  buy_rules_min_quantity?: number;
  /**
   * The quantity that results from matching the `buyget` promotion's condition. For example, if the promotion is a "Buy 2 shirts get 1 free", the value of this attribute is `1`.
   */
  apply_to_quantity?: number;
};

/**
 * The application method's type. If it's `fixed`, the promotion discounts a fixed amount. If it's `percentage`, the promotion discounts a percentage.
 */
export type type2 = "fixed" | "percentage";

/**
 * Which item does the promotion apply to. `items` mean the promotion applies to the cart's items; `shipping_methods` means the promotion applies to the cart's shipping methods; `order` means the promotion applies on the entire order.
 */
export type target_type = "items" | "shipping_methods" | "order";

/**
 * How is the promotion amount discounted. `each` means the discounted amount is applied on each applicable item; `across` means the discounted amount is split accross the applicable items.
 */
export type allocation = "each" | "across";

/**
 * The products to create, update, or delete.
 */
export type AdminBatchProductRequest = {
  /**
   * The products to create.
   */
  create?: Array<AdminCreateProduct>;
  /**
   * The products to update.
   */
  update?: Array<AdminUpdateProduct>;
  /**
   * The products to delete.
   */
  delete?: Array<string>;
};

/**
 * The details of the products created, updated, or deleted.
 */
export type AdminBatchProductResponse = {
  /**
   * The created products
   */
  created: Array<AdminProduct>;
  /**
   * The updated products.
   */
  updated: Array<AdminProduct>;
  /**
   * The deleted products' details.
   */
  deleted: {
    /**
     * The IDs of deleted products.
     */
    ids: Array<string>;
    /**
     * The name of the deleted objects.
     */
    object: string;
    /**
     * Whether the products were deleted.
     */
    deleted: boolean;
  };
};

/**
 * The product variants to create, update, or delete.
 */
export type AdminBatchProductVariantRequest = {
  /**
   * The product variants to create.
   */
  create?: Array<AdminCreateProductVariant>;
  /**
   * The product variants to update.
   */
  update?: Array<AdminUpdateProductVariant>;
  /**
   * The product variants to delete.
   */
  delete?: Array<string>;
};

/**
 * The details of the product variants created, updated, or deleted.
 */
export type AdminBatchProductVariantResponse = {
  /**
   * The created product variants.
   */
  created: Array<AdminProductVariant>;
  /**
   * The updated product variants.
   */
  updated: Array<AdminProductVariant>;
  /**
   * The details of the deleted product variants.
   */
  deleted: {
    /**
     * The IDs of the deleted product variants.
     */
    ids: Array<string>;
    /**
     * The name of the deleted objects.
     */
    object: string;
    /**
     * Whether the product variants were deleted.
     */
    deleted: boolean;
  };
};

/**
 * The campaign's details.
 */
export type AdminCampaign = {
  /**
   * The campaign's ID.
   */
  id: string;
  /**
   * The campaign's name.
   */
  name: string;
  /**
   * The campaign's description.
   */
  description: string;
  /**
   * The campaign's currency.
   */
  currency: string;
  /**
   * The campaign's identifier.
   */
  campaign_identifier: string;
  /**
   * The date and time that the campaign starts.
   */
  starts_at: string;
  /**
   * The date and time that the campaign ends.
   */
  ends_at: string;
  /**
   * The campaign's budget.
   */
  budget: {
    /**
     * The budget's ID.
     */
    id: string;
    /**
     * The budget's type. `spend` means the limit is set on the total amount discounted by the campaign's promotions; `usage` means the limit is set on the total number of times the campaign's promotions can be used.
     *
     */
    type: "spend" | "usage";
    /**
     * The budget's currency code.
     */
    currency_code: string;
    /**
     * The budget's limit.
     */
    limit: number;
    /**
     * How much of the budget has been used. If the limit is `spend`, this property holds the total amount discounted so far. If the limit is `usage`, it holds the number of times the campaign's promotions have been used so far.
     *
     */
    used: number;
  };
  /**
   * The date the campaign was created.
   */
  created_at: string;
  /**
   * The date the campaign was updated.
   */
  updated_at: string;
  /**
   * The date the campaign was deleted.
   */
  deleted_at: string;
};

/**
 * The budget's type. `spend` means the limit is set on the total amount discounted by the campaign's promotions; `usage` means the limit is set on the total number of times the campaign's promotions can be used.
 *
 */
export type type3 = "spend" | "usage";

/**
 * The campaign's details.
 */
export type AdminCampaignResponse = {
  campaign: AdminCampaign;
};

/**
 * The claim's details.
 */
export type AdminClaim = {
  /**
   * The claim's ID.
   */
  id: string;
  /**
   * The ID of the order associated with the claim.
   */
  order_id: string;
  /**
   * The order items targetted by the claim.
   */
  claim_items: Array<BaseClaimItem>;
  /**
   * The outbound or new items of the claim.
   */
  additional_items: Array<BaseClaimItem>;
  return: AdminReturn;
  /**
   * The ID of the associated return.
   */
  return_id?: string;
  /**
   * Whether the customer should be notified about changes in the claim.
   */
  no_notification?: boolean;
  /**
   * The amount to be refunded.
   */
  refund_amount?: number;
  /**
   * The claim's display ID.
   */
  display_id: number;
  /**
   * The claim's shipping methods.
   */
  shipping_methods?: Array<AdminOrderShippingMethod>;
  /**
   * The claim's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
  /**
   * The claim's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The claim's creation date.
   */
  created_at: string;
  /**
   * The claim's update date.
   */
  updated_at: string;
  order: AdminOrder;
  /**
   * The claim's type.
   */
  type: "replace" | "refund";
  /**
   * The version of the order when the claim is applied.
   */
  order_version: string;
  /**
   * The ID of the user that created the claim.
   */
  created_by?: string;
  /**
   * The date the claim was canceled.
   */
  canceled_at: string;
  /**
   * The date the claim was deleted.
   */
  deleted_at?: string;
};

/**
 * The claim's type.
 */
export type type4 = "replace" | "refund";

/**
 * The details of the deleted claim.
 */
export type AdminClaimDeleteResponse = {
  /**
   * The claim's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the claim was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of claims.
 */
export type AdminClaimListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of claims.
   */
  claims: Array<AdminClaim>;
};

/**
 * The created claim's details.
 */
export type AdminClaimOrderResponse = {
  order: Order;
  claim: AdminClaim;
};

/**
 * The details of the claim, as well as a preview of the order when the claim is applied.
 */
export type AdminClaimPreviewResponse = {
  order_preview: AdminOrderPreview;
  claim: AdminClaim;
};

/**
 * The details of the claim, its return, and a preview of the order when the claim is applied.
 */
export type AdminClaimRequestResponse = {
  return: AdminReturn;
  order_preview: AdminOrderPreview;
  claim: AdminClaim;
};

/**
 * The claim's details.
 */
export type AdminClaimResponse = {
  claim: AdminClaim;
};

/**
 * The details of the claim's return, with a preview of the order when the claim's return is applied.
 */
export type AdminClaimReturnPreviewResponse = {
  order_preview: AdminOrderPreview;
  return: AdminReturn;
};

/**
 * The product collection's details.
 */
export type AdminCollection = {
  /**
   * The collection's ID.
   */
  id: string;
  /**
   * The collection's title.
   */
  title: string;
  /**
   * The collection's handle.
   */
  handle: string;
  /**
   * The collection's creation date.
   */
  created_at: string;
  /**
   * The collection's update date.
   */
  updated_at: string;
  /**
   * The collection's deletion date.
   */
  deleted_at: string;
  /**
   * The collection's products.
   */
  products?: Array<BaseProduct>;
  /**
   * The collection's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
};

/**
 * The details of the deleted collection.
 */
export type AdminCollectionDeleteResponse = {
  /**
   * The collection's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the collection was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of product collections.
 */
export type AdminCollectionListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned results.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of product collections.
   */
  collections: Array<AdminCollection>;
};

/**
 * The collection's details.
 */
export type AdminCollectionResponse = {
  collection: AdminCollection;
};

/**
 * The API key's details.
 */
export type AdminCreateApiKey = {
  /**
   * The API key's title.
   */
  title: string;
  /**
   * The API key's type. Use `secret` for a user's API key; Use `publishable` for Publishable API keys.
   */
  type: "publishable" | "secret";
};

/**
 * the product collection's details.
 */
export type AdminCreateCollection = {
  /**
   * The collection's title.
   */
  title: string;
  /**
   * The collection's handle.
   */
  handle?: string;
  /**
   * The collection's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The customer group's details.
 */
export type AdminCreateCustomerGroup = {
  /**
   * The customer group's name.
   */
  name: string;
  /**
   * The customer group's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The filfillment's details.
 */
export type AdminCreateFulfillment = {
  /**
   * The ID of the location the items are fulfilled from.
   */
  location_id: string;
  /**
   * The ID of the provider handling this fulfillment.
   */
  provider_id: string;
  /**
   * The address to deliver the items to.
   */
  delivery_address: {
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's phone.
     */
    phone?: string;
    /**
     * The delivery address's company.
     */
    company?: string;
    /**
     * The delivery address's first line.
     */
    address_1?: string;
    /**
     * The delivery address's second line.
     */
    address_2?: string;
    /**
     * The delivery address's city.
     */
    city?: string;
    /**
     * The delivery address's country code.
     */
    country_code?: string;
    /**
     * The delivery address's province.
     */
    province?: string;
    /**
     * The delivery address's postal code.
     */
    postal_code?: string;
    /**
     * The delivery address's metadata, used to store custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  };
  /**
   * The items to fulfill.
   */
  items: Array<{
    /**
     * The item's title.
     */
    title: string;
    /**
     * The item's SKU.
     */
    sku: string;
    /**
     * The quantity to fulfill of the item.
     */
    quantity: number;
    /**
     * The item's barcode.
     */
    barcode: string;
    /**
     * The ID of the associated line item.
     */
    line_item_id?: string;
    /**
     * The ID of the inventory item associated with the underlying variant.
     */
    inventory_item_id?: string;
  }>;
  /**
   * The labels for the fulfillment's shipments.
   */
  labels: Array<{
    /**
     * The label's tracking number.
     */
    tracking_number: string;
    /**
     * The label's tracking URL.
     */
    tracking_url: string;
    /**
     * The label's URL.
     */
    label_url: string;
  }>;
  /**
   * The ID of the order this fulfillment is created for.
   */
  order_id: string;
  /**
   * The ID of the shipping option used in the order.
   */
  shipping_option_id?: string;
  /**
   * Any data useful for the fulfillment provider to handle the fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The date and time the fulfillment was packed.
   */
  packed_at?: string;
  /**
   * The date and time the fulfillment was shipped.
   */
  shipped_at?: string;
  /**
   * The date and time the fulfillment was delivered.
   */
  delivered_at?: string;
  /**
   * The date and time the fulfillment was canceled.
   */
  canceled_at?: string;
  /**
   * The fulfillment's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
};

/**
 * The inventory item's details.
 */
export type AdminCreateInventoryItem = {
  /**
   * The inventory item's SKU.
   */
  sku?: string;
  /**
   * The inventory item's HS code.
   */
  hs_code?: string;
  /**
   * The inventory item's weight.
   */
  weight?: number;
  /**
   * The inventory item's length.
   */
  length?: number;
  /**
   * The inventory item's height.
   */
  height?: number;
  /**
   * The inventory item's width.
   */
  width?: number;
  /**
   * The inventory item's origin country.
   */
  origin_country?: string;
  /**
   * The inventory item's mid code.
   */
  mid_code?: string;
  /**
   * The inventory item's material.
   */
  material?: string;
  /**
   * The inventory item's title.
   */
  title?: string;
  /**
   * The description of the variant associated with the inventory item.
   */
  description?: string;
  /**
   * Whether the item requires shipping.
   */
  requires_shipping?: boolean;
  /**
   * The inventory item's thumbnail.
   */
  thumbnail?: string;
  /**
   * The inventory item's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The price list's details.
 */
export type AdminCreatePriceList = {
  /**
   * The price list's title.
   */
  title: string;
  /**
   * The price list's description.
   */
  description: string;
  /**
   * The date and time the price list starts at.
   */
  starts_at?: string;
  /**
   * The date and time the price list ends at.
   */
  ends_at?: string;
  /**
   * The price list's status.
   */
  status?: "active" | "draft";
  /**
   * The price list's type.
   */
  type?: "sale" | "override";
  /**
   * The price list's rules.
   */
  rules?: {
    [key: string]: unknown;
  };
  /**
   * The price list's prices.
   */
  prices?: Array<{
    /**
     * The price's currency code.
     */
    currency_code: string;
    /**
     * The price's amount.
     */
    amount: number;
    /**
     * The ID of the product variant this price is for.
     */
    variant_id: string;
    /**
     * The minimum quantity required in the cart for this price to be applied.
     */
    min_quantity?: number;
    /**
     * The maximum quantity in the cart that shouldn't be crossed for this price to be applied.
     */
    max_quantity?: number;
    /**
     * The price's rules.
     */
    rules?: {
      [key: string]: unknown;
    };
  }>;
};

/**
 * The price list's status.
 */
export type status = "active" | "draft";

/**
 * The price list's type.
 */
export type type5 = "sale" | "override";

/**
 * The price preference's details.
 */
export type AdminCreatePricePreference = {
  /**
   * The name of the attribute the price preference applies on.
   */
  attribute?: string;
  /**
   * The attribute's value.
   */
  value?: string;
  /**
   * Whether the price is tax inclusive if the value of the specified attribute matches the specified value.
   */
  is_tax_inclusive?: boolean;
};

/**
 * The product's details.
 */
export type AdminCreateProduct = {
  /**
   * The product's title.
   */
  title: string;
  /**
   * The product's subtitle.
   */
  subtitle?: string;
  /**
   * The product's description.
   */
  description?: string;
  /**
   * Whether the product is a gift card.
   */
  is_giftcard?: boolean;
  /**
   * Whether the product is discountable.
   */
  discountable?: boolean;
  /**
   * The product's images.
   */
  images?: Array<{
    /**
     * The image's URL.
     */
    url: string;
  }>;
  /**
   * The URL of the product's thumbnail.
   */
  thumbnail?: string;
  /**
   * The product's handle.
   */
  handle?: string;
  /**
   * The product's status.
   */
  status?: "draft" | "proposed" | "published" | "rejected";
  /**
   * The ID of the type the product belongs to.
   */
  type_id?: string;
  /**
   * The ID of the collection the product belongs to.
   */
  collection_id?: string;
  /**
   * The categories the product belongs to.
   */
  categories?: Array<{
    /**
     * The category's ID.
     */
    id: string;
  }>;
  /**
   * The product's tags.
   */
  tags?: Array<{
    /**
     * The tag's ID.
     */
    id: string;
  }>;
  /**
   * The product's options.
   */
  options: Array<AdminCreateProductOption>;
  /**
   * The product's variants.
   */
  variants?: Array<AdminCreateProductVariant>;
  /**
   * The sales channels the product is available in.
   */
  sales_channels?: Array<{
    /**
     * The sales channel's ID.
     */
    id: string;
  }>;
  /**
   * The product's weight.
   */
  weight?: number;
  /**
   * The product's length.
   */
  length?: number;
  /**
   * The product's height.
   */
  height?: number;
  /**
   * The product's width.
   */
  width?: number;
  /**
   * The product's HS code.
   */
  hs_code?: string;
  /**
   * The product's MID code.
   */
  mid_code?: string;
  /**
   * The product's origin country.
   */
  origin_country?: string;
  /**
   * The product's material.
   */
  material?: string;
  /**
   * The product's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product in an external or third-party system.
   */
  external_id?: string;
};

/**
 * The product's status.
 */
export type status2 = "draft" | "proposed" | "published" | "rejected";

/**
 * The product category's details.
 */
export type AdminCreateProductCategory = {
  /**
   * The product category's name.
   */
  name: string;
  /**
   * The product category's description.
   */
  description?: string;
  /**
   * The product category's handle.
   */
  handle?: string;
  /**
   * Whether the product category is only used and seen by admin users.
   */
  is_internal?: boolean;
  /**
   * Whether the product category is active.
   */
  is_active?: boolean;
  /**
   * The ID of a category that's the parent of this one.
   */
  parent_category_id?: string;
  /**
   * The sorting order of the product category among sibling categories.
   */
  rank?: number;
  /**
   * The product category's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product option's details.
 */
export type AdminCreateProductOption = {
  /**
   * The product option's title.
   */
  title: string;
  /**
   * The product option's values.
   */
  values: Array<string>;
};

/**
 * The product tag's details.
 */
export type AdminCreateProductTag = {
  /**
   * The product tag's value.
   */
  value: string;
  /**
   * The product tag's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the product type to create.
 */
export type AdminCreateProductType = {
  /**
   * The product's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The product type's value.
   */
  value: string;
};

/**
 * The product variant's details.
 */
export type AdminCreateProductVariant = {
  /**
   * The variant's title.
   */
  title: string;
  /**
   * The variant's SKU.
   */
  sku?: string;
  /**
   * The variant's EAN.
   */
  ean?: string;
  /**
   * The variant's UPC.
   */
  upc?: string;
  /**
   * The variant's barcode.
   */
  barcode?: string;
  /**
   * The variant's HS code.
   */
  hs_code?: string;
  /**
   * The variant's MID code.
   */
  mid_code?: string;
  /**
   * Whether it's allowed to order this variant when it's out of stock.
   */
  allow_backorder?: boolean;
  /**
   * Whether Medusa manages the variant's inventory quantity. If disabled, the product variant is always considered in stock.
   */
  manage_inventory?: boolean;
  /**
   * The sorting order of the variant among other variants in the product.
   */
  variant_rank?: number;
  /**
   * The variant's weight.
   */
  weight?: number;
  /**
   * The variant's length.
   */
  length?: number;
  /**
   * The variant's height.
   */
  height?: number;
  /**
   * The variant's width.
   */
  width?: number;
  /**
   * The variant's origin country.
   */
  origin_country?: string;
  /**
   * The variant's material.
   */
  material?: string;
  /**
   * The variant's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The variant's prices.
   */
  prices: Array<AdminCreateProductVariantPrice>;
  /**
   * The variant's options, where the key is an option's name, and the value is the option's value.
   */
  options?: {
    [key: string]: unknown;
  };
  /**
   * The variant's inventory items to create.
   */
  inventory_items?: Array<AdminCreateProductVariantInventoryKit>;
};

/**
 * The details of a variant's inventory item.
 */
export type AdminCreateProductVariantInventoryKit = {
  /**
   * The inventory item's ID.
   */
  inventory_item_id: string;
  /**
   * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
   */
  required_quantity?: number;
};

/**
 * The details of a variant's price.
 */
export type AdminCreateProductVariantPrice = {
  /**
   * The price's currency code.
   */
  currency_code: string;
  /**
   * The price's amount.
   */
  amount: number;
  /**
   * The minimum quantity that must be available in the cart for this price to apply.
   */
  min_quantity?: number;
  /**
   * The maximum quantity that must not be surpassed in the cart for this price to apply.
   */
  max_quantity?: number;
  /**
   * The price's rules.
   */
  rules?: {
    /**
     * The ID of a region.
     */
    region_id: string;
  };
};

/**
 * The promotion rule's details.
 */
export type AdminCreatePromotionRule = {
  /**
   * The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value.
   */
  operator: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
  /**
   * The rule's description.
   */
  description?: string;
  /**
   * The attribute to compare against when checking whether a promotion can be applied on a cart.
   */
  attribute: string;
  values: string | Array<string>;
};

/**
 * The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value.
 */
export type operator = "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";

/**
 * The refund reason's details.
 */
export type AdminCreateRefundReason = {
  /**
   * The refund reason's label.
   */
  label: string;
  /**
   * The refund reason's description.
   */
  description?: string;
};

/**
 * The region's details.
 */
export type AdminCreateRegion = {
  /**
   * The region's name.
   */
  name: string;
  /**
   * The region's currency code.
   */
  currency_code: string;
  /**
   * The region's countries.
   */
  countries?: Array<string>;
  /**
   * Whether taxes are calculated automatically during checkout in this region.
   */
  automatic_taxes?: boolean;
  /**
   * Whether prices in this region are tax inclusive.
   */
  is_tax_inclusive?: boolean;
  /**
   * The payment providers enabled in this region.
   */
  payment_providers?: Array<string>;
  /**
   * The region's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The reservation's details.
 */
export type AdminCreateReservation = {
  /**
   * The ID of the line item this reservation is created for.
   */
  line_item_id?: string;
  /**
   * The ID of the location the quantity is reserved from.
   */
  location_id: string;
  /**
   * The ID of the inventory item associated with the line item's variant.
   */
  inventory_item_id: string;
  /**
   * The reserved quantity.
   */
  quantity: number;
  /**
   * The reservation's description.
   */
  description?: string;
  /**
   * The reservation's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the return reason to create.
 */
export type AdminCreateReturnReason = {
  /**
   * The return reason's value.
   */
  value: string;
  /**
   * The return reason's label.
   */
  label: string;
  /**
   * The return reason's description.
   */
  description?: string;
  /**
   * The ID of the parent return reason.
   */
  parent_return_reason_id?: string;
  /**
   * The return reason's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The sales channel's details.
 */
export type AdminCreateSalesChannel = {
  /**
   * The sales channel's name.
   */
  name: string;
  /**
   * The sales channel's description.
   */
  description?: string;
  /**
   * Whether the sales channel is disabled.
   */
  is_disabled?: boolean;
  /**
   * The sales channel's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The shipment's details.
 */
export type AdminCreateShipment = {
  /**
   * The shipment's labels.
   */
  labels: Array<{
    /**
     * The label's tracking number.
     */
    tracking_number: string;
    /**
     * The label's tracking URL.
     */
    tracking_url: string;
    /**
     * The label's URL.
     */
    label_url: string;
  }>;
};

/**
 * The shipping option's details.
 */
export type AdminCreateShippingOption = {
  /**
   * The shipping option's name.
   */
  name: string;
  /**
   * The ID of the associated service zone.
   */
  service_zone_id: string;
  /**
   * The ID of the associated shipping profile.
   */
  shipping_profile_id: string;
  /**
   * The shipping option's data, useful for the fulfillment provider handling its processing.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The shipping option's price type. If `flat`, the shipping option has a fixed price set in `prices`. Otherwise, the shipping option's price is calculated by the fulfillment provider.
   */
  price_type: "flat" | "calculated";
  /**
   * The ID of the fulfillment provider handling this shipping option.
   */
  provider_id: string;
  type: AdminCreateShippingOptionType;
  /**
   * The shipping option's prices.
   */
  prices: Array<
    | {
        /**
         * The price's currency code.
         */
        currency_code: string;
        /**
         * The price's amount.
         */
        amount: number;
      }
    | {
        /**
         * The ID of the region this price is used in.
         */
        region_id: string;
        /**
         * The price's amount.
         */
        amount: number;
      }
  >;
  /**
   * The shipping option's rules.
   */
  rules?: Array<AdminCreateShippingOptionRule>;
};

/**
 * The shipping option's price type. If `flat`, the shipping option has a fixed price set in `prices`. Otherwise, the shipping option's price is calculated by the fulfillment provider.
 */
export type price_type = "flat" | "calculated";

/**
 * The details of the shipping option rule.
 */
export type AdminCreateShippingOptionRule = {
  /**
   * The operator used to check whether a rule applies.
   */
  operator: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte" | "nin";
  /**
   * The name of a property or table that the rule applies to.
   */
  attribute: string;
  value: string | Array<string>;
};

/**
 * The operator used to check whether a rule applies.
 */
export type operator2 =
  | "gt"
  | "lt"
  | "eq"
  | "ne"
  | "in"
  | "lte"
  | "gte"
  | "nin";

/**
 * The shipping option type's details.
 */
export type AdminCreateShippingOptionType = {
  /**
   * The type's label.
   */
  label: string;
  /**
   * The type's description.
   */
  description: string;
  /**
   * The type's code.
   */
  code: string;
};

/**
 * The shipping profile's details.
 */
export type AdminCreateShippingProfile = {
  /**
   * The shipping profile's name.
   */
  name: string;
  /**
   * The shipping profile's type.
   */
  type: string;
  /**
   * The shipping profile's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The stock location's details.
 */
export type AdminCreateStockLocation = {
  /**
   * The stock location's name.
   */
  name: string;
  /**
   * The ID of the stock location's address.
   */
  address_id?: string;
  address?: AdminUpsertStockLocationAddress;
  /**
   * The stock location's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The tax rate's details.
 */
export type AdminCreateTaxRate = {
  /**
   * The tax rate's name.
   */
  name: string;
  /**
   * The ID of the tax region this rate belongs to.
   */
  tax_region_id: string;
  /**
   * The rate to charge.
   */
  rate?: number;
  /**
   * The code the tax rate is identified by.
   */
  code: string;
  /**
   * The tax rate's rules.
   */
  rules?: Array<AdminCreateTaxRateRule>;
  /**
   * Whether the tax rate is the default in its tax region.
   */
  is_default?: boolean;
  /**
   * Whether the tax rate should be combined with parent rates.
   */
  is_combinable?: boolean;
  /**
   * The tax rate's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The tax rate rule's details.
 */
export type AdminCreateTaxRateRule = {
  /**
   * The name of a table in the database that this rule points to.
   */
  reference: string;
  /**
   * The ID of a record in the table specified in reference.
   */
  reference_id: string;
};

/**
 * The tax region's details.
 */
export type AdminCreateTaxRegion = {
  /**
   * The tax region's country code.
   */
  country_code: string;
  /**
   * The tax region's province code.
   */
  province_code?: string;
  /**
   * The ID of the parent tax region.
   */
  parent_id?: string;
  /**
   * The tax region's default tax rate.
   */
  default_tax_rate?: {
    /**
     * The rate to charge.
     */
    rate?: number;
    /**
     * The code the tax rate is identified by
     */
    code: string;
    /**
     * The default tax rate's name.
     */
    name: string;
    /**
     * Whether the tax rate should be combined with parent rates.
     */
    is_combinable?: boolean;
    /**
     * The default tax rate's metadata, used to store custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  };
  /**
   * The tax region's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the variant-inventory item association.
 */
export type AdminCreateVariantInventoryItem = {
  /**
   * The quantity of the variant in the inventory item.
   */
  required_quantity: number;
  /**
   * The inventory item's ID.
   */
  inventory_item_id: string;
};

/**
 * The details of changing a workflow execution's step status.
 */
export type AdminCreateWorkflowsAsyncResponse = {
  /**
   * The workflows execution's transaction ID.
   */
  transaction_id: string;
  /**
   * The ID of the step whose status was changed.
   */
  step_id: string;
  /**
   * Sets the step's response. It accepts any type.
   */
  response?: unknown;
  /**
   * Sets the compensation function's input. It accepts any response.
   */
  compensate_input?: unknown;
  /**
   * Whether to invoke or compensate the step.
   */
  action?: "invoke" | "compensate";
};

/**
 * Whether to invoke or compensate the step.
 */
export type action = "invoke" | "compensate";

/**
 * The details of the workflow to execute.
 */
export type AdminCreateWorkflowsRun = {
  /**
   * The input to pass to the workflow. Can be of any type.
   */
  input?: unknown;
  /**
   * The ID of the workflow execution's transaction.
   */
  transaction_id?: string;
};

/**
 * The currency's currencies.
 */
export type AdminCurrency = {
  /**
   * The currency's code.
   */
  code: string;
  /**
   * The currency's symbol.
   */
  symbol: string;
  /**
   * The currency's native symbol, if different than the symbol.
   */
  symbol_native: string;
  /**
   * The currency's name.
   */
  name: string;
  /**
   * The number of digits after the decimal for prices in this currency.
   */
  decimal_digits: number;
  /**
   * The rounding percision applied on prices in this currency.
   */
  rounding: number;
  /**
   * The currency's creation date.
   */
  created_at: string;
  /**
   * The currency's update date.
   */
  updated_at: string;
  /**
   * The currency's deletion date.
   */
  deleted_at: string;
};

/**
 * The paginated list of currencies.
 */
export type AdminCurrencyListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of currencies.
   */
  currencies: Array<AdminCurrency>;
};

/**
 * The currency's details.
 */
export type AdminCurrencyResponse = {
  currency: AdminCurrency;
};

/**
 * The customer's details.
 */
export type AdminCustomer = {
  /**
   * The customer's ID.
   */
  id: string;
  /**
   * Whether the customer is registered.
   */
  has_account: boolean;
  /**
   * The customer's groups.
   */
  groups?: Array<AdminCustomerGroup>;
  /**
   * The customer's email.
   */
  email: string;
  /**
   * The ID of the address used as the default billing address.
   */
  default_billing_address_id: string;
  /**
   * The ID of the address used as the default shipping address.
   */
  default_shipping_address_id: string;
  /**
   * The customer's company name.
   */
  company_name: string;
  /**
   * The customer's first name.
   */
  first_name: string;
  /**
   * The customer's last name.
   */
  last_name: string;
  /**
   * The customer's addresses.
   */
  addresses: Array<AdminCustomerAddress>;
  /**
   * The customer's phone.
   */
  phone?: string;
  /**
   * The customer's metadata, used to store custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the user that created this customer, if available.
   */
  created_by?: string;
  /**
   * The customer's creation date.
   */
  created_at?: string;
  /**
   * The customer's update date.
   */
  updated_at?: string;
  /**
   * The customer's deletion date.
   */
  deleted_at?: string;
};

/**
 * The customer's address.
 */
export type AdminCustomerAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The address's name.
   */
  address_name: string;
  /**
   * Whether the address is the default shipping address.
   */
  is_default_shipping: boolean;
  /**
   * Whether the address is the default billing address.
   */
  is_default_billing: boolean;
  /**
   * The ID of the customer that this address belongs to.
   */
  customer_id: string;
  /**
   * The customer's company.
   */
  company: string;
  /**
   * The customer's first name.
   */
  first_name: string;
  /**
   * The customer's last name.
   */
  last_name: string;
  /**
   * The address's first line.
   */
  address_1: string;
  /**
   * The address's second line.
   */
  address_2: string;
  /**
   * The address's city.
   */
  city: string;
  /**
   * The address's country code.
   */
  country_code: string;
  /**
   * The address's province.
   */
  province: string;
  /**
   * The address's postal code.
   */
  postal_code: string;
  /**
   * The address's phone.
   */
  phone: string;
  /**
   * The address's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The address's creation date.
   */
  created_at: string;
  /**
   * The address's update date.
   */
  updated_at: string;
};

/**
 * The address's details.
 */
export type AdminCustomerAddressResponse = {
  address: AdminCustomerAddress;
};

/**
 * The customer group's details.
 */
export type AdminCustomerGroup = {
  /**
   * The customer group's ID.
   */
  id: string;
  /**
   * The customer group's name.
   */
  name: string;
  /**
   * The customer group's customers.
   */
  customers: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The customer group's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The customer group's creation date.
   */
  created_at: string;
  /**
   * The customer group's update date.
   */
  updated_at: string;
};

/**
 * The customer group's details.
 */
export type AdminCustomerGroupResponse = {
  customer_group: AdminCustomerGroup;
};

/**
 * Filters to apply on customers to retrieve their groups.
 */
export type AdminCustomerInGroupFilters = {
  id?: string | Array<string>;
  email?:
    | string
    | Array<string>
    | {
        /**
         * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
         */
        $and?: Array<{
          [key: string]: unknown;
        }>;
        /**
         * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
         */
        $or?: Array<{
          [key: string]: unknown;
        }>;
        $eq?: string | Array<string>;
        /**
         * Filter by values not equal to this parameter.
         */
        $ne?: string;
        /**
         * Filter by values in this array.
         */
        $in?: Array<string>;
        /**
         * Filter by values not in this array.
         */
        $nin?: Array<string>;
        $not?:
          | string
          | {
              [key: string]: unknown;
            }
          | Array<string>;
        /**
         * Filter by values greater than this parameter. Useful for numbers and dates only.
         */
        $gt?: string;
        /**
         * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
         */
        $gte?: string;
        /**
         * Filter by values less than this parameter. Useful for numbers and dates only.
         */
        $lt?: string;
        /**
         * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
         */
        $lte?: string;
        /**
         * Apply a `like` filter. Useful for strings only.
         */
        $like?: string;
        /**
         * Apply a regex filter. Useful for strings only.
         */
        $re?: string;
        /**
         * Apply a case-insensitive `like` filter. Useful for strings only.
         */
        $ilike?: string;
        /**
         * Filter to apply on full-text properties.
         */
        $fulltext?: string;
        /**
         * Filter arrays that have overlapping values with this parameter.
         */
        $overlap?: Array<string>;
        /**
         * Filter arrays that contain some of the values of this parameter.
         */
        $contains?: Array<string>;
        /**
         * Filter arrays that contain all values of this parameter.
         */
        $contained?: Array<string>;
        /**
         * Filter by whether a value for this parameter exists (not `null`).
         */
        $exists?: boolean;
      };
  default_billing_address_id?: string | Array<string>;
  default_shipping_address_id?: string | Array<string>;
  company_name?: string | Array<string>;
  first_name?: string | Array<string>;
  last_name?: string | Array<string>;
  created_by?: string | Array<string>;
  /**
   * Filter the customer's creation date.
   */
  created_at?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
  /**
   * Filter the customer's update date.
   */
  updated_at?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
  /**
   * Filter the customer's deletion date.
   */
  deleted_at?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
};

/**
 * The customer's details.
 */
export type AdminCustomerResponse = {
  customer: AdminCustomer;
};

/**
 * The result of deleting the payment collection.
 */
export type AdminDeletePaymentCollectionResponse = {
  /**
   * The payment collection's ID.
   */
  id: string;
  /**
   * The name of the object that was deleted.
   */
  object: string;
  /**
   * Whether the object was deleted.
   */
  deleted: boolean;
};

/**
 * The draft order's details.
 */
export type AdminDraftOrderResponse = {
  draft_order: AdminOrder;
};

/**
 * The exchange's details.
 */
export type AdminExchange = {
  /**
   * The ID of the order the exchange is created for.
   */
  order_id: string;
  /**
   * The items returned (inbound) by the exchange.
   */
  return_items: Array<AdminReturnItem>;
  /**
   * The new items (outbound) sent by the exchange.
   */
  additional_items: Array<BaseExchangeItem>;
  /**
   * Whether to send the customer notifications when the exchange is updated.
   */
  no_notification?: boolean;
  /**
   * The amount to be exchanged or refunded. If the amount is negative, it must be refunded. If positive, additional payment is required from the customer.
   */
  difference_due?: number;
  return?: AdminReturn;
  /**
   * The ID of the associated exchange.
   */
  return_id?: string;
  /**
   * The exchange's ID.
   */
  id: string;
  /**
   * The exchange's display ID.
   */
  display_id?: string;
  /**
   * The shipping methods used to send the new (outbound) items.
   */
  shipping_methods?: Array<BaseOrderShippingMethod>;
  /**
   * The exchange's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date that the exchange was created.
   */
  created_at: string;
  /**
   * The date that the exchange was updated.
   */
  updated_at: string;
  /**
   * The version of the order once the exchange is applied.
   */
  order_version?: string;
  /**
   * The ID of the user that created the exchange.
   */
  created_by?: string;
  /**
   * The date the exchange was canceled.
   */
  canceled_at: string;
  /**
   * The date the exchange was deleted.
   */
  deleted_at: string;
  order?: BaseOrder;
  /**
   * Whether variants that are out-of-stock can still be added as additional or outbound items.
   */
  allow_backorder?: boolean;
};

/**
 * The details of deleting an exchange.
 */
export type AdminExchangeDeleteResponse = {
  /**
   * The exchange's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the exchange was deleted.
   */
  deleted: boolean;
};

/**
 * The exchange's details.
 */
export type AdminExchangeOrderResponse = {
  order: Order;
  exchange: AdminExchange;
};

/**
 * A preview of the order once the exchange is applied.
 */
export type AdminExchangePreviewResponse = {
  order_preview: AdminOrderPreview;
  exchange: AdminExchange;
};

/**
 * The details of a requested exchange.
 */
export type AdminExchangeRequestResponse = {
  return: AdminReturn;
  order_preview: AdminOrderPreview;
  exchange: AdminExchange;
};

/**
 * The exchange's details.
 */
export type AdminExchangeResponse = {
  exchange: AdminExchange;
};

/**
 * The details of an exchange's return.
 */
export type AdminExchangeReturnResponse = {
  order_preview: AdminOrderPreview;
  return: AdminReturn;
};

/**
 * The details of the product export.
 */
export type AdminExportProductResponse = {
  /**
   * The ID of the workflow execution's transaction. Use it to check the status of the export by sending a GET request to `/admin/workflows-executions/export-products/:transaction-id`
   */
  transaction_id: string;
};

/**
 * A file's details.
 */
export type AdminFile = {
  /**
   * The file's ID.
   */
  id: string;
  /**
   * The file's URL.
   */
  url: string;
};

/**
 * The list of uploaded files.
 */
export type AdminFileListResponse = {
  /**
   * The list of uploaded files.
   */
  files: Array<AdminFile>;
};

/**
 * A file's details.
 */
export type AdminFileResponse = {
  file: AdminFile;
};

/**
 * The fulfillment's details.
 */
export type AdminFulfillment = {
  /**
   * The fulfillment's ID.
   */
  id: string;
  /**
   * The ID of the location the fulfillment's items are shipped from.
   */
  location_id: string;
  /**
   * The ID of the fulfillment provider handling this fulfillment.
   */
  provider_id: string;
  /**
   * The ID of the shipping option this fulfillment is created for.
   */
  shipping_option_id: string;
  provider: AdminFulfillmentProvider;
  delivery_address: AdminFulfillmentAddress;
  /**
   * The fulfillment's items.
   */
  items: Array<AdminFulfillmentItem>;
  /**
   * The fulfillment's shipment labels.
   */
  labels: Array<AdminFulfillmentLabel>;
  /**
   * The date the fulfillment was packed at.
   */
  packed_at: string;
  /**
   * The date the fulfillment was shipped at.
   */
  shipped_at: string;
  /**
   * The date the fulfillment was delivered at.
   */
  delivered_at: string;
  /**
   * The date the fulfillment was canceled at.
   */
  canceled_at: string;
  /**
   * The fulfillment's data, useful for the third-party provider handling the fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The fulfillment's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the fulfillment was created at.
   */
  created_at: string;
  /**
   * The date the fulfillment was updated at.
   */
  updated_at: string;
  /**
   * The date the fulfillment was deleted at.
   */
  deleted_at: string;
};

/**
 * An address's details.
 */
export type AdminFulfillmentAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the fulfillment that the address belongs to.
   */
  fulfillment_id: string;
  /**
   * The address's company.
   */
  company: string;
  /**
   * The address's first name.
   */
  first_name: string;
  /**
   * The address's last name.
   */
  last_name: string;
  /**
   * The address's first line.
   */
  address_1: string;
  /**
   * The address's second line.
   */
  address_2: string;
  /**
   * The address's city.
   */
  city: string;
  /**
   * The address's country code.
   */
  country_code: string;
  /**
   * The address's province.
   */
  province: string;
  /**
   * The address's postal code.
   */
  postal_code: string;
  /**
   * The address's phone.
   */
  phone: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
  /**
   * The date the address was deleted.
   */
  deleted_at: string;
};

/**
 * The details of a fulfillment's item.
 */
export type AdminFulfillmentItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's quantity to be fulfilled.
   */
  quantity: number;
  /**
   * The item's SKU.
   */
  sku: string;
  /**
   * The item's barcode.
   */
  barcode: string;
  /**
   * The ID of the order's line item to be fulfilled.
   */
  line_item_id: string;
  /**
   * The ID of the inventory item of the underlying product variant.
   */
  inventory_item_id: string;
  /**
   * The ID of the fulfillment the item belongs to.
   */
  fulfillment_id: string;
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
  /**
   * The date the item was deleted.
   */
  deleted_at: string;
};

/**
 * The details of a fulfillmet's shipment label.
 */
export type AdminFulfillmentLabel = {
  /**
   * The label's ID.
   */
  id: string;
  /**
   * The label's tracking number.
   */
  tracking_number: string;
  /**
   * The label's tracking URL.
   */
  tracking_url: string;
  /**
   * The label's URL.
   */
  label_url: string;
  /**
   * The ID of the fulfillment the label is associated with.
   */
  fulfillment_id: string;
  /**
   * The date the label was created.
   */
  created_at: string;
  /**
   * The date the label was updated.
   */
  updated_at: string;
  /**
   * The date the label was deleted.
   */
  deleted_at: string;
};

/**
 * The fulfillment provider's details.
 */
export type AdminFulfillmentProvider = {
  /**
   * The provider's ID.
   */
  id: string;
  /**
   * The provider's is enabled.
   */
  is_enabled: boolean;
};

/**
 * The paginated list of fulfillment providers.
 */
export type AdminFulfillmentProviderListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total count of items.
   */
  count: number;
  /**
   * The list of fulfillment providers.
   */
  fulfillment_providers: Array<AdminFulfillmentProvider>;
};

/**
 * A fulfillment's details.
 */
export type AdminFulfillmentResponse = {
  fulfillment: AdminFulfillment;
};

/**
 * The service zone's fulfillment set.
 */
export type AdminFulfillmentSet = {
  /**
   * The fulfillment set's ID.
   */
  id: string;
  /**
   * The fulfillment set's name.
   */
  name: string;
  /**
   * The fulfillment set's type.
   */
  type: string;
  location: AdminStockLocation;
  /**
   * The fulfillment set's service zones.
   */
  service_zones: Array<AdminServiceZone>;
  /**
   * The fulfillment set's created at.
   */
  created_at: string;
  /**
   * The fulfillment set's updated at.
   */
  updated_at: string;
  /**
   * The fulfillment set's deleted at.
   */
  deleted_at: string;
};

/**
 * The deletion details.
 */
export type AdminFulfillmentSetDeleteResponse = {
  /**
   * The fulfillment set's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the fulfillment set was deleted.
   */
  deleted: boolean;
};

/**
 * The fulfillment set's details.
 */
export type AdminFulfillmentSetResponse = {
  fulfillment_set: AdminFulfillmentSet;
};

/**
 * The geo zone's geo zones.
 */
export type AdminGeoZone = {
  /**
   * The geo zone's ID.
   */
  id: string;
  /**
   * The geo zone's type.
   */
  type: "country" | "province" | "city" | "zip";
  /**
   * The geo zone's country code.
   */
  country_code: string;
  /**
   * The geo zone's province code.
   */
  province_code: string;
  /**
   * The geo zone's city.
   */
  city: string;
  /**
   * The geo zone's postal expression.
   */
  postal_expression: {
    [key: string]: unknown;
  };
  /**
   * The geo zone's created at.
   */
  created_at: string;
  /**
   * The geo zone's updated at.
   */
  updated_at: string;
  /**
   * The geo zone's deleted at.
   */
  deleted_at: string;
};

/**
 * The geo zone's type.
 */
export type type6 = "country" | "province" | "city" | "zip";

/**
 * The import's details.
 */
export type AdminImportProductRequest = {
  /**
   * A File to upload.
   */
  file: {
    [key: string]: unknown;
  };
};

/**
 * The import process's details.
 */
export type AdminImportProductResponse = {
  /**
   * The ID of the workflow execution's transaction. This is useful to confirm the import using the `/admin/products/:transaction-id/import` API route.
   */
  transaction_id: string;
  /**
   * The import's summary.
   */
  summary: {
    /**
     * The number of products that will be created by this import.
     */
    toCreate: number;
    /**
     * The number of products that will be updated by this import.
     */
    toUpdate: number;
  };
};

/**
 * The reservation's inventory item.
 */
export type AdminInventoryItem = {
  /**
   * The inventory item's ID.
   */
  id: string;
  /**
   * The inventory item's sku.
   */
  sku?: string;
  /**
   * The inventory item's origin country.
   */
  origin_country?: string;
  /**
   * The inventory item's hs code.
   */
  hs_code?: string;
  /**
   * The inventory item's requires shipping.
   */
  requires_shipping: boolean;
  /**
   * The inventory item's mid code.
   */
  mid_code?: string;
  /**
   * The inventory item's material.
   */
  material?: string;
  /**
   * The inventory item's weight.
   */
  weight?: number;
  /**
   * The inventory item's length.
   */
  length?: number;
  /**
   * The inventory item's height.
   */
  height?: number;
  /**
   * The inventory item's width.
   */
  width?: number;
  /**
   * The inventory item's title.
   */
  title?: string;
  /**
   * The inventory item's description.
   */
  description?: string;
  /**
   * The inventory item's thumbnail.
   */
  thumbnail?: string;
  /**
   * The inventory item's metadata.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The inventory item's location levels.
   */
  location_levels?: Array<AdminInventoryLevel>;
};

/**
 * The inventory item's details.
 */
export type AdminInventoryItemResponse = {
  inventory_item: AdminInventoryItem;
};

/**
 * The location level's location levels.
 */
export type AdminInventoryLevel = {
  /**
   * The location level's ID.
   */
  id: string;
  /**
   * The location level's created at.
   */
  created_at: string;
  /**
   * The location level's updated at.
   */
  updated_at: string;
  /**
   * The location level's deleted at.
   */
  deleted_at: string;
  /**
   * The location level's inventory item id.
   */
  inventory_item_id: string;
  /**
   * The location level's location id.
   */
  location_id: string;
  /**
   * The location level's stocked quantity.
   */
  stocked_quantity: number;
  /**
   * The location level's reserved quantity.
   */
  reserved_quantity: number;
  /**
   * The location level's incoming quantity.
   */
  incoming_quantity: number;
  /**
   * The location level's metadata.
   */
  metadata: {
    [key: string]: unknown;
  };
  inventory_item?: {
    [key: string]: unknown;
  };
  /**
   * The location level's available quantity.
   */
  available_quantity: number;
};

/**
 * The invite's details.
 */
export type AdminInvite = {
  /**
   * The invite's ID.
   */
  id: string;
  /**
   * The invite's email.
   */
  email: string;
  /**
   * Whether the invite has been accepted.
   */
  accepted: boolean;
  /**
   * The invite's token.
   */
  token: string;
  /**
   * The invite's expiry date.
   */
  expires_at?: string;
  /**
   * The invite's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the invite was created.
   */
  created_at?: string;
  /**
   * The date the invite was updated.
   */
  updated_at?: string;
};

/**
 * The invite's details.
 */
export type AdminInviteResponse = {
  invite: AdminInvite;
};

/**
 * The products removal details.
 */
export type AdminLinkPriceListProducts = {
  /**
   * The products to remove from the price list.
   */
  remove?: Array<string>;
};

/**
 * The notification's details.
 */
export type AdminNotification = {
  /**
   * The notification's ID.
   */
  id: string;
  /**
   * Where to send the notification to. For example, if `channel` is `email`, this can be an email number.
   */
  to: string;
  /**
   * Through which channel is the notification sent through.
   */
  channel: string;
  /**
   * The ID of the template in a third-party service used as the notification's shape.
   */
  template: string;
  /**
   * Data payload to send with the notification.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * What triggered this notification.
   */
  trigger_type?: string;
  /**
   * The ID of the associated resource. For example, if the notification was triggered because an order was created, this would be the ID of the order.
   */
  resource_id?: string;
  /**
   * The type of the resource that triggered the notification.
   */
  resource_type?: string;
  /**
   * The ID of the user or customer that's receiving this notification.
   */
  receiver_id?: string;
  /**
   * The ID of the original notification, if this notification is resent.
   */
  original_notification_id?: string;
  /**
   * The ID of the notification in an external or third-party system.
   */
  external_id?: string;
  /**
   * The ID of the provider used to send the notification.
   */
  provider_id: string;
  /**
   * The date the notification was created.
   */
  created_at: string;
};

/**
 * The paginated list of notifications.
 */
export type AdminNotificationListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total count of items.
   */
  count: number;
  /**
   * The list of notifications.
   */
  notifications: Array<AdminNotification>;
};

/**
 * The notification's details.
 */
export type AdminNotificationResponse = {
  notification: AdminNotification;
};

/**
 * The order's details.
 */
export type AdminOrder = {
  /**
   * The order's payment collections.
   */
  payment_collections: Array<AdminPaymentCollection>;
  /**
   * The order's fulfillments.
   */
  fulfillments?: Array<AdminOrderFulfillment>;
  sales_channel?: AdminSalesChannel;
  customer?: AdminCustomer;
  shipping_address?: AdminOrderAddress;
  billing_address?: AdminOrderAddress;
  /**
   * The order's ID.
   */
  id: string;
  /**
   * The order's version.
   */
  version: number;
  /**
   * The ID of the region associated with the order.
   */
  region_id: string;
  /**
   * The ID of the customer that placed the order.
   */
  customer_id: string;
  /**
   * The ID of the sales channel the order is placed in.
   */
  sales_channel_id: string;
  /**
   * The email of the customer that placed the order.
   */
  email: string;
  /**
   * The order's currency code.
   */
  currency_code: string;
  /**
   * The order's display ID.
   */
  display_id?: number;
  /**
   * The order's items.
   */
  items: Array<AdminOrderLineItem>;
  /**
   * The order's shipping methods.
   */
  shipping_methods: Array<AdminOrderShippingMethod>;
  /**
   * The order's payment status.
   */
  payment_status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized"
    | "captured"
    | "partially_captured"
    | "partially_refunded"
    | "refunded"
    | "requires_action";
  /**
   * The order's fulfillment status.
   */
  fulfillment_status:
    | "canceled"
    | "not_fulfilled"
    | "partially_fulfilled"
    | "fulfilled"
    | "partially_shipped"
    | "shipped"
    | "partially_delivered"
    | "delivered";
  /**
   * The order's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
  summary: BaseOrderSummary;
  /**
   * The order's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the order was created.
   */
  created_at: string;
  /**
   * The date the order was updated.
   */
  updated_at: string;
  /**
   * The total of the order's items including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The tax total of the order's items excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The total of the order's items including taxes and promotions.
   */
  item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The tax total of the order's items including promotions.
   */
  item_tax_total: number;
  /**
   * The order's total excluding promotions, including taxes.
   */
  original_total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The order's tax total, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The order's tax total including promotions.
   */
  tax_total: number;
  /**
   * The order's discount or promotions total.
   */
  discount_total: number;
  /**
   * The tax total of order's discount or promotion.
   */
  discount_tax_total: number;
  /**
   * The order's gift card total.
   */
  gift_card_total: number;
  /**
   * The tax total of the order's gift card.
   */
  gift_card_tax_total: number;
  /**
   * The order's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The tax total of the order's shipping.
   */
  shipping_tax_total: number;
  /**
   * The order's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The tax total of the order's shipping excluding promotions.
   */
  original_shipping_tax_total: number;
};

/**
 * The order's payment status.
 */
export type payment_status =
  | "canceled"
  | "not_paid"
  | "awaiting"
  | "authorized"
  | "partially_authorized"
  | "captured"
  | "partially_captured"
  | "partially_refunded"
  | "refunded"
  | "requires_action";

/**
 * The order's fulfillment status.
 */
export type fulfillment_status =
  | "canceled"
  | "not_fulfilled"
  | "partially_fulfilled"
  | "fulfilled"
  | "partially_shipped"
  | "shipped"
  | "partially_delivered"
  | "delivered";

/**
 * An order address.
 */
export type AdminOrderAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the customer this address belongs to.
   */
  customer_id?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  country?: AdminRegionCountry;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The order change's details.
 */
export type AdminOrderChange = {
  /**
   * The order change's ID.
   */
  id: string;
  /**
   * The order change's version. This will be the order's version when the change is applied.
   */
  version: number;
  /**
   * The order change's type.
   */
  change_type?: "return" | "exchange" | "claim" | "edit";
  /**
   * The ID of the order this change applies on.
   */
  order_id: string;
  /**
   * The ID of the associated return.
   */
  return_id: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id: string;
  /**
   * The ID of the associated claim.
   */
  claim_id: string;
  order: AdminOrder;
  return_order: AdminReturn;
  exchange: AdminExchange;
  claim: AdminClaim;
  /**
   * The order change's actions.
   */
  actions: Array<AdminOrderChangeAction>;
  /**
   * The order change's status.
   */
  status: "canceled" | "requested" | "pending" | "confirmed" | "declined";
  /**
   * The ID of the user that requested the change.
   */
  requested_by: string;
  /**
   * The date the order change was requested.
   */
  requested_at: string;
  /**
   * The ID of the user that confirmed the order change.
   */
  confirmed_by: string;
  /**
   * The date the order change was confirmed.
   */
  confirmed_at: string;
  /**
   * The ID of the user that declined the order change.
   */
  declined_by: string;
  /**
   * The reason the order change was declined.
   */
  declined_reason: string;
  /**
   * The order change's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the order change was declined.
   */
  declined_at: string;
  /**
   * The ID of the user that canceled the order change.
   */
  canceled_by: string;
  /**
   * The date the order change was canceled.
   */
  canceled_at: string;
  /**
   * The date the order change was created.
   */
  created_at: string;
  /**
   * The date the order change was updated.
   */
  updated_at: string;
};

/**
 * The order change's type.
 */
export type change_type = "return" | "exchange" | "claim" | "edit";

/**
 * The order change's status.
 */
export type status3 =
  | "canceled"
  | "requested"
  | "pending"
  | "confirmed"
  | "declined";

/**
 * The order change action's details.
 */
export type AdminOrderChangeAction = {
  /**
   * The action's ID.
   */
  id: string;
  /**
   * The ID of the order change that the action belongs to.
   */
  order_change_id: string;
  order_change: {
    [key: string]: unknown;
  };
  /**
   * The ID of the order the associated change is for.
   */
  order_id: string;
  /**
   * The ID of the associated return.
   */
  return_id: string;
  /**
   * The ID of the associated claim.
   */
  claim_id: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id: string;
  order: AdminOrder;
  /**
   * The name of the table this action applies on.
   */
  reference: "claim" | "exchange" | "return" | "order_shipping_method";
  /**
   * The ID of the record in the referenced table.
   */
  reference_id: string;
  /**
   * The applied action.
   */
  action:
    | "CANCEL_RETURN_ITEM"
    | "FULFILL_ITEM"
    | "DELIVER_ITEM"
    | "CANCEL_ITEM_FULFILLMENT"
    | "ITEM_ADD"
    | "ITEM_REMOVE"
    | "ITEM_UPDATE"
    | "RECEIVE_DAMAGED_RETURN_ITEM"
    | "RECEIVE_RETURN_ITEM"
    | "RETURN_ITEM"
    | "SHIPPING_ADD"
    | "SHIPPING_REMOVE"
    | "SHIP_ITEM"
    | "WRITE_OFF_ITEM"
    | "REINSTATE_ITEM";
  /**
   * The action's details.
   */
  details: {
    [key: string]: unknown;
  };
  /**
   * A note that's viewed only by admin users.
   */
  internal_note: string;
  /**
   * The date the action was created.
   */
  created_at: string;
  /**
   * The date the action was updated.
   */
  updated_at: string;
};

/**
 * The name of the table this action applies on.
 */
export type reference =
  | "claim"
  | "exchange"
  | "return"
  | "order_shipping_method";

/**
 * The applied action.
 */
export type action2 =
  | "CANCEL_RETURN_ITEM"
  | "FULFILL_ITEM"
  | "DELIVER_ITEM"
  | "CANCEL_ITEM_FULFILLMENT"
  | "ITEM_ADD"
  | "ITEM_REMOVE"
  | "ITEM_UPDATE"
  | "RECEIVE_DAMAGED_RETURN_ITEM"
  | "RECEIVE_RETURN_ITEM"
  | "RETURN_ITEM"
  | "SHIPPING_ADD"
  | "SHIPPING_REMOVE"
  | "SHIP_ITEM"
  | "WRITE_OFF_ITEM"
  | "REINSTATE_ITEM";

/**
 * The details of an order's changes.
 */
export type AdminOrderChangesResponse = {
  /**
   * An order's changes.
   */
  order_changes: Array<AdminOrderChange>;
};

/**
 * The preview of an order edit.
 */
export type AdminOrderEditPreviewResponse = {
  order_preview: AdminOrderPreview;
};

/**
 * An order edit's details.
 */
export type AdminOrderEditResponse = {
  order_change: AdminOrderChange;
};

/**
 * The fulfillment's details.
 */
export type AdminOrderFulfillment = {
  /**
   * The fulfillment's ID.
   */
  id: string;
  /**
   * The ID of the location the items are fulfilled from.
   */
  location_id: string;
  /**
   * The date the items were packed.
   */
  packed_at: string;
  /**
   * The date the items were shipped.
   */
  shipped_at: string;
  /**
   * The date the items were delivered.
   */
  delivered_at: string;
  /**
   * The date the items were canceled.
   */
  canceled_at: string;
  /**
   * Data useful for the fulfillment provider handling it. This is taken from the associated shipping option.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The ID of the fulfillment provider used to handle the fulfillment.
   */
  provider_id: string;
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * The fulfillment's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the fulfillment was created.
   */
  created_at: string;
  /**
   * The date the fulfillment was updated.
   */
  updated_at: string;
  /**
   * Whether the fulfillment requires shipping.
   */
  requires_shipping: boolean;
};

/**
 * The order item's details.
 */
export type AdminOrderItem = {
  /**
   * The ID of the order this item belongs to.
   */
  order_id: string;
  /**
   * The ID of the associated line item.
   */
  item_id: string;
  /**
   * The order item's version.
   */
  version: number;
  /**
   * The order item's history.
   */
  history: {
    /**
     * The version changes of the item.
     */
    version: {
      /**
       * The original version.
       */
      from: number;
      /**
       * The new version.
       */
      to: number;
    };
  };
  item: AdminOrderLineItem;
};

/**
 * The item's details.
 */
export type AdminOrderLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle: string;
  /**
   * The URL of the item's thumbnail.
   */
  thumbnail: string;
  variant?: AdminProductVariant;
  /**
   * The ID of the associated variant.
   */
  variant_id: string;
  product?: AdminProduct;
  /**
   * The ID of the associated product.
   */
  product_id: string;
  /**
   * The item's product title.
   */
  product_title: string;
  /**
   * The item's product description.
   */
  product_description: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle: string;
  /**
   * The item's product type.
   */
  product_type: string;
  /**
   * The ID of the collection the item's product belongs to.
   */
  product_collection: string;
  /**
   * The item's product handle.
   */
  product_handle: string;
  /**
   * The item's variant SKU.
   */
  variant_sku: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode: string;
  /**
   * The item's variant title.
   */
  variant_title: string;
  /**
   * The values of the item variant's options.
   */
  variant_option_values: {
    [key: string]: unknown;
  };
  /**
   * Whether the item requires shipping.
   */
  requires_shipping: boolean;
  /**
   * Whether the item is discountable.
   */
  is_discountable: boolean;
  /**
   * Whether the item is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
  /**
   * The item's unit price.
   */
  unit_price: number;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<BaseOrderLineItemTaxLine>;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<BaseOrderLineItemAdjustment>;
  detail: {
    [key: string]: unknown;
  };
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The item's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the item, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_tax_total: number;
  /**
   * The item's total, including taxes and promotions.
   */
  total: number;
  /**
   * The item's subtotal excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax total of the item including promotions.
   */
  tax_total: number;
  /**
   * The total discount amount of the item.
   */
  discount_total: number;
  /**
   * The total taxes applied on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The total refundable amount of the item's total.
   */
  refundable_total: number;
  /**
   * The total refundable amount of the item's total for a single quantity.
   */
  refundable_total_per_unit: number;
};

/**
 * A preview of an order if a change, such as exchange, return, edit, or claim is applied on it.
 */
export type AdminOrderPreview = {
  /**
   * The total of the requested return.
   */
  return_requested_total: number;
  order_change: AdminOrderChange;
  /**
   * The order's items.
   */
  items?: Array<
    {
      /**
       * The item's ID.
       */
      id: string;
      /**
       * The item's title.
       */
      title: string;
      /**
       * The item's subtitle.
       */
      subtitle: string;
      /**
       * The URL of the item's thumbnail.
       */
      thumbnail: string;
      variant?: BaseProductVariant;
      /**
       * The ID of the associated variant.
       */
      variant_id: string;
      product?: AdminProduct;
      /**
       * The ID of the associated product.
       */
      product_id: string;
      /**
       * The title of the item's product.
       */
      product_title: string;
      /**
       * The description of the item's product.
       */
      product_description: string;
      /**
       * The subtitle of the item's product.
       */
      product_subtitle: string;
      /**
       * The ID of type of the item's product.
       */
      product_type: string;
      /**
       * The ID of collection of the item's product.
       */
      product_collection: string;
      /**
       * The handle of the item's product.
       */
      product_handle: string;
      /**
       * The SKU of the item's variant.
       */
      variant_sku: string;
      /**
       * The barcode of the item's variant.
       */
      variant_barcode: string;
      /**
       * The title of the item's variant.
       */
      variant_title: string;
      /**
       * The option values of the item's variant as key-value pairs. The key is the title of an option, and the value is the option's value.
       */
      variant_option_values: {
        [key: string]: unknown;
      };
      /**
       * Whether the item requires shipping.
       */
      requires_shipping: boolean;
      /**
       * Whether the item is discountable.
       */
      is_discountable: boolean;
      /**
       * Whether the item's price includes taxes.
       */
      is_tax_inclusive: boolean;
      /**
       * The original price of the item before a promotion or sale.
       */
      compare_at_unit_price?: number;
      /**
       * The item's unit price.
       */
      unit_price: number;
      /**
       * The item's quantity.
       */
      quantity: number;
      /**
       * The item's tax lines.
       */
      tax_lines?: Array<BaseOrderLineItemTaxLine>;
      /**
       * The item's adjustments.
       */
      adjustments?: Array<BaseOrderLineItemAdjustment>;
      detail: BaseOrderItemDetail;
      /**
       * The date the item was created.
       */
      created_at: string;
      /**
       * The date the item was updated.
       */
      updated_at: string;
      /**
       * The item's metadata, can hold custom key-value pairs.
       */
      metadata: {
        [key: string]: unknown;
      };
      /**
       * The item's total including taxes, excluding promotions.
       */
      original_total: number;
      /**
       * The item's total excluding taxes, including promotions.
       */
      original_subtotal: number;
      /**
       * The tax total of the item excluding promotions.
       */
      original_tax_total: number;
      /**
       * The item's total for a single unit including taxes and promotions.
       */
      item_total: number;
      /**
       * The item's total for a single unit excluding taxes, including promotions.
       */
      item_subtotal: number;
      /**
       * The tax total for a single unit of the item including promotions.
       */
      item_tax_total: number;
      /**
       * The item's total including taxes and promotions.
       */
      total: number;
      /**
       * The item's total excluding taxes, including promotions.
       */
      subtotal: number;
      /**
       * The tax total of the item including promotions.
       */
      tax_total: number;
      /**
       * The total of the item's discount / promotion.
       */
      discount_total: number;
      /**
       * The tax total of the item's discount / promotion
       */
      discount_tax_total: number;
      /**
       * The total refundable amount of the item's total.
       */
      refundable_total: number;
      /**
       * The total refundable amount of the item's total for a single unit.
       */
      refundable_total_per_unit: number;
    } & {
      /**
       * The actions applied on an item.
       */
      actions?: Array<{
        [key: string]: unknown;
      }>;
    }
  >;
  /**
   * The order's shipping methods.
   */
  shipping_methods?: Array<
    {
      /**
       * The shipping method's ID.
       */
      id: string;
      /**
       * The ID of the order this shipping method belongs to.
       */
      order_id: string;
      /**
       * The shipping method's name.
       */
      name: string;
      /**
       * The shipping method's description.
       */
      description?: string;
      /**
       * The shipping method's amount.
       */
      amount: number;
      /**
       * Whether the shipping method's amount is tax inclusive.
       */
      is_tax_inclusive: boolean;
      /**
       * The ID of the shipping option this method was created from.
       */
      shipping_option_id: string;
      /**
       * The data relevant for the fulfillment provider to process this shipment.
       */
      data: {
        [key: string]: unknown;
      };
      /**
       * The shipping method's metadata, can hold custom key-value pairs.
       */
      metadata: {
        [key: string]: unknown;
      };
      /**
       * The shipping method's tax lines.
       */
      tax_lines?: Array<BaseOrderShippingMethodTaxLine>;
      /**
       * The shipping method's adjustments.
       */
      adjustments?: Array<BaseOrderShippingMethodAdjustment>;
      original_total: string | number;
      original_subtotal: string | number;
      original_tax_total: string | number;
      total: string | number;
      subtotal: string | number;
      tax_total: string | number;
      discount_total: string | number;
      discount_tax_total: string | number;
      /**
       * The date the shipping method was created.
       */
      created_at: string;
      /**
       * The date the shipping method was updated.
       */
      updated_at: string;
    } & {
      /**
       * The actions applied on the shipping method.
       */
      actions?: Array<{
        [key: string]: unknown;
      }>;
    }
  >;
  /**
   * The order's currency code.
   */
  currency_code: string;
  /**
   * The order's version when this preview is applied.
   */
  version: number;
  /**
   * The order's ID.
   */
  id: string;
  /**
   * The ID of the order's associated region.
   */
  region_id: string;
  /**
   * The ID of the customer that placed the order.
   */
  customer_id: string;
  /**
   * The ID of the sales channel that the order was placed in.
   */
  sales_channel_id: string;
  /**
   * The email of the customer that placed the order.
   */
  email: string;
  /**
   * The order's display ID.
   */
  display_id?: number;
  shipping_address?: AdminOrderAddress;
  billing_address?: AdminOrderAddress;
  /**
   * The order's payment collections.
   */
  payment_collections: Array<AdminPaymentCollection>;
  /**
   * The order's payment status.
   */
  payment_status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized"
    | "captured"
    | "partially_captured"
    | "partially_refunded"
    | "refunded"
    | "requires_action";
  /**
   * The order's fulfillments.
   */
  fulfillments?: Array<AdminOrderFulfillment>;
  /**
   * The order's fulfillment status.
   */
  fulfillment_status:
    | "canceled"
    | "not_fulfilled"
    | "partially_fulfilled"
    | "fulfilled"
    | "partially_shipped"
    | "shipped"
    | "partially_delivered"
    | "delivered";
  /**
   * The order's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
  summary: BaseOrderSummary;
  /**
   * The order's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the order was created.
   */
  created_at: string;
  /**
   * The date the order was updated.
   */
  updated_at: string;
  /**
   * The total of the order's items including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The tax total of the order's items excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The total of the order's items including taxes and promotions.
   */
  item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The tax total of the order's items including promotions.
   */
  item_tax_total: number;
  /**
   * The order's total excluding promotions, including taxes.
   */
  original_total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The order's tax total, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The order's tax total including promotions.
   */
  tax_total: number;
  /**
   * The order's discount or promotions total.
   */
  discount_total: number;
  /**
   * The tax total of order's discount or promotion.
   */
  discount_tax_total: number;
  /**
   * The order's gift card total.
   */
  gift_card_total: number;
  /**
   * The tax total of the order's gift card.
   */
  gift_card_tax_total: number;
  /**
   * The order's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The tax total of the order's shipping.
   */
  shipping_tax_total: number;
  /**
   * The order's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The tax total of the order's shipping excluding promotions.
   */
  original_shipping_tax_total: number;
  customer?: AdminCustomer;
  sales_channel?: AdminSalesChannel;
};

/**
 * The preview of an order.
 */
export type AdminOrderPreviewResponse = {
  order: AdminOrderPreview;
};

/**
 * An order's details.
 */
export type AdminOrderResponse = {
  order: AdminOrder;
};

/**
 * The order return details.
 */
export type AdminOrderReturnResponse = {
  order: Order;
  return: AdminReturn;
};

/**
 * The shipping method's details.
 */
export type AdminOrderShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the order the shipping method belongs to.
   */
  order_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount includes applied taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id: string;
  /**
   * The shipping method's data, useful for fulfillment provider handling its fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<BaseOrderShippingMethodTaxLine>;
  /**
   * The shipping method's adjustments.
   */
  adjustments?: Array<BaseOrderShippingMethodAdjustment>;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The shipping method's total taxes excluding promotions.
   */
  original_tax_total: number;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The shipping method's tax total including promotions.
   */
  tax_total: number;
  /**
   * The total discounts applied on the shipping method.
   */
  discount_total: number;
  /**
   * The taxes applied on the discount amount.
   */
  discount_tax_total: number;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  detail?: BaseOrderShippingDetail;
};

/**
 * The payment's details.
 */
export type AdminPayment = {
  /**
   * The payment's ID.
   */
  id: string;
  /**
   * The payment's amount.
   */
  amount: number;
  /**
   * The amount authorized of the payment.
   */
  authorized_amount?: number;
  /**
   * The payment's currency code.
   */
  currency_code: string;
  /**
   * The ID of the payment provider used to process this payment.
   */
  provider_id: string;
  /**
   * The ID of the associated cart.
   */
  cart_id?: string;
  /**
   * The ID of the associated order.
   */
  order_id?: string;
  /**
   * The ID of the associated order edit.
   */
  order_edit_id?: string;
  /**
   * ID of the associated customer.
   */
  customer_id?: string;
  /**
   * The payment's data, useful for processing by the payment provider.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The date the payment was created.
   */
  created_at?: string;
  /**
   * The date the payment was updated.
   */
  updated_at?: string;
  /**
   * The date the payment was captured.
   */
  captured_at?: string;
  /**
   * The date the payment was canceled.
   */
  canceled_at?: string;
  /**
   * The captured amount of the payment.
   */
  captured_amount?: number;
  /**
   * The refunded amount of the payment.
   */
  refunded_amount?: number;
  /**
   * The details of payment captures.
   */
  captures?: Array<BaseCapture>;
  /**
   * The details of payment refunds.
   */
  refunds?: Array<AdminRefund>;
  payment_collection?: {
    [key: string]: unknown;
  };
  payment_session?: AdminPaymentSession;
};

/**
 * The payment collection's details.
 */
export type AdminPaymentCollection = {
  /**
   * The payment collection's ID.
   */
  id: string;
  /**
   * The payment collection's currency code.
   */
  currency_code: string;
  /**
   * The ID of the region this payment collection is associated with.
   */
  region_id: string;
  /**
   * The total amount to be paid.
   */
  amount: number;
  /**
   * The total authorized amount of the collection's payments.
   */
  authorized_amount?: number;
  /**
   * The total captured amount of the collection's payments.
   */
  captured_amount?: number;
  /**
   * The total refunded amount of the collection's payments.
   */
  refunded_amount?: number;
  /**
   * The date the payment collection was completed.
   */
  completed_at?: string;
  /**
   * The date the payment collection was created.
   */
  created_at?: string;
  /**
   * The date the payment collection was updated.
   */
  updated_at?: string;
  /**
   * The payment collection's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The payment collection's status.
   */
  status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized";
  /**
   * The payment provider used to process the collection's payments and sessions.
   */
  payment_providers: Array<AdminPaymentProvider>;
  /**
   * The payment collection's payment sessions.
   */
  payment_sessions?: Array<AdminPaymentSession>;
  /**
   * The payment collection's payments.
   */
  payments?: Array<AdminPayment>;
};

/**
 * The payment collection's status.
 */
export type status4 =
  | "canceled"
  | "not_paid"
  | "awaiting"
  | "authorized"
  | "partially_authorized";

/**
 * The payment collection's details.
 */
export type AdminPaymentCollectionResponse = {
  payment_collection: AdminPaymentCollection;
};

/**
 * The payment provider's details.
 */
export type AdminPaymentProvider = {
  /**
   * The payment provider's ID.
   */
  id: string;
  /**
   * Whether the payment provider is enabled.
   */
  is_enabled: boolean;
};

/**
 * The payment's details.
 */
export type AdminPaymentResponse = {
  payment: AdminPayment;
};

/**
 * The payment session's details.
 */
export type AdminPaymentSession = {
  /**
   * The payment session's ID.
   */
  id: string;
  /**
   * The payment session's amount.
   */
  amount: number;
  /**
   * The payment session's currency code.
   */
  currency_code: string;
  /**
   * The ID of the payment provider processing this session.
   */
  provider_id: string;
  /**
   * The payment session's data, useful for the payment provider processing the payment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The context around the payment, such as the customer's details.
   */
  context?: {
    [key: string]: unknown;
  };
  /**
   * The payment session's status.
   */
  status:
    | "authorized"
    | "captured"
    | "canceled"
    | "pending"
    | "requires_more"
    | "error";
  /**
   * The date the payment session was authorized.
   */
  authorized_at?: string;
  payment_collection?: {
    [key: string]: unknown;
  };
  payment?: BasePayment;
};

/**
 * The payment session's status.
 */
export type status5 =
  | "authorized"
  | "captured"
  | "canceled"
  | "pending"
  | "requires_more"
  | "error";

/**
 * The details of canceling a claim.
 */
export type AdminPostCancelClaimReqSchema = {
  /**
   * Whether to send the customer a notification about the claim's cancelation.
   */
  no_notification?: boolean;
};

/**
 * The details of canceling an exchange.
 */
export type AdminPostCancelExchangeReqSchema = {
  /**
   * Whether to send a notification to the customer about the exchange's cancelation.
   */
  no_notification?: boolean;
};

/**
 * The details of canceling a return.
 */
export type AdminPostCancelReturnReqSchema = {
  /**
   * Whether to send the customer a notification about the return's cancelation.
   */
  no_notification?: boolean;
};

/**
 * The details of the order items to add to the claim.
 */
export type AdminPostClaimItemsReqSchema = {
  /**
   * The item's details.
   */
  items?: Array<{
    /**
     * The ID of the order's item.
     */
    id: string;
    /**
     * The quantity of the order's item to add to the claim.
     */
    quantity: number;
    /**
     * The reason the item is claimed.
     */
    reason?: "missing_item" | "wrong_item" | "production_failure" | "other";
    /**
     * The item's description.
     */
    description?: string;
    /**
     * A note that's only viewed by admin users.
     */
    internal_note?: string;
  }>;
};

/**
 * The details of the outbound items to add to the claim.
 */
export type AdminPostClaimsAddItemsReqSchema = {
  /**
   * The outbound item's details.
   */
  items?: Array<{
    /**
     * The ID of the associated product variant.
     */
    variant_id: string;
    /**
     * The quantity to send to the customer.
     */
    quantity: number;
    /**
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  }>;
};

/**
 * The details to update in the item.
 */
export type AdminPostClaimsItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * The ID of the return reason associated with the item.
   */
  reason_id?: string;
  /**
   * A note that's only viewed by admin users.
   */
  internal_note?: string;
};

/**
 * The details to update in the shipping method.
 */
export type AdminPostClaimsShippingActionReqSchema = {
  /**
   * The shipping method's custom amount.
   */
  custom_amount?: number;
  /**
   * A note only viewed by admin users.
   */
  internal_note?: string;
  /**
   * The claim's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the shipping method used to ship outbound items.
 */
export type AdminPostClaimsShippingReqSchema = {
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * Set a custom price for the shipping method.
   */
  custom_amount?: number;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * A note only viewed by admin users.
   */
  internal_note?: string;
  /**
   * The claim's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of outbound items.
 */
export type AdminPostExchangesAddItemsReqSchema = {
  /**
   * The details of outbound items.
   */
  items?: Array<{
    /**
     * The ID of the associated product variant.
     */
    variant_id: string;
    /**
     * The item's quantity.
     */
    quantity: number;
    /**
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * Whether the item can be added even if it's not in stock.
     */
    allow_backorder?: boolean;
    /**
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  }>;
};

/**
 * The details to update in an outbound item.
 */
export type AdminPostExchangesItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note only viewed by admin users.
   */
  internal_note?: string;
};

/**
 * The details to update in an inbound (returned) item.
 */
export type AdminPostExchangesRequestItemsReturnActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The ID of the associated return reason.
   */
  reason_id?: string;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the inbound (return) items.
 */
export type AdminPostExchangesReturnRequestItemsReqSchema = {
  /**
   * The details of the inbound (return) items.
   */
  items?: Array<{
    /**
     * The ID of the order's item.
     */
    id: string;
    /**
     * The item's quantity.
     */
    quantity: number;
    /**
     * The item's description.
     */
    description?: string;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * The ID of the return reason to associate with the item.
     */
    reason_id?: string;
    /**
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  }>;
};

/**
 * The details of the shipping method to update.
 */
export type AdminPostExchangesShippingActionReqSchema = {
  /**
   * The shipping method's custom amount.
   */
  custom_amount?: number;
  /**
   * A note viewed by admin users only.
   */
  internal_note?: string;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The outbound shipping method's details.
 */
export type AdminPostExchangesShippingReqSchema = {
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * Set a custom amount for the shipping method.
   */
  custom_amount?: number;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * A note viewed by admin users only.
   */
  internal_note?: string;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The claim's details.
 */
export type AdminPostOrderClaimsReqSchema = {
  /**
   * The claim's type.
   */
  type: "refund" | "replace";
  /**
   * The ID of the order the claim is created for.
   */
  order_id: string;
  /**
   * The claim's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The ID of the associated return reason.
   */
  reason_id?: string;
  /**
   * The claim's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of items to be edited.
 */
export type AdminPostOrderEditsAddItemsReqSchema = {
  /**
   * The details of items to be edited.
   */
  items?: Array<{
    /**
     * The ID of the associated product variant.
     */
    variant_id: string;
    /**
     * The item's quantity.
     */
    quantity: number;
    /**
     * The item's unit price.
     */
    unit_price?: number;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * Whether the item can be added even if there's no available invenotory quantity of the variant.
     */
    allow_backorder?: boolean;
    /**
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
    /**
     * The original price of the item before a promotion or sale.
     */
    compare_at_unit_price?: number;
  }>;
};

/**
 * The details to update in the item.
 */
export type AdminPostOrderEditsItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The item's unit price.
   */
  unit_price?: number;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
};

/**
 * The order edit's details.
 */
export type AdminPostOrderEditsReqSchema = {
  /**
   * The ID of the order this edit is for.
   */
  order_id: string;
  /**
   * The order edit's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The order edit's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The shipping method's details.
 */
export type AdminPostOrderEditsShippingActionReqSchema = {
  /**
   * Set a custom price for the shipping method.
   */
  custom_amount?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The order edit's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The shipping method's details.
 */
export type AdminPostOrderEditsShippingReqSchema = {
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * Set a custom price for the shipping method.
   */
  custom_amount?: number;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The order item's details to update.
 */
export type AdminPostOrderEditsUpdateItemQuantityReqSchema = {
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The item's unit price.
   */
  unit_price?: number;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
};

/**
 * The exchange's details.
 */
export type AdminPostOrderExchangesReqSchema = {
  /**
   * The ID of the order this exchange is created for.
   */
  order_id: string;
  /**
   * The exchange's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The return receival details.
 */
export type AdminPostReceiveReturnsReqSchema = {
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The return's description.
   */
  description?: string;
  /**
   * The return's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The confirmation's details.
 */
export type AdminPostReturnsConfirmRequestReqSchema = {
  /**
   * Whether to send the customer a notification about the confirmation.
   */
  no_notification?: boolean;
};

/**
 * The details to update of the damaged item.
 */
export type AdminPostReturnsDismissItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
};

/**
 * The details of the received item.
 */
export type AdminPostReturnsReceiveItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
};

/**
 * The items details.
 */
export type AdminPostReturnsReceiveItemsReqSchema = {
  /**
   * The items details.
   */
  items?: Array<{
    /**
     * The ID of the item in the order.
     */
    id: string;
    /**
     * The item's quantity.
     */
    quantity: number;
    /**
     * The item's description.
     */
    description?: string;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
  }>;
};

/**
 * The return's details.
 */
export type AdminPostReturnsReqSchema = {
  /**
   * The ID of the order the return belongs to.
   */
  order_id: string;
  /**
   * The ID of the location the items are returned to.
   */
  location_id?: string;
  /**
   * The return's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * Whether to send the customer a notification about the created return.
   */
  no_notification?: boolean;
  /**
   * The return's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in the item.
 */
export type AdminPostReturnsRequestItemsActionReqSchema = {
  /**
   * The item's quantity.
   */
  quantity?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The ID of the associated return reason.
   */
  reason_id?: string;
  /**
   * The claim's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The items' details.
 */
export type AdminPostReturnsRequestItemsReqSchema = {
  /**
   * The items' details.
   */
  items?: Array<{
    /**
     * The item's ID.
     */
    id: string;
    /**
     * The item's quantity.
     */
    quantity: number;
    /**
     * The item's description.
     */
    description?: string;
    /**
     * A note viewed only by admin users.
     */
    internal_note?: string;
    /**
     * The ID of the associated return reason.
     */
    reason_id?: string;
    /**
     * The item's metadata, can hold custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  }>;
};

/**
 * The return's details.
 */
export type AdminPostReturnsReturnReqSchema = {
  /**
   * The ID of the location to return items to.
   */
  location_id?: string;
  /**
   * Whether the customer should receive notifications about updates to the return.
   */
  no_notification?: boolean;
  /**
   * The return's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The shipping method's details.
 */
export type AdminPostReturnsShippingActionReqSchema = {
  /**
   * Set a custom price for the shipping method.
   */
  custom_amount?: number;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The return's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The shipping method's details.
 */
export type AdminPostReturnsShippingReqSchema = {
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * Set the price of the shipping method.
   */
  custom_amount?: number;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * A note viewed only by admin users.
   */
  internal_note?: string;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The price's details.
 */
export type AdminPrice = {
  /**
   * The price's ID.
   */
  id: string;
  /**
   * The price's title.
   */
  title: string;
  /**
   * The price's currency code.
   */
  currency_code: string;
  /**
   * The price's amount.
   */
  amount: number;
  /**
   * The price's raw amount.
   */
  raw_amount: {
    [key: string]: unknown;
  };
  /**
   * The minimum quantity that must be available in the cart for the price to be applied.
   */
  min_quantity: number;
  /**
   * The maximum quantity allowed to be available in the cart for the price to be applied.
   */
  max_quantity: number;
  /**
   * The ID of the associated price set.
   */
  price_set_id: string;
  /**
   * The date the price was created.
   */
  created_at: string;
  /**
   * The date the price was updated.
   */
  updated_at: string;
  /**
   * The date the price was deleted.
   */
  deleted_at: string;
};

/**
 * The price list's details.
 */
export type AdminPriceList = {
  /**
   * The price list's ID.
   */
  id: string;
  /**
   * The price list's title.
   */
  title: string;
  /**
   * The price list's description.
   */
  description: string;
  /**
   * The price list's rules.
   */
  rules: {
    [key: string]: unknown;
  };
  /**
   * The date the price list starts.
   */
  starts_at: string;
  /**
   * The date the price list ends.
   */
  ends_at: string;
  /**
   * The price list's status.
   */
  status: "draft" | "active";
  /**
   * The price list's type.
   */
  type: "sale" | "override";
  /**
   * The price list's prices.
   */
  prices: Array<AdminPriceListPrice>;
  /**
   * The date the price list was created.
   */
  created_at: string;
  /**
   * The date the price list was updated.
   */
  updated_at: string;
  /**
   * The date the price list was deleted.
   */
  deleted_at: string;
};

/**
 * The details of the created, updated, and deleted prices in a price list.
 */
export type AdminPriceListBatchResponse = {
  /**
   * The created prices.
   */
  created: Array<AdminPrice>;
  /**
   * The updated prices.
   */
  updated: Array<AdminPrice>;
  /**
   * The details of the deleted prices.
   */
  deleted: {
    /**
     * The IDs of the deleted prices.
     */
    ids: Array<string>;
    /**
     * The name of the deleted object.
     */
    object: string;
    /**
     * Whether the prices were deleted.
     */
    deleted: boolean;
  };
};

/**
 * The details of the deleted price list.
 */
export type AdminPriceListDeleteResponse = {
  /**
   * The price list's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the price list was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of price lists.
 */
export type AdminPriceListListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of price lists.
   */
  price_lists: Array<AdminPriceList>;
};

/**
 * The details of a price list's price.
 */
export type AdminPriceListPrice = {
  /**
   * The ID of the product variant this price list is for.
   */
  variant_id: string;
  /**
   * The price's rules.
   */
  rules: {
    [key: string]: unknown;
  };
  /**
   * The price's ID.
   */
  id: string;
  /**
   * The price's title.
   */
  title: string;
  /**
   * The price's currency code.
   */
  currency_code: string;
  /**
   * The price's amount.
   */
  amount: number;
  /**
   * The price's raw amount.
   */
  raw_amount: {
    [key: string]: unknown;
  };
  /**
   * The minimum quantity that must be available in the cart for the price to be applied.
   */
  min_quantity: number;
  /**
   * The maximum quantity allowed to be available in the cart for the price to be applied.
   */
  max_quantity: number;
  /**
   * The ID of the price set this price belongs to.
   */
  price_set_id: string;
  /**
   * The date the price was created.
   */
  created_at: string;
  /**
   * The date the price was updated.
   */
  updated_at: string;
  /**
   * The date the price was deleted.
   */
  deleted_at: string;
};

/**
 * The price list's details.
 */
export type AdminPriceListResponse = {
  price_list: AdminPriceList;
};

/**
 * The price preference's details.
 */
export type AdminPricePreference = {
  /**
   * The price preference's ID.
   */
  id: string;
  /**
   * The price preference's attribute.
   */
  attribute: string;
  /**
   * The price preference's value.
   */
  value: string;
  /**
   * Whether prices matching this preference include taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The date the price preference was created.
   */
  created_at: string;
  /**
   * The date the price preference was updated.
   */
  updated_at: string;
  /**
   * The date the price preference was deleted.
   */
  deleted_at: string;
};

/**
 * The details of the deleted price preference.
 */
export type AdminPricePreferenceDeleteResponse = {
  /**
   * The price preference's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the price preference was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of price preferences.
 */
export type AdminPricePreferenceListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total count of items.
   */
  count: number;
  /**
   * The list of price preferences.
   */
  price_preferences: Array<AdminPricePreference>;
};

/**
 * The price preference's details.
 */
export type AdminPricePreferenceResponse = {
  price_preference: AdminPricePreference;
};

/**
 * The product's details.
 */
export type AdminProduct = {
  collection?: AdminCollection;
  /**
   * The product's categories.
   */
  categories?: Array<AdminProductCategory>;
  /**
   * The sales channels that the product is available in.
   */
  sales_channels?: Array<AdminSalesChannel>;
  /**
   * The product's variants.
   */
  variants: Array<AdminProductVariant>;
  type: AdminProductType;
  /**
   * The product's tags.
   */
  tags?: Array<AdminProductTag>;
  /**
   * The product's length.
   */
  length: number;
  /**
   * The product's title.
   */
  title: string;
  /**
   * The product's status.
   */
  status: "draft" | "proposed" | "published" | "rejected";
  /**
   * The product's options.
   */
  options: Array<AdminProductOption>;
  /**
   * The product's description.
   */
  description: string;
  /**
   * The product's ID.
   */
  id: string;
  /**
   * The product's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the product was created.
   */
  created_at: string;
  /**
   * The date the product was updated.
   */
  updated_at: string;
  /**
   * The product's unique handle.
   */
  handle: string;
  /**
   * The product's subtitle.
   */
  subtitle: string;
  /**
   * Whether the product is a gift card.
   */
  is_giftcard: boolean;
  /**
   * The product's thumbnail.
   */
  thumbnail: string;
  /**
   * The product's width.
   */
  width: number;
  /**
   * The product's weight.
   */
  weight: number;
  /**
   * The product's height.
   */
  height: number;
  /**
   * The product's origin country.
   */
  origin_country: string;
  /**
   * The product's HS code.
   */
  hs_code: string;
  /**
   * The product's MID code.
   */
  mid_code: string;
  /**
   * The product's material.
   */
  material: string;
  /**
   * The ID of the collection that the product belongs to.
   */
  collection_id: string;
  /**
   * The ID of the product's type.
   */
  type_id: string;
  /**
   * The product's images.
   */
  images: Array<AdminProductImage>;
  /**
   * Whether discounts can be applied on the product.
   */
  discountable: boolean;
  /**
   * The ID of a product in an external system, such as an ERP or CMS.
   */
  external_id: string;
  /**
   * The date the product was deleted.
   */
  deleted_at: string;
};

/**
 * The product category's details.
 */
export type AdminProductCategory = {
  /**
   * The category's children.
   */
  category_children: Array<{
    [key: string]: unknown;
  }>;
  parent_category: {
    [key: string]: unknown;
  };
  /**
   * The category's products.
   */
  products?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The category's name.
   */
  name: string;
  /**
   * The category's description.
   */
  description: string;
  /**
   * The category's ID.
   */
  id: string;
  /**
   * The category's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the category was created.
   */
  created_at: string;
  /**
   * The date the category was updated.
   */
  updated_at: string;
  /**
   * The category's unique handle.
   */
  handle: string;
  /**
   * The date the category was deleted.
   */
  deleted_at: string;
  /**
   * Whether the category is active. If disabled, the category isn't shown in the storefront.
   */
  is_active: boolean;
  /**
   * Whether the category is internal. If enabled, the category is only seen by admin users.
   */
  is_internal: boolean;
  /**
   * The category's rank among sibling categories.
   */
  rank: number;
  /**
   * The ID of the category's parent.
   */
  parent_category_id: string;
};

/**
 * The details of deleting the category.
 */
export type AdminProductCategoryDeleteResponse = {
  /**
   * The product category's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product category was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of product categories.
 */
export type AdminProductCategoryListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of product categories.
   */
  product_categories: Array<AdminProductCategory>;
};

/**
 * The product category's details.
 */
export type AdminProductCategoryResponse = {
  product_category: AdminProductCategory;
};

/**
 * The details of the product deletion.
 */
export type AdminProductDeleteResponse = {
  /**
   * The product's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product was deleted.
   */
  deleted: boolean;
};

/**
 * The image's details.
 */
export type AdminProductImage = {
  /**
   * The image's ID.
   */
  id: string;
  /**
   * The image's URL.
   */
  url: string;
  /**
   * The date the image was created.
   */
  created_at?: string;
  /**
   * The date the image was updated.
   */
  updated_at?: string;
  /**
   * The date the image was deleted.
   */
  deleted_at?: string;
  /**
   * The image's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product option's details.
 */
export type AdminProductOption = {
  /**
   * The product option's ID.
   */
  id: string;
  /**
   * The product option's title.
   */
  title: string;
  product?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product this option belongs to.
   */
  product_id?: string;
  /**
   * The product option's values.
   */
  values?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The product option's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the product option was created.
   */
  created_at?: string;
  /**
   * The date the product option was updated.
   */
  updated_at?: string;
  /**
   * The date the product option was deleted.
   */
  deleted_at?: string;
};

/**
 * The details of the product option deletion.
 */
export type AdminProductOptionDeleteResponse = {
  /**
   * The product option's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product option was deleted.
   */
  deleted: boolean;
  parent?: AdminProduct;
};

/**
 * The product option's details.
 */
export type AdminProductOptionResponse = {
  product_option: AdminProductOption;
};

/**
 * The product option value's details.
 */
export type AdminProductOptionValue = {
  /**
   * The value's ID.
   */
  id: string;
  /**
   * The value.
   */
  value: string;
  option?: AdminProductOption;
  /**
   * The ID of the option this value belongs to.
   */
  option_id?: string;
  /**
   * The value's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the value was created.
   */
  created_at?: string;
  /**
   * The date the value was updated.
   */
  updated_at?: string;
  /**
   * The date the value was deleted.
   */
  deleted_at?: string;
};

/**
 * The product's details.
 */
export type AdminProductResponse = {
  product: AdminProduct;
};

/**
 * The product tag's details.
 */
export type AdminProductTag = {
  /**
   * The tag's ID.
   */
  id: string;
  /**
   * The tag's value.
   */
  value: string;
  /**
   * The date the tag was created.
   */
  created_at: string;
  /**
   * The date the tag was updated.
   */
  updated_at: string;
  /**
   * The date the tag was deleted.
   */
  deleted_at?: string;
  /**
   * The tag's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the product tag deletion.
 */
export type AdminProductTagDeleteResponse = {
  /**
   * The product tag's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product tag was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of product tags.
 */
export type AdminProductTagListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of product tags.
   */
  product_tags: Array<AdminProductTag>;
};

/**
 * The product tag's details.
 */
export type AdminProductTagResponse = {
  product_tag: AdminProductTag;
};

/**
 * The product type's details.
 */
export type AdminProductType = {
  /**
   * The type's ID.
   */
  id: string;
  /**
   * The type's value.
   */
  value: string;
  /**
   * The date the type was created.
   */
  created_at: string;
  /**
   * The date the type was updated.
   */
  updated_at: string;
  /**
   * The date the type was deleted.
   */
  deleted_at?: string;
  /**
   * The type's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the product type deletion.
 */
export type AdminProductTypeDeleteResponse = {
  /**
   * The product type's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product type was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of product types.
 */
export type AdminProductTypeListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of product types.
   */
  product_types: Array<AdminProductType>;
};

/**
 * The product type's details.
 */
export type AdminProductTypeResponse = {
  product_type: AdminProductType;
};

/**
 * The product variant's details.
 */
export type AdminProductVariant = {
  /**
   * The variant's prices.
   */
  prices: Array<AdminPrice>;
  /**
   * The variant's ID.
   */
  id: string;
  /**
   * The variant's title.
   */
  title: string;
  /**
   * The variant's SKU.
   */
  sku: string;
  /**
   * The variant's barcode.
   */
  barcode: string;
  /**
   * The variant's EAN code.
   */
  ean: string;
  /**
   * The variant's UPC.
   */
  upc: string;
  /**
   * Whether the variant can be ordered even if it's out of stock.
   */
  allow_backorder: boolean;
  /**
   * Whether the Medusa application manages the variant's inventory quantity and availablility. If disabled, the variant is always considered in stock.
   */
  manage_inventory: boolean;
  /**
   * The variant's inventory quantity. This is only included if you pass in the `fields` query parameter a `+variants.inventory_quantity` parameter.
   */
  inventory_quantity?: number;
  /**
   * The variant's HS code.
   */
  hs_code: string;
  /**
   * The variant's origin country.
   */
  origin_country: string;
  /**
   * The variant's MID code.
   */
  mid_code: string;
  /**
   * The variant's material.
   */
  material: string;
  /**
   * The variant's weight.
   */
  weight: number;
  /**
   * The variant's length.
   */
  length: number;
  /**
   * The variant's height.
   */
  height: number;
  /**
   * The variant's width.
   */
  width: number;
  /**
   * The variant's rank among its sibling variants.
   */
  variant_rank?: number;
  /**
   * The variant's option values.
   */
  options: Array<AdminProductOptionValue>;
  product?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product that the variant belongs to.
   */
  product_id?: string;
  calculated_price?: BaseCalculatedPriceSet;
  /**
   * The date the variant was created.
   */
  created_at: string;
  /**
   * The date the variant was updated.
   */
  updated_at: string;
  /**
   * The date the variant was deleted.
   */
  deleted_at: string;
  /**
   * The variant's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the product variant's deletion.
 */
export type AdminProductVariantDeleteResponse = {
  /**
   * The product variant's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the product variant was deleted.
   */
  deleted: boolean;
  parent?: AdminProduct;
};

/**
 * The created, updated, and deleted associations between variants and inventory items.
 */
export type AdminProductVariantInventoryBatchResponse = {
  created:
    | AdminProductVariantInventoryLink
    | Array<{
        /**
         * The product variant's details.
         */
        productService: {
          /**
           * The ID of the product variant.
           */
          variant_id: string;
        };
        /**
         * The inventory item's details.
         */
        inventoryService: {
          /**
           * The ID of the inventory item.
           */
          inventory_item_id: string;
        };
      }>;
  updated:
    | AdminProductVariantInventoryLink
    | Array<{
        /**
         * The product variant's details.
         */
        productService: {
          /**
           * The ID of the product variant.
           */
          variant_id: string;
        };
        /**
         * The inventory item's details.
         */
        inventoryService: {
          /**
           * The ID of the inventory item.
           */
          inventory_item_id: string;
        };
      }>;
  deleted:
    | AdminProductVariantInventoryLink
    | Array<{
        /**
         * The product variant's details.
         */
        productService: {
          /**
           * The ID of the product variant.
           */
          variant_id: string;
        };
        /**
         * The inventory item's details.
         */
        inventoryService: {
          /**
           * The ID of the inventory item.
           */
          inventory_item_id: string;
        };
      }>;
};

/**
 * The details of an association between a product variant and an inventory item.
 */
export type AdminProductVariantInventoryLink = {
  /**
   * The product variant's details.
   */
  Product: {
    /**
     * The ID of the product variant.
     */
    variant_id: string;
  };
  /**
   * The inventory item's details.
   */
  Inventory: {
    /**
     * The ID of the inventory item.
     */
    inventory_item_id: string;
  };
};

/**
 * The details of the deleted associated between a product variant and an inventory item.
 */
export type AdminProductVariantInventoryLinkDeleteResponse = {
  id: AdminProductVariantInventoryLink;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the association was deleted.
   */
  deleted: boolean;
  parent: AdminProductVariant;
};

/**
 * The product variant's details.
 */
export type AdminProductVariantResponse = {
  variant: AdminProductVariant;
};

/**
 * The promotion's details.
 */
export type AdminPromotion = {
  application_method?: {
    [key: string]: unknown;
  };
  /**
   * The promotion's rules.
   */
  rules?: Array<AdminPromotionRule>;
  /**
   * The promotion's ID.
   */
  id: string;
  /**
   * The promotion's code.
   */
  code?: string;
  /**
   * The promotion's type.
   */
  type?: "standard" | "buyget";
  /**
   * Whether the promotion is applied on a cart automatically if it matches the promotion's rules.
   */
  is_automatic?: boolean;
  /**
   * The ID of the campaign this promotion belongs to.
   */
  campaign_id?: string;
  campaign?: AdminCampaign;
  /**
   * The date the promotion was created.
   */
  created_at: string;
  /**
   * The date the promotion was updated.
   */
  updated_at: string;
  /**
   * The date the promotion was deleted.
   */
  deleted_at: string;
};

/**
 * The promotion's type.
 */
export type type7 = "standard" | "buyget";

/**
 * The promotion's details.
 */
export type AdminPromotionResponse = {
  promotion: AdminPromotion;
};

/**
 * The promotion rule's details.
 */
export type AdminPromotionRule = {
  /**
   * The promotion rule's ID.
   */
  id: string;
  /**
   * The promotion rule's description.
   */
  description?: string;
  /**
   * The promotion rule's attribute.
   */
  attribute?: string;
  /**
   * The rule's operator.
   */
  operator?: "gt" | "lt" | "eq" | "ne" | "in" | "lte" | "gte";
  /**
   * The rule's values.
   */
  values: Array<BasePromotionRuleValue>;
};

/**
 * The refund's details.
 */
export type AdminRefund = {
  /**
   * The refund's ID.
   */
  id: string;
  /**
   * The refund's amount.
   */
  amount: number;
  /**
   * The ID of the refund reason.
   */
  refund_reason_id?: string;
  /**
   * More details about the refund.
   */
  note?: string;
  /**
   * The date the refund was created.
   */
  created_at: string;
  /**
   * The ID of the user that created the refund.
   */
  created_by?: string;
  payment: BasePayment;
  refund_reason?: RefundReason;
};

/**
 * The refund reason's details.
 */
export type AdminRefundReason = {
  /**
   * The refund reason's ID.
   */
  id: string;
  /**
   * The refund reason's label.
   */
  label: string;
  /**
   * The refund reason's description.
   */
  description?: string;
  /**
   * The refund reason's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the refund reason was created.
   */
  created_at: string;
  /**
   * The date the refund reason was updated.
   */
  updated_at: string;
};

/**
 * The region's details.
 */
export type AdminRegion = {
  /**
   * The region's ID.
   */
  id: string;
  /**
   * The region's name.
   */
  name: string;
  /**
   * The region's currency code.
   */
  currency_code: string;
  /**
   * Whether taxes are applied automatically during checkout.
   */
  automatic_taxes?: boolean;
  /**
   * The region's countries.
   */
  countries?: Array<AdminRegionCountry>;
  /**
   * The region's payment providers.
   */
  payment_providers?: Array<AdminPaymentProvider>;
  /**
   * The region's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the region was created.
   */
  created_at?: string;
  /**
   * The date the region was updated.
   */
  updated_at?: string;
};

/**
 * The country's details.
 */
export type AdminRegionCountry = {
  /**
   * The country's ID.
   */
  id: string;
  /**
   * The country's iso 2.
   */
  iso_2?: string;
  /**
   * The country's iso 3.
   */
  iso_3?: string;
  /**
   * The country's num code.
   */
  num_code?: string;
  /**
   * The country's name.
   */
  name?: string;
  /**
   * The country's display name.
   */
  display_name?: string;
};

/**
 * The region's details.
 */
export type AdminRegionResponse = {
  region: AdminRegion;
};

/**
 * The reservation's details.
 */
export type AdminReservation = {
  /**
   * The reservation's ID.
   */
  id: string;
  /**
   * The ID of the line item this reservation is for.
   */
  line_item_id: string;
  /**
   * The ID of the location the quantity is reserved from.
   */
  location_id: string;
  /**
   * The reservation's quantity.
   */
  quantity: number;
  /**
   * An ID in an external system
   */
  external_id: string;
  /**
   * The reservation's description.
   */
  description: string;
  /**
   * The ID of the inventory item this reservation is associated with.
   */
  inventory_item_id: string;
  inventory_item?: AdminInventoryItem;
  /**
   * The reservation's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the user that created this reservation.
   */
  created_by?: string;
  /**
   * The date this reservation was deleted.
   */
  deleted_at?: string;
  /**
   * The date this reservation was created.
   */
  created_at?: string;
  /**
   * The date this reservation was updated.
   */
  updated_at?: string;
};

/**
 * The reservation's details.
 */
export type AdminReservationResponse = {
  reservation: AdminReservation;
};

/**
 * The return's details.
 */
export type AdminReturn = {
  /**
   * The return's ID.
   */
  id: string;
  /**
   * The return's status.
   */
  status?: "canceled" | "requested" | "received" | "partially_received";
  /**
   * The amount refunded by this return.
   */
  refund_amount?: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The return's items.
   */
  items: Array<AdminReturnItem>;
  /**
   * The date the return was created.
   */
  created_at: string;
  /**
   * The date the return was canceled.
   */
  canceled_at: string;
  /**
   * The return's exchange id.
   */
  exchange_id?: string;
  /**
   * The return's location id.
   */
  location_id?: string;
  /**
   * The return's claim id.
   */
  claim_id?: string;
  /**
   * The return's order version.
   */
  order_version: number;
  /**
   * The return's display id.
   */
  display_id: number;
  /**
   * Whether the customer should receive notifications about the return's updates.
   */
  no_notification?: boolean;
  /**
   * The date the return was received.
   */
  received_at: string;
};

/**
 * The return's status.
 */
export type status6 =
  | "canceled"
  | "requested"
  | "received"
  | "partially_received";

/**
 * The return item's details.
 */
export type AdminReturnItem = {
  /**
   * The return item's ID.
   */
  id: string;
  /**
   * The return item's quantity.
   */
  quantity: number;
  /**
   * The received quantity of the item. This quantity is added to the stocked inventory quantity of the item.
   */
  received_quantity: number;
  /**
   * The received damaged quantity of the item, which isn't added to the stocked inventory quantity of the item.
   */
  damaged_quantity: number;
  /**
   * The ID of the return reason associated with the item.
   */
  reason_id?: string;
  /**
   * A note about why the item was returned.
   */
  note?: string;
  /**
   * The ID of the associated order item.
   */
  item_id: string;
  /**
   * The ID of the return this return item belongs to.
   */
  return_id: string;
  /**
   * The return item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of a return and a preview of the order once the return is applied.
 */
export type AdminReturnPreviewResponse = {
  order_preview: AdminOrderPreview;
  return: AdminReturn;
};

/**
 * The return reason's details.
 */
export type AdminReturnReason = {
  /**
   * The return reason's ID.
   */
  id: string;
  /**
   * The return reason's value.
   */
  value: string;
  /**
   * The return reason's label.
   */
  label: string;
  /**
   * The return reason's description.
   */
  description?: string;
  /**
   * The return reason's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the return reason was created.
   */
  created_at: string;
  /**
   * The date the return reason was updated.
   */
  updated_at: string;
};

/**
 * The details of the return reason deletion.
 */
export type AdminReturnReasonDeleteResponse = {
  /**
   * The return reason's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the return reason was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of return reasons.
 */
export type AdminReturnReasonListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of return reasons.
   */
  return_reasons: Array<AdminReturnReason>;
};

/**
 * The return reason's details.
 */
export type AdminReturnReasonResponse = {
  return_reason: AdminReturnReason;
};

/**
 * The return's details.
 */
export type AdminReturnResponse = {
  return: AdminReturn;
};

/**
 * The details of revoking the API key.
 */
export type AdminRevokeApiKey = {
  /**
   * The time in seconds to revoke the API key after. If not set, the API key is revoked immediately.
   */
  revoke_in?: number;
};

/**
 * The details of a potential rule attribute.
 */
export type AdminRuleAttributeOption = {
  /**
   * The rule attribute's ID, which is a rule's `attribute` it refers to.
   */
  id: string;
  /**
   * The rule attribute's value.
   */
  value: string;
  /**
   * The rule attribute option's label.
   */
  label: string;
  /**
   * The attribute's operators.
   */
  operators: Array<BaseRuleOperatorOptions>;
};

/**
 * The details of a potential rule value.
 */
export type AdminRuleValueOption = {
  /**
   * The rule value's value.
   */
  value: string;
  /**
   * The rule value's label.
   */
  label: string;
};

/**
 * The sales channel's details.
 */
export type AdminSalesChannel = {
  /**
   * The sales channel's ID.
   */
  id: string;
  /**
   * The sales channel's name.
   */
  name: string;
  /**
   * The sales channel's description.
   */
  description: string;
  /**
   * Whether the sales channel is disabled.
   */
  is_disabled: boolean;
  /**
   * The sales channel's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the sales channel was created.
   */
  created_at: string;
  /**
   * The date the sales channel was updated.
   */
  updated_at: string;
  /**
   * The date the sales channel was deleted.
   */
  deleted_at: string;
};

/**
 * The details of deleting a sales channel.
 */
export type AdminSalesChannelDeleteResponse = {
  /**
   * The sales channel's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the sales channel was deleted.
   */
  deleted: boolean;
};

/**
 * The sales channel's details.
 */
export type AdminSalesChannelResponse = {
  sales_channel: AdminSalesChannel;
};

/**
 * The shipping option's service zone.
 */
export type AdminServiceZone = {
  /**
   * The service zone's ID.
   */
  id: string;
  /**
   * The service zone's name.
   */
  name: string;
  /**
   * The service zone's fulfillment set id.
   */
  fulfillment_set_id: string;
  fulfillment_set: {
    [key: string]: unknown;
  };
  /**
   * The service zone's geo zones.
   */
  geo_zones: Array<AdminGeoZone>;
  /**
   * The service zone's shipping options.
   */
  shipping_options: Array<AdminShippingOption>;
  /**
   * The service zone's created at.
   */
  created_at: string;
  /**
   * The service zone's updated at.
   */
  updated_at: string;
  /**
   * The service zone's deleted at.
   */
  deleted_at: string;
};

/**
 * The details of the service zone deletion.
 */
export type AdminServiceZoneDeleteResponse = {
  /**
   * The service zone's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the service zone was deleted.
   */
  deleted: boolean;
  parent?: AdminFulfillmentSet;
};

/**
 * The service zone's details.
 */
export type AdminServiceZoneResponse = {
  service_zone: AdminServiceZone;
};

/**
 * The shipping option's details.
 */
export type AdminShippingOption = {
  /**
   * The shipping option's ID.
   */
  id: string;
  /**
   * The shipping option's name.
   */
  name: string;
  /**
   * The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider.
   */
  price_type: "calculated" | "flat";
  /**
   * The ID of the service zone this option belongs to.
   */
  service_zone_id: string;
  service_zone: {
    [key: string]: unknown;
  };
  /**
   * The ID of the provider handling fulfillments created from this shipping option.
   */
  provider_id: string;
  provider: AdminFulfillmentProvider;
  /**
   * The ID of the associated shipping option type.
   */
  shipping_option_type_id: string;
  type: AdminShippingOptionType;
  /**
   * The ID of the associated shipping profile.
   */
  shipping_profile_id: string;
  shipping_profile: AdminShippingProfile;
  /**
   * The shipping option's rules.
   */
  rules: Array<AdminShippingOptionRule>;
  /**
   * The shipping option's prices. If the `price_type` is `calculated`, this array will be empty since the price is calculated by the fulfillment provider during checkout.
   */
  prices: Array<AdminShippingOptionPrice>;
  /**
   * The shipping option's data, useful for the fulfillment provider handling fulfillments created from this option.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The shipping option's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the shipping option was created.
   */
  created_at: string;
  /**
   * The date the shipping option was updated.
   */
  updated_at: string;
  /**
   * The date the shipping option was deleted.
   */
  deleted_at: string;
};

/**
 * The details of the shipping option's deletion.
 */
export type AdminShippingOptionDeleteResponse = {
  /**
   * The shipping option's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the shipping option was deleted.
   */
  deleted: boolean;
};

/**
 * The details of the shipping option's price.
 */
export type AdminShippingOptionPrice = {
  /**
   * The price's rules.
   */
  price_rules: Array<AdminShippingOptionPriceRule>;
  /**
   * The number of rules the price has.
   */
  rules_count: number;
  /**
   * The price's ID.
   */
  id: string;
  /**
   * The price's title.
   */
  title: string;
  /**
   * The price's currency code.
   */
  currency_code: string;
  /**
   * The price's amount.
   */
  amount: number;
  /**
   * The price's raw amount.
   */
  raw_amount: {
    [key: string]: unknown;
  };
  /**
   * The minimum quantity required in the cart for this price to apply.
   */
  min_quantity: number;
  /**
   * The maximum quantity that the cart's items must not surpass for this price to apply.
   */
  max_quantity: number;
  /**
   * The ID of the price set this price belongs to.
   */
  price_set_id: string;
  /**
   * The date the price was created.
   */
  created_at: string;
  /**
   * The date the price was updated.
   */
  updated_at: string;
  /**
   * The date the price was deleted.
   */
  deleted_at: string;
};

/**
 * The details of a shipping option price's rule.
 */
export type AdminShippingOptionPriceRule = {
  /**
   * The price rule's ID.
   */
  id: string;
  /**
   * The price rule's value.
   */
  value: string;
};

/**
 * The shipping option's details.
 */
export type AdminShippingOptionResponse = {
  shipping_option: AdminShippingOption;
};

/**
 * The shipping option rule's details.
 */
export type AdminShippingOptionRule = {
  /**
   * The shipping option rule's ID.
   */
  id: string;
  /**
   * The shipping option rule's attribute.
   */
  attribute: string;
  /**
   * The shipping option rule's operator.
   */
  operator: string;
  value: string | Array<string>;
  /**
   * The ID of the shipping option this rule is for.
   */
  shipping_option_id: string;
  /**
   * The date the shipping option rule was created.
   */
  created_at: string;
  /**
   * The date the shipping option rule was updated.
   */
  updated_at: string;
  /**
   * The date the shipping option rule was deleted.
   */
  deleted_at: string;
};

/**
 * The shipping option's details.
 */
export type AdminShippingOptionType = {
  /**
   * The shipping option's ID.
   */
  id: string;
  /**
   * The date the shipping option was created.
   */
  created_at: string;
  /**
   * The date the shipping option was updated.
   */
  updated_at: string;
  /**
   * The date the shipping option was deleted.
   */
  deleted_at: string;
  /**
   * The type's label.
   */
  label: string;
  /**
   * The type's description.
   */
  description: string;
  /**
   * The type's code.
   */
  code: string;
  /**
   * The type's shipping option id.
   */
  shipping_option_id: string;
};

/**
 * The shipping profile's details..
 */
export type AdminShippingProfile = {
  /**
   * The shipping profile's ID.
   */
  id: string;
  /**
   * The shipping profile's name.
   */
  name: string;
  /**
   * The shipping profile's type.
   */
  type: string;
  /**
   * The shipping profile's metadata, holds custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the shipping profile was created.
   */
  created_at: string;
  /**
   * The date the shipping profile was updated.
   */
  updated_at: string;
  /**
   * The date the shipping profile was deleted.
   */
  deleted_at: string;
};

/**
 * The details of the shipping profile's deletion.
 */
export type AdminShippingProfileDeleteResponse = {
  /**
   * The shipping profile's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the shipping profile was deleted.
   */
  deleted: boolean;
};

/**
 * The shipping profile's details.
 */
export type AdminShippingProfileResponse = {
  shipping_profile: AdminShippingProfile;
};

/**
 * The stock location's details.
 */
export type AdminStockLocation = {
  /**
   * The location's ID.
   */
  id: string;
  /**
   * The location's name.
   */
  name: string;
  /**
   * The ID of the associated address.
   */
  address_id: string;
  address?: AdminStockLocationAddress;
  /**
   * The sales channels associated with the location.
   */
  sales_channels?: Array<AdminSalesChannel>;
  /**
   * The fulfillment providers associated with the location.
   */
  fulfillment_providers?: Array<AdminFulfillmentProvider>;
  /**
   * The fulfillment sets associated with the location.
   */
  fulfillment_sets?: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * The details of the stock location address.
 */
export type AdminStockLocationAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The address's first line.
   */
  address_1: string;
  /**
   * The address's second line.
   */
  address_2: string;
  /**
   * The address's company.
   */
  company: string;
  /**
   * The address's country code.
   */
  country_code: string;
  /**
   * The address's city.
   */
  city: string;
  /**
   * The address's phone.
   */
  phone: string;
  /**
   * The address's postal code.
   */
  postal_code: string;
  /**
   * The address's province.
   */
  province: string;
};

/**
 * The details of the stock location's deletion.
 */
export type AdminStockLocationDeleteResponse = {
  /**
   * The stock location's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the stock location was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of stock locations.
 */
export type AdminStockLocationListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of stock locations.
   */
  stock_locations: Array<AdminStockLocation>;
};

/**
 * The stock location's details.
 */
export type AdminStockLocationResponse = {
  stock_location: AdminStockLocation;
};

/**
 * The store's details.
 */
export type AdminStore = {
  /**
   * The store's ID.
   */
  id: string;
  /**
   * The store's name.
   */
  name: string;
  /**
   * The store's supported currencies.
   */
  supported_currencies: Array<AdminStoreCurrency>;
  /**
   * The ID of the sales channel used by default in the store.
   */
  default_sales_channel_id: string;
  /**
   * The ID of the region used by default in the store.
   */
  default_region_id: string;
  /**
   * The ID of the stock location used by default in the store.
   */
  default_location_id: string;
  /**
   * The store's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the store was created.
   */
  created_at: string;
  /**
   * The date the store was updated.
   */
  updated_at: string;
};

/**
 * The details of a store's currency.
 */
export type AdminStoreCurrency = {
  /**
   * The currency's ID.
   */
  id: string;
  /**
   * The currency's code.
   */
  currency_code: string;
  /**
   * The ID of the store this currency belongs to.
   */
  store_id: string;
  /**
   * Whether this currency is the default in the store.
   */
  is_default: boolean;
  currency: AdminCurrency;
  /**
   * The date the currency was created.
   */
  created_at: string;
  /**
   * The date the currency was updated.
   */
  updated_at: string;
  /**
   * The date the currency was deleted.
   */
  deleted_at: string;
};

/**
 * The paginated list of stores.
 */
export type AdminStoreListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of stores.
   */
  stores: Array<AdminStore>;
};

/**
 * The store's details.
 */
export type AdminStoreResponse = {
  store: AdminStore;
};

/**
 * The tax rate's details.
 */
export type AdminTaxRate = {
  /**
   * The tax rate's ID.
   */
  id: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The code the tax rate is identified by.
   */
  code: string;
  /**
   * The tax rate's name.
   */
  name: string;
  /**
   * The tax rate's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The ID of the tax region this rate belongs to.
   */
  tax_region_id: string;
  /**
   * Whether the tax rate should be combined with parent rates.
   */
  is_combinable: boolean;
  /**
   * Whether this tax rate is the default in the tax region.
   */
  is_default: boolean;
  /**
   * The date the tax rate was created.
   */
  created_at: string;
  /**
   * The date the tax rate was updated.
   */
  updated_at: string;
  /**
   * The date the tax rate was deleted.
   */
  deleted_at: string;
  /**
   * The ID of the user that created the tax rate.
   */
  created_by: string;
  tax_region: AdminTaxRegion;
  /**
   * The tax rate's rules.
   */
  rules: Array<AdminTaxRateRule>;
};

/**
 * The details of the tax rate deletion.
 */
export type AdminTaxRateDeleteResponse = {
  /**
   * The tax rate's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the tax rate was deleted.
   */
  deleted: boolean;
};

/**
 * The tax rate's details.
 */
export type AdminTaxRateResponse = {
  tax_rate: AdminTaxRate;
};

/**
 * The tax rate rule's details.
 */
export type AdminTaxRateRule = {
  /**
   * The name of the table this rule references.
   */
  reference: string;
  /**
   * The ID of a record in the table that this rule references.
   */
  reference_id: string;
};

/**
 * The tax region's details.
 */
export type AdminTaxRegion = {
  /**
   * The tax region's ID.
   */
  id: string;
  /**
   * The tax region's country code.
   */
  country_code: string;
  /**
   * The tax region's province code.
   */
  province_code: string;
  /**
   * The tax region's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The ID of the parent tax region.
   */
  parent_id: string;
  /**
   * The date the tax region was created.
   */
  created_at: string;
  /**
   * The date the tax region was updated.
   */
  updated_at: string;
  /**
   * The date the tax region was deleted.
   */
  deleted_at: string;
  /**
   * The ID of the user that created the tax region.
   */
  created_by: string;
  /**
   * The tax region's rates.
   */
  tax_rates: Array<{
    [key: string]: unknown;
  }>;
  parent: {
    [key: string]: unknown;
  };
  /**
   * The tax region's children.
   */
  children: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * The details of the tax region deletion.
 */
export type AdminTaxRegionDeleteResponse = {
  /**
   * The tax region's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the tax region was deleted.
   */
  deleted: boolean;
};

/**
 * The tax region's details.
 */
export type AdminTaxRegionResponse = {
  tax_region: AdminTaxRegion;
};

/**
 * The details to update in an API key.
 */
export type AdminUpdateApiKey = {
  /**
   * The API key's title.
   */
  title: string;
};

/**
 * The details to update in a collection.
 */
export type AdminUpdateCollection = {
  /**
   * The collection's title.
   */
  title?: string;
  /**
   * The collection's handle.
   */
  handle?: string;
  /**
   * The collection's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in a customer group.
 */
export type AdminUpdateCustomerGroup = {
  /**
   * The customer group's name.
   */
  name?: string;
  /**
   * The customer group's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * the details to update in a price list.
 */
export type AdminUpdatePriceList = {
  /**
   * The price list's title.
   */
  title?: string;
  /**
   * The price list's description.
   */
  description?: string;
  /**
   * The date the price list starts.
   */
  starts_at?: string;
  /**
   * The date the price list ends.
   */
  ends_at?: string;
  /**
   * The price list's status.
   */
  status?: "active" | "draft";
  /**
   * The price list's type.
   */
  type?: "sale" | "override";
  /**
   * The price list's rules.
   */
  rules?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in the price preference.
 */
export type AdminUpdatePricePreference = {
  /**
   * The price preference's attribute.
   */
  attribute?: string;
  /**
   * The price preference's value.
   */
  value?: string;
  /**
   * Whether prices are tax inclusive for this price preference.
   */
  is_tax_inclusive?: boolean;
};

/**
 * The product's details.
 */
export type AdminUpdateProduct = {
  /**
   * The product's title.
   */
  title?: string;
  /**
   * The product's subtitle.
   */
  subtitle?: string;
  /**
   * The product's description.
   */
  description?: string;
  /**
   * Whether the product is a gift card.
   */
  is_giftcard?: boolean;
  /**
   * Whether discounts can be applied on the product.
   */
  discountable?: boolean;
  /**
   * The product's images.
   */
  images?: Array<{
    /**
     * The image's URL.
     */
    url: string;
  }>;
  /**
   * The product's thumbnail URL.
   */
  thumbnail?: string;
  /**
   * The product's unique handle.
   */
  handle?: string;
  /**
   * The product's status.
   */
  status?: "draft" | "proposed" | "published" | "rejected";
  /**
   * The ID of the product's type.
   */
  type_id?: string;
  /**
   * The ID of the product's collection.
   */
  collection_id?: string;
  /**
   * The product's categories.
   */
  categories?: Array<{
    /**
     * The category's ID.
     */
    id: string;
  }>;
  /**
   * The product's tags.
   */
  tags?: Array<{
    /**
     * The tag's ID.
     */
    id: string;
  }>;
  /**
   * The product's options.
   */
  options?: Array<AdminUpdateProductOption>;
  /**
   * The product's variants. You can add new variants or update existing ones, passing their IDs in the object.
   */
  variants?: Array<AdminCreateProductVariant | AdminUpdateProductVariant>;
  /**
   * The sales channels that the product is available in.
   */
  sales_channels?: Array<{
    /**
     * The sales channel's ID.
     */
    id: string;
  }>;
  /**
   * The product's weight.
   */
  weight?: number;
  /**
   * The product's length.
   */
  length?: number;
  /**
   * The product's height.
   */
  height?: number;
  /**
   * The product's width.
   */
  width?: number;
  /**
   * The product's HS code.
   */
  hs_code?: string;
  /**
   * The product's MID code.
   */
  mid_code?: string;
  /**
   * The product's origin country.
   */
  origin_country?: string;
  /**
   * The product's material.
   */
  material?: string;
  /**
   * The product's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product in an external or third-party system.
   */
  external_id?: string;
};

/**
 * The details to update in a product option.
 */
export type AdminUpdateProductOption = {
  /**
   * The option's title.
   */
  title?: string;
  /**
   * The option's values.
   */
  values?: Array<string>;
};

/**
 * The properties to update of a product variant.
 */
export type AdminUpdateProductVariant = {
  /**
   * The product variant's title.
   */
  title?: string;
  /**
   * The product variant's SKU.
   */
  sku?: string;
  /**
   * The product variant's EAN.
   */
  ean?: string;
  /**
   * The product variant's UPC.
   */
  upc?: string;
  /**
   * The product variant's barcode.
   */
  barcode?: string;
  /**
   * The product variant's HS code.
   */
  hs_code?: string;
  /**
   * The product variant's MID code.
   */
  mid_code?: string;
  /**
   * Whether customers can order the variant even if it's not in stock.
   */
  allow_backorder?: boolean;
  /**
   * Whether the Medusa application manages the variant's inventory. If disabled, the product variant is always considered in stock.
   */
  manage_inventory?: boolean;
  /**
   * The product variant's rank among its siblings.
   */
  variant_rank?: number;
  /**
   * The product variant's weight.
   */
  weight?: number;
  /**
   * The product variant's length.
   */
  length?: number;
  /**
   * The product variant's height.
   */
  height?: number;
  /**
   * The product variant's width.
   */
  width?: number;
  /**
   * The product variant's origin country.
   */
  origin_country?: string;
  /**
   * The product variant's material.
   */
  material?: string;
  /**
   * The product variant's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The product variant's prices.
   */
  prices?: Array<AdminCreateProductVariantPrice>;
  /**
   * The product variant's options.
   */
  options?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in a buy rule.
 */
export type AdminUpdatePromotionRule = {
  /**
   * The buy rule's ID.
   */
  id: string;
  /**
   * The operator used to check whether the buy rule applies on a cart. For example, `eq` means that the cart's value for the specified attribute must match the specified value.
   */
  operator?: "gte" | "lte" | "gt" | "lt" | "eq" | "ne" | "in";
  /**
   * The buy rule's description.
   */
  description?: string;
  /**
   * The attribute to compare against when checking whether a promotion can be applied on a cart.
   */
  attribute?: string;
  values: string | Array<string>;
};

/**
 * The details to update in a return reason.
 */
export type AdminUpdateReturnReason = {
  /**
   * The return reason's label.
   */
  label: string;
  /**
   * The return reason's value.
   */
  value: string;
  /**
   * The return reason's description.
   */
  description?: string;
  /**
   * The return reason's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in the sales channel.
 */
export type AdminUpdateSalesChannel = {
  /**
   * The sales channel's name.
   */
  name?: string;
  /**
   * The sales channel's description.
   */
  description?: string;
  /**
   * Whether the sales channel is disabled.
   */
  is_disabled?: boolean;
  /**
   * The sales channel's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in the shipping option rule.
 */
export type AdminUpdateShippingOptionRule = {
  /**
   * The rule's ID.
   */
  id: string;
  /**
   * The operator used to check whether a rule applies.
   */
  operator: "in" | "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "nin";
  /**
   * The name of a property or table that the rule applies to.
   */
  attribute: string;
  value: string | Array<string>;
};

/**
 * The properties to update in a stock location.
 */
export type AdminUpdateStockLocation = {
  /**
   * The stock location's name.
   */
  name?: string;
  /**
   * The stock location's address. Pass this property if you're creating a new address to associate with the location.
   */
  address?: {
    /**
     * The address's first line.
     */
    address_1: string;
    /**
     * The address's second line.
     */
    address_2?: string;
    /**
     * The address's company.
     */
    company?: string;
    /**
     * The address's city.
     */
    city?: string;
    /**
     * The address's country code.
     */
    country_code: string;
    /**
     * The address's phone.
     */
    phone?: string;
    /**
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * The address's province.
     */
    province?: string;
  };
  /**
   * The ID of an existing stock location address to associate the stock location with.
   */
  address_id?: string;
  /**
   * The stock location's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in a store.
 */
export type AdminUpdateStore = {
  /**
   * The store's name.
   */
  name?: string;
  /**
   * The store's supported currencies.
   */
  supported_currencies?: Array<{
    /**
     * The currency's code.
     */
    currency_code: string;
    /**
     * Whether the currency is the default in the store.
     */
    is_default?: boolean;
    /**
     * Whether prices using this currency are tax inclusive.
     */
    is_tax_inclusive?: boolean;
  }>;
  /**
   * The ID of the default sales channel in the store.
   */
  default_sales_channel_id?: string;
  /**
   * The ID of the default region in the store.
   */
  default_region_id?: string;
  /**
   * The ID of the default stock location in the store.
   */
  default_location_id?: string;
  /**
   * The store's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in the tax rate.
 */
export type AdminUpdateTaxRate = {
  /**
   * The rate to charge.
   */
  rate?: number;
  /**
   * The code that the tax rate is identified by.
   */
  code?: string;
  /**
   * The tax rate's rules.
   */
  rules?: Array<{
    /**
     * The name of the table this rule references.
     */
    reference: string;
    /**
     * The ID of the record in the table that the rule references.
     */
    reference_id: string;
  }>;
  /**
   * The tax rate's name.
   */
  name?: string;
  /**
   * Whether the tax rate is the default in the store.
   */
  is_default?: boolean;
  /**
   * Whether the tax rate should be combined with parent rates.
   */
  is_combinable?: boolean;
  /**
   * The tax rate's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in a tax region.
 */
export type AdminUpdateTaxRegion = {
  /**
   * The tax region's province code.
   */
  province_code?: string;
  /**
   * The tax region's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update in a user.
 */
export type AdminUpdateUser = {
  /**
   * The user's first name.
   */
  first_name?: string;
  /**
   * The user's last name.
   */
  last_name?: string;
  /**
   * The URL of the user's avatar.
   */
  avatar_url?: string;
  /**
   * The user's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The properties to update of the variant's inventory item association.
 */
export type AdminUpdateVariantInventoryItem = {
  /**
   * The number of units a single quantity is equivalent to. For example, if a customer orders one quantity of the variant, Medusa checks the availability of the quantity multiplied by the value set for `required_quantity`. When the customer orders the quantity, Medusa reserves the ordered quantity multiplied by the value set for `required_quantity`.
   */
  required_quantity: number;
};

/**
 * The details of the stock location address to create.
 */
export type AdminUpsertStockLocationAddress = {
  /**
   * The address's first line.
   */
  address_1: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's country code.
   */
  country_code: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's province.
   */
  province?: string;
};

/**
 * The user's details.
 */
export type AdminUser = {
  /**
   * The user's ID.
   */
  id: string;
  /**
   * The user's email.
   */
  email: string;
  /**
   * The user's first name.
   */
  first_name: string;
  /**
   * The user's last name.
   */
  last_name: string;
  /**
   * The URL of the user's avatar.
   */
  avatar_url: string;
  /**
   * The user's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the user was created.
   */
  created_at: string;
  /**
   * The date the user was updated.
   */
  updated_at: string;
  /**
   * The date the user was deleted.
   */
  deleted_at: string;
};

/**
 * The details of the deleted user.
 */
export type AdminUserDeleteResponse = {
  /**
   * The user's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the user was deleted.
   */
  deleted: boolean;
};

/**
 * The paginated list of users.
 */
export type AdminUserListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of users.
   */
  users: Array<AdminUser>;
};

/**
 * The user's details.
 */
export type AdminUserResponse = {
  user: AdminUser;
};

/**
 * The workflows execution's details.
 */
export type AdminWorkflowExecution = {
  /**
   * The workflow execution's ID.
   */
  id: string;
  /**
   * The ID of the workflow.
   */
  workflow_id: string;
  /**
   * The workflow execution's transaction ID.
   */
  transaction_id: string;
  execution: AdminWorkflowExecutionExecution;
  context: WorkflowExecutionContext;
  /**
   * The workflow execution's state.
   */
  state:
    | "not_started"
    | "invoking"
    | "waiting_to_compensate"
    | "compensating"
    | "done"
    | "reverted"
    | "failed";
  /**
   * The date the workflow execution was created.
   */
  created_at: string;
  /**
   * The date the workflow execution was updated.
   */
  updated_at: string;
  /**
   * The date the workflow execution was deleted.
   */
  deleted_at?: string;
};

/**
 * The workflow execution's state.
 */
export type state =
  | "not_started"
  | "invoking"
  | "waiting_to_compensate"
  | "compensating"
  | "done"
  | "reverted"
  | "failed";

/**
 * The workflow execution's steps details.
 */
export type AdminWorkflowExecutionExecution = {
  /**
   * The execution's steps. Each object key is a step ID, and the value is the object whose properties are shown below.
   */
  steps: {
    [key: string]: {
      /**
       * The step's ID.
       */
      id?: string;
      /**
       * The state of the step's invokation function.
       */
      invoke?: {
        /**
         * The invokation step's state.
         */
        state:
          | "not_started"
          | "invoking"
          | "compensating"
          | "done"
          | "reverted"
          | "failed"
          | "dormant"
          | "skipped"
          | "skipped_failure"
          | "timeout";
        /**
         * The invokation step's state.
         */
        status:
          | "idle"
          | "ok"
          | "waiting_response"
          | "temp_failure"
          | "permanent_failure";
      };
      /**
       * The step's definition details.
       */
      definition?: {
        /**
         * Whether the step is async.
         */
        async?: boolean;
        /**
         * Whether the compensation function of the step is async.
         */
        compensateAsync?: boolean;
        /**
         * Whether the step doesn't have a compensation function.
         */
        noCompensation?: boolean;
        /**
         * Whether the step continues executing even if its status is changed to failed.
         */
        continueOnPermanentFailure?: boolean;
        /**
         * The maximum number of times to retry the step.
         */
        maxRetries?: number;
        /**
         * Whether the workflow shouldn't wait for the step to finish before moving to the next step.
         */
        noWait?: boolean;
        /**
         * The interval in seconds between retry attempts when the step fails.
         */
        retryInterval?: number;
        /**
         * The interval in seconds to retry a step even if its status is `waiting_response`.
         */
        retryIntervalAwaiting?: number;
        /**
         * Whether the step's response is stored.
         */
        saveResponse?: boolean;
        /**
         * The maximum time in seconds to wait for this step to complete. If the step exceeds this time, the step's state is changed to `timeout`, but the step continues executing.
         */
        timeout?: number;
      };
      /**
       * The state of the step's compensation function.
       */
      compensate?: {
        /**
         * The compensation function's state.
         */
        state:
          | "not_started"
          | "invoking"
          | "compensating"
          | "done"
          | "reverted"
          | "failed"
          | "dormant"
          | "skipped"
          | "skipped_failure"
          | "timeout";
        /**
         * The compensation function's status.
         */
        status:
          | "idle"
          | "ok"
          | "waiting_response"
          | "temp_failure"
          | "permanent_failure";
      };
      /**
       * The step's depth in the workflow's execution.
       */
      depth?: number;
      /**
       * The timestamp the step started executing.
       */
      startedAt?: number;
    };
  };
};

/**
 * The workflow execution's details.
 */
export type AdminWorkflowExecutionResponse = {
  workflow_execution: AdminWorkflowExecution;
};

/**
 * The API key's details.
 */
export type ApiKeyResponse = {
  /**
   * The API key's ID.
   */
  id: string;
  /**
   * The API key's token.
   */
  token: string;
  /**
   * The redacted form of the API key's token. This is useful when showing portion of the token. For example `sk_...123`.
   */
  redacted: string;
  /**
   * The API key's title.
   */
  title: string;
  /**
   * The API key's type. `secret` API keys are used for authenticating admin users, and `publishable` API key are used for storefronts and similar clients to scope requests to sales channels.
   */
  type: "secret" | "publishable";
  /**
   * The date the API key was last used.
   */
  last_used_at: string;
  /**
   * The ID of the user that created the API key.
   */
  created_by: string;
  /**
   * The date the API key was created.
   */
  created_at: string;
  /**
   * The ID of the user that revoked the API key.
   */
  revoked_by: string;
  /**
   * The date the API key was revoked.
   */
  revoked_at: string;
};

/**
 * The authenticated user's details.
 */
export type AuthAdminSessionResponse = {
  /**
   * The logged-in user.
   */
  user: AdminUser;
};

/**
 * The authentication's details.
 */
export type AuthCallbackResponse = {
  /**
   * The location to redirect the user to for further authentication with the third-party provider.
   */
  location: string;
};

/**
 * The authentication's details.
 */
export type AuthResponse = {
  /**
   * The JWT token used for registration or authentication.
   */
  token: string;
};

/**
 * The authenticated customer's details.
 */
export type AuthStoreSessionResponse = {
  /**
   * The logged-in customer.
   */
  user: StoreCustomer;
};

/**
 * The calculated price's details.
 */
export type BaseCalculatedPriceSet = {
  /**
   * The calculated price's ID.
   */
  id: string;
  /**
   * Whether the calculated price belongs to a price list.
   */
  is_calculated_price_price_list?: boolean;
  /**
   * Whether the calculated price is tax inclusive.
   */
  is_calculated_price_tax_inclusive?: boolean;
  /**
   * The amount of the calculated price, or `null` if there isn't a calculated price. This is the amount shown to the customer.
   */
  calculated_amount: number;
  /**
   * The calculated price's amount with taxes applied.
   */
  calculated_amount_with_tax?: number;
  /**
   * The calculated price's amount without taxes applied.
   */
  calculated_amount_without_tax?: number;
  /**
   * Whether the original price belongs to a price list.
   */
  is_original_price_price_list?: boolean;
  /**
   * Whether the original price is tax inclusive.
   */
  is_original_price_tax_inclusive?: boolean;
  /**
   * The amount of the original price, or `null` if there isn't an original price. This amount is useful to compare with the `calculated_amount`, such as to check for discounted value.
   */
  original_amount: number;
  /**
   * The calculated price's currency code.
   */
  currency_code: string;
  /**
   * The calculated price's details.
   */
  calculated_price?: {
    [key: string]: unknown;
  };
  /**
   * The original price's details.
   */
  original_price?: {
    [key: string]: unknown;
  };
};

/**
 * The details of a captured payment.
 */
export type BaseCapture = {
  /**
   * The payment capture's ID.
   */
  id: string;
  /**
   * The captured amount.
   */
  amount: number;
  /**
   * The date the capture was created.
   */
  created_at: string;
  /**
   * The ID of the user that captured the payment.
   */
  created_by?: string;
  payment: {
    [key: string]: unknown;
  };
};

/**
 * The item's cart.
 */
export type BaseCart = {
  /**
   * The cart's ID.
   */
  id: string;
  region?: BaseRegion;
  /**
   * The cart's region id.
   */
  region_id?: string;
  /**
   * The cart's customer id.
   */
  customer_id?: string;
  /**
   * The cart's sales channel id.
   */
  sales_channel_id?: string;
  /**
   * The cart's email.
   */
  email?: string;
  /**
   * The cart's currency code.
   */
  currency_code: string;
  shipping_address?: BaseCartAddress;
  billing_address?: BaseCartAddress;
  /**
   * The cart's items.
   */
  items?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The cart's shipping methods.
   */
  shipping_methods?: Array<BaseCartShippingMethod>;
  payment_collection?: BasePaymentCollection;
  /**
   * The cart's metadata.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The cart's created at.
   */
  created_at?: string;
  /**
   * The cart's updated at.
   */
  updated_at?: string;
  /**
   * The cart's original item total.
   */
  original_item_total: number;
  /**
   * The cart's original item subtotal.
   */
  original_item_subtotal: number;
  /**
   * The cart's original item tax total.
   */
  original_item_tax_total: number;
  /**
   * The cart's item total.
   */
  item_total: number;
  /**
   * The cart's item subtotal.
   */
  item_subtotal: number;
  /**
   * The cart's item tax total.
   */
  item_tax_total: number;
  /**
   * The cart's original total.
   */
  original_total: number;
  /**
   * The cart's original subtotal.
   */
  original_subtotal: number;
  /**
   * The cart's original tax total.
   */
  original_tax_total: number;
  /**
   * The cart's total.
   */
  total: number;
  /**
   * The cart's subtotal.
   */
  subtotal: number;
  /**
   * The cart's tax total.
   */
  tax_total: number;
  /**
   * The cart's discount total.
   */
  discount_total: number;
  /**
   * The cart's discount tax total.
   */
  discount_tax_total: number;
  /**
   * The cart's gift card total.
   */
  gift_card_total: number;
  /**
   * The cart's gift card tax total.
   */
  gift_card_tax_total: number;
  /**
   * The cart's shipping total.
   */
  shipping_total: number;
  /**
   * The cart's shipping subtotal.
   */
  shipping_subtotal: number;
  /**
   * The cart's shipping tax total.
   */
  shipping_tax_total: number;
  /**
   * The cart's original shipping total.
   */
  original_shipping_total: number;
  /**
   * The cart's original shipping subtotal.
   */
  original_shipping_subtotal: number;
  /**
   * The cart's original shipping tax total.
   */
  original_shipping_tax_total: number;
};

/**
 * The cart's shipping address.
 */
export type BaseCartAddress = {
  [key: string]: unknown;
};

/**
 * The tax line's item.
 */
export type BaseCartLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle?: string;
  /**
   * The item's thumbnail.
   */
  thumbnail?: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  product?: BaseProduct;
  /**
   * The item's product id.
   */
  product_id?: string;
  /**
   * The item's product title.
   */
  product_title?: string;
  /**
   * The item's product description.
   */
  product_description?: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle?: string;
  /**
   * The item's product type.
   */
  product_type?: string;
  /**
   * The item's product collection.
   */
  product_collection?: string;
  /**
   * The item's product handle.
   */
  product_handle?: string;
  variant?: BaseProductVariant;
  /**
   * The item's variant id.
   */
  variant_id?: string;
  /**
   * The item's variant sku.
   */
  variant_sku?: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode?: string;
  /**
   * The item's variant title.
   */
  variant_title?: string;
  /**
   * The item's variant option values.
   */
  variant_option_values?: {
    [key: string]: unknown;
  };
  /**
   * The item's requires shipping.
   */
  requires_shipping: boolean;
  /**
   * The item's is discountable.
   */
  is_discountable: boolean;
  /**
   * The item's is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The item's compare at unit price.
   */
  compare_at_unit_price?: number;
  /**
   * The item's unit price.
   */
  unit_price: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<BaseLineItemAdjustment>;
  cart: BaseCart;
  /**
   * The item's cart id.
   */
  cart_id: string;
  /**
   * The item's metadata.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The item's created at.
   */
  created_at?: string;
  /**
   * The item's updated at.
   */
  updated_at?: string;
  /**
   * The item's deleted at.
   */
  deleted_at?: string;
  /**
   * The item's original total.
   */
  original_total: number;
  /**
   * The item's original subtotal.
   */
  original_subtotal: number;
  /**
   * The item's original tax total.
   */
  original_tax_total: number;
  /**
   * The item's item total.
   */
  item_total: number;
  /**
   * The item's item subtotal.
   */
  item_subtotal: number;
  /**
   * The item's item tax total.
   */
  item_tax_total: number;
  /**
   * The item's total.
   */
  total: number;
  /**
   * The item's subtotal.
   */
  subtotal: number;
  /**
   * The item's tax total.
   */
  tax_total: number;
  /**
   * The item's discount total.
   */
  discount_total: number;
  /**
   * The item's discount tax total.
   */
  discount_tax_total: number;
};

/**
 * A cart's shipping method.
 */
export type BaseCartShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the cart this shipping method belongs to.
   */
  cart_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id?: string;
  /**
   * The shipping method's data, useful for fulfillment handling by third-party services.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<BaseShippingMethodTaxLine>;
  /**
   * The shipping method's adjustments, such as applied promotions.
   */
  adjustments?: Array<BaseShippingMethodAdjustment>;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: string;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  original_subtotal: string;
  /**
   * The total taxes applied on the shipping method's amount including promotions.
   */
  original_tax_total: string;
  /**
   * The shipping method's total amount including taxes and promotions.
   */
  total: string;
  /**
   * The shipping method's total amount excluding taxes, including promotions.
   */
  subtotal: string;
  /**
   * The total taxes applied on the shipping method's amount including promotions.
   */
  tax_total: string;
  /**
   * The total amount discounted.
   */
  discount_total: string;
  /**
   * The taxes applied on the discounted amount.
   */
  discount_tax_total: string;
};

/**
 * The claim item's details.
 */
export type BaseClaimItem = {
  /**
   * The claim item's ID.
   */
  id: string;
  /**
   * The ID of the claim this item belongs to.
   */
  claim_id: string;
  /**
   * The ID of the order this item belongs to.
   */
  order_id: string;
  /**
   * The ID of the item in the order.
   */
  item_id: string;
  /**
   * The quantity claimed.
   */
  quantity: number;
  /**
   * The claim's reason.
   */
  reason: "missing_item" | "wrong_item" | "production_failure" | "other";
  /**
   * The quantity claimed.
   */
  raw_quantity: {
    value: string | number;
  };
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the claim was created.
   */
  created_at?: string;
  /**
   * The date the claim was updated.
   */
  updated_at?: string;
};

/**
 * The claim's reason.
 */
export type reason =
  | "missing_item"
  | "wrong_item"
  | "production_failure"
  | "other";

/**
 * The product collection's details.
 */
export type BaseCollection = {
  /**
   * The collection's ID.
   */
  id: string;
  /**
   * The collection's title.
   */
  title: string;
  /**
   * The collection's handle.
   */
  handle: string;
  /**
   * The collection's creation date.
   */
  created_at: string;
  /**
   * The collection's update date.
   */
  updated_at: string;
  /**
   * The collection's deletion date.
   */
  deleted_at: string;
  /**
   * The collection's products.
   */
  products?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The collection's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
};

/**
 * The item's details.
 */
export type BaseExchangeItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The ID of the exchange this item belongs to.
   */
  exchange_id: string;
  /**
   * The ID of the order this item belongs to.
   */
  order_id: string;
  /**
   * The ID of the item in the order.
   */
  item_id: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
};

/**
 * The fulfillment provider's details.
 */
export type BaseFulfillmentProvider = {
  /**
   * The provider's ID.
   */
  id: string;
  /**
   * Whether the provider is enabled.
   */
  is_enabled: boolean;
};

/**
 * The adjustment's details.
 */
export type BaseLineItemAdjustment = {
  item: {
    [key: string]: unknown;
  };
  /**
   * The ID of the item this adjustment applies on.
   */
  item_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the cart this adjustment belongs to.
   */
  cart_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion applied by this adjustment.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The tax line's details
 */
export type BaseLineItemTaxLine = {
  item: BaseCartLineItem;
  /**
   * The ID of the item the tax line applies on.
   */
  item_id: string;
  /**
   * The item's total, including taxes and promotions.
   */
  total: number;
  /**
   * The item's subtotal excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the associated tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code the tax rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * The order's details.
 */
export type BaseOrder = {
  /**
   * The order's payment collections.
   */
  payment_collections?: Array<BasePaymentCollection>;
  /**
   * The order's fulfillments.
   */
  fulfillments?: Array<BaseOrderFulfillment>;
  shipping_address?: BaseOrderAddress;
  billing_address?: BaseOrderAddress;
  /**
   * The order's ID.
   */
  id: string;
  /**
   * The order's version.
   */
  version: number;
  /**
   * The ID of the region associated with the order.
   */
  region_id: string;
  /**
   * The ID of the customer that placed the order.
   */
  customer_id: string;
  /**
   * The ID of the sales channel the order is placed in.
   */
  sales_channel_id: string;
  /**
   * The email of the customer that placed the order.
   */
  email: string;
  /**
   * The order's currency code.
   */
  currency_code: string;
  /**
   * The order's display ID.
   */
  display_id?: number;
  /**
   * The order's items.
   */
  items: Array<BaseOrderLineItem>;
  /**
   * The order's shipping methods.
   */
  shipping_methods: Array<BaseOrderShippingMethod>;
  /**
   * The order's payment status.
   */
  payment_status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized"
    | "captured"
    | "partially_captured"
    | "partially_refunded"
    | "refunded"
    | "requires_action";
  /**
   * The order's fulfillment status.
   */
  fulfillment_status:
    | "canceled"
    | "not_fulfilled"
    | "partially_fulfilled"
    | "fulfilled"
    | "partially_shipped"
    | "shipped"
    | "partially_delivered"
    | "delivered";
  /**
   * The order's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
  summary: BaseOrderSummary;
  /**
   * The order's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the order was created.
   */
  created_at: string;
  /**
   * The date the order was updated.
   */
  updated_at: string;
  /**
   * The total of the order's items including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The tax total of the order's items excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The total of the order's items including taxes and promotions.
   */
  item_total: number;
  /**
   * The total of the order's items excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The tax total of the order's items including promotions.
   */
  item_tax_total: number;
  /**
   * The order's total excluding promotions, including taxes.
   */
  original_total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The order's tax total, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The order's tax total including promotions.
   */
  tax_total: number;
  /**
   * The order's discount or promotions total.
   */
  discount_total: number;
  /**
   * The tax total of order's discount or promotion.
   */
  discount_tax_total: number;
  /**
   * The order's gift card total.
   */
  gift_card_total: number;
  /**
   * The tax total of the order's gift card.
   */
  gift_card_tax_total: number;
  /**
   * The order's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The tax total of the order's shipping.
   */
  shipping_tax_total: number;
  /**
   * The order's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The tax total of the order's shipping excluding promotions.
   */
  original_shipping_tax_total: number;
};

/**
 * An order address.
 */
export type BaseOrderAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the customer this address belongs to.
   */
  customer_id?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The fulfillment's details.
 */
export type BaseOrderFulfillment = {
  /**
   * The fulfillment's ID.
   */
  id: string;
  /**
   * The ID of the location the items are fulfilled from.
   */
  location_id: string;
  /**
   * The date the items were packed.
   */
  packed_at: string;
  /**
   * The date the items were shipped.
   */
  shipped_at: string;
  /**
   * The date the items were delivered.
   */
  delivered_at: string;
  /**
   * The date the items were canceled.
   */
  canceled_at: string;
  /**
   * Data useful for the fulfillment provider handling it. This is taken from the associated shipping option.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The ID of the fulfillment provider used to handle the fulfillment.
   */
  provider_id: string;
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * The fulfillment's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the fulfillment was created.
   */
  created_at: string;
  /**
   * The date the fulfillment was updated.
   */
  updated_at: string;
  /**
   * Whether the fulfillment requires shipping.
   */
  requires_shipping: boolean;
};

/**
 * The item's detail.
 */
export type BaseOrderItemDetail = {
  /**
   * the detail's ID.
   */
  id: string;
  /**
   * the ID of the associated line item.
   */
  item_id: string;
  item: {
    [key: string]: unknown;
  };
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's fulfilled quantity.
   */
  fulfilled_quantity: number;
  /**
   * The item's delivered quantity.
   */
  delivered_quantity: number;
  /**
   * The item's shipped quantity.
   */
  shipped_quantity: number;
  /**
   * The item's quantity that's requested to be returned.
   */
  return_requested_quantity: number;
  /**
   * The item's quantity that's returned and added to the underlying variant's stocked quantity.
   */
  return_received_quantity: number;
  /**
   * The item's quantity that's returned but damaged. So, it's not added to the underlying variant's stocked quantity.
   */
  return_dismissed_quantity: number;
  /**
   * The item's quantity that's removed from the order.
   */
  written_off_quantity: number;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the detail was created.
   */
  created_at: string;
  /**
   * The date the detail was updated.
   */
  updated_at: string;
};

/**
 * The item's items.
 */
export type BaseOrderLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle: string;
  /**
   * The URL of the item's thumbnail.
   */
  thumbnail: string;
  variant?: BaseProductVariant;
  /**
   * The ID of the associated variant.
   */
  variant_id: string;
  product?: BaseProduct;
  /**
   * The ID of the associated product.
   */
  product_id: string;
  /**
   * The item's product title.
   */
  product_title: string;
  /**
   * The item's product description.
   */
  product_description: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle: string;
  /**
   * The item's product type.
   */
  product_type: string;
  /**
   * The ID of the collection the item's product belongs to.
   */
  product_collection: string;
  /**
   * The item's product handle.
   */
  product_handle: string;
  /**
   * The item's variant SKU.
   */
  variant_sku: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode: string;
  /**
   * The item's variant title.
   */
  variant_title: string;
  /**
   * The values of the item variant's options.
   */
  variant_option_values: {
    [key: string]: unknown;
  };
  /**
   * Whether the item requires shipping.
   */
  requires_shipping: boolean;
  /**
   * Whether the item is discountable.
   */
  is_discountable: boolean;
  /**
   * Whether the item is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
  /**
   * The item's unit price.
   */
  unit_price: number;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<BaseOrderLineItemTaxLine>;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<BaseOrderLineItemAdjustment>;
  detail: BaseOrderItemDetail;
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The item's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the item, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_tax_total: number;
  /**
   * The item's total, including taxes and promotions.
   */
  total: number;
  /**
   * The item's subtotal excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax total of the item including promotions.
   */
  tax_total: number;
  /**
   * The total discount amount of the item.
   */
  discount_total: number;
  /**
   * The total taxes applied on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The total refundable amount of the item's total.
   */
  refundable_total: number;
  /**
   * The total refundable amount of the item's total for a single quantity.
   */
  refundable_total_per_unit: number;
};

/**
 * The adjustment's details.
 */
export type BaseOrderLineItemAdjustment = {
  item: {
    [key: string]: unknown;
  };
  /**
   * The ID of the item this adjustment applies to.
   */
  item_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion that this applies on the order's item.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The tax line's tax lines.
 */
export type BaseOrderLineItemTaxLine = {
  item: {
    [key: string]: unknown;
  };
  /**
   * The ID of the associated line item.
   */
  item_id: string;
  /**
   * The tax line's total including promotions.
   */
  total: number;
  /**
   * The tax line's subtotal excluding promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the applied tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code that the tax rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider used to calculate the tax line.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * Details of changes to a shipping method.
 */
export type BaseOrderShippingDetail = {
  /**
   * The ID of the new changes to the shipping method.
   */
  id: string;
  /**
   * The ID of the shipping method.
   */
  shipping_method_id: string;
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the associated claim.
   */
  claim_id?: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id?: string;
  /**
   * The ID of the associated return.
   */
  return_id?: string;
  /**
   * The date the shipping method change was created.
   */
  created_at: string;
  /**
   * The date the shipping method change was updated.
   */
  updated_at: string;
};

/**
 * The shipping method's details.
 */
export type BaseOrderShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the order the shipping method belongs to.
   */
  order_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount includes applied taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id: string;
  /**
   * The shipping method's data, useful for fulfillment provider handling its fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<BaseOrderShippingMethodTaxLine>;
  /**
   * The shipping method's adjustments.
   */
  adjustments?: Array<BaseOrderShippingMethodAdjustment>;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The shipping method's total taxes excluding promotions.
   */
  original_tax_total: number;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The shipping method's tax total including promotions.
   */
  tax_total: number;
  /**
   * The total discounts applied on the shipping method.
   */
  discount_total: number;
  /**
   * The taxes applied on the discount amount.
   */
  discount_tax_total: number;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  detail?: BaseOrderShippingDetail;
};

/**
 * The adjustment's adjustments.
 */
export type BaseOrderShippingMethodAdjustment = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the shipping method this adjustment applies on.
   */
  shipping_method_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion applied by this adjustment.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The tax line's details.
 */
export type BaseOrderShippingMethodTaxLine = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the shipping method this tax line belongs to.
   */
  shipping_method_id: string;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the applied tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code that the tax rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider handling the tax calculation.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * The order's summary details.
 */
export type BaseOrderSummary = {
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The order's total taxes.
   */
  total_tax: number;
  /**
   * The order's total when it was placed.
   */
  ordered_total: number;
  /**
   * The total of the fulfilled items of the order.
   */
  fulfilled_total: number;
  /**
   * The total of the order's returned items.
   */
  returned_total: number;
  /**
   * The total of the items requested to be returned.
   */
  return_request_total: number;
  /**
   * The total of the items removed from the order.
   */
  write_off_total: number;
  /**
   * The total amount paid.
   */
  paid_total: number;
  /**
   * The total amount refunded.
   */
  refunded_total: number;
};

/**
 * An order transaction's details.
 */
export type BaseOrderTransaction = {
  /**
   * The transaction's ID.
   */
  id: string;
  /**
   * The ID of the order this transaction belongs to.
   */
  order_id: string;
  /**
   * The transaction's amount.
   */
  amount: number;
  /**
   * The transaction's currency code.
   */
  currency_code: string;
  /**
   * The name of a table that this transaction references. If this transaction is for captured payment, its value is `capture`. If this transaction is for refunded payment, its value is `refund`.
   */
  reference: "capture" | "refund";
  /**
   * The ID of the referenced record in the referenced table.
   */
  reference_id: string;
  /**
   * The transaction's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date that the transaction was created.
   */
  created_at: string;
  /**
   * The date that the transaction was updated.
   */
  updated_at: string;
};

/**
 * The name of a table that this transaction references. If this transaction is for captured payment, its value is `capture`. If this transaction is for refunded payment, its value is `refund`.
 */
export type reference2 = "capture" | "refund";

/**
 * The payment's details.
 */
export type BasePayment = {
  /**
   * The payment's ID.
   */
  id: string;
  /**
   * The payment's amount.
   */
  amount: number;
  /**
   * The amount authorized of the payment.
   */
  authorized_amount?: number;
  /**
   * The payment's currency code.
   */
  currency_code: string;
  /**
   * The ID of the payment provider used to process this payment.
   */
  provider_id: string;
  /**
   * The ID of the associated cart.
   */
  cart_id?: string;
  /**
   * The ID of the associated order.
   */
  order_id?: string;
  /**
   * The ID of the associated order edit.
   */
  order_edit_id?: string;
  /**
   * ID of the associated customer.
   */
  customer_id?: string;
  /**
   * The payment's data, useful for processing by the payment provider.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The date the payment was created.
   */
  created_at?: string;
  /**
   * The date the payment was updated.
   */
  updated_at?: string;
  /**
   * The date the payment was captured.
   */
  captured_at?: string;
  /**
   * The date the payment was canceled.
   */
  canceled_at?: string;
  /**
   * The captured amount of the payment.
   */
  captured_amount?: number;
  /**
   * The refunded amount of the payment.
   */
  refunded_amount?: number;
  /**
   * The details of payment captures.
   */
  captures?: Array<BaseCapture>;
  /**
   * The details of payment refunds.
   */
  refunds?: Array<BaseRefund>;
  payment_collection?: {
    [key: string]: unknown;
  };
  payment_session?: {
    [key: string]: unknown;
  };
};

/**
 * The payment collection's details.
 */
export type BasePaymentCollection = {
  /**
   * The payment collection's ID.
   */
  id: string;
  /**
   * The payment collection's currency code.
   */
  currency_code: string;
  /**
   * The ID of the region this payment collection is associated with.
   */
  region_id: string;
  /**
   * The total amount to be paid.
   */
  amount: number;
  /**
   * The total authorized amount of the collection's payments.
   */
  authorized_amount?: number;
  /**
   * The total captured amount of the collection's payments.
   */
  captured_amount?: number;
  /**
   * The total refunded amount of the collection's payments.
   */
  refunded_amount?: number;
  /**
   * The date the payment collection was completed.
   */
  completed_at?: string;
  /**
   * The date the payment collection was created.
   */
  created_at?: string;
  /**
   * The date the payment collection was updated.
   */
  updated_at?: string;
  /**
   * The payment collection's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The payment collection's status.
   */
  status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized";
  /**
   * The payment provider used to process the collection's payments and sessions.
   */
  payment_providers: Array<BasePaymentProvider>;
  /**
   * The payment collection's payment sessions.
   */
  payment_sessions?: Array<BasePaymentSession>;
  /**
   * The payment collection's payments.
   */
  payments?: Array<BasePayment>;
};

/**
 * The payment provider's details.
 */
export type BasePaymentProvider = {
  /**
   * The payment provider's ID.
   */
  id: string;
};

/**
 * The payment session's details.
 */
export type BasePaymentSession = {
  /**
   * The payment session's ID.
   */
  id: string;
  /**
   * The payment session's amount.
   */
  amount: number;
  /**
   * The payment session's currency code.
   */
  currency_code: string;
  /**
   * The ID of the payment provider processing this session.
   */
  provider_id: string;
  /**
   * The payment session's data, useful for the payment provider processing the payment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The context around the payment, such as the customer's details.
   */
  context?: {
    [key: string]: unknown;
  };
  /**
   * The payment session's status.
   */
  status:
    | "authorized"
    | "captured"
    | "canceled"
    | "pending"
    | "requires_more"
    | "error";
  /**
   * The date the payment session was authorized.
   */
  authorized_at?: string;
  payment_collection?: {
    [key: string]: unknown;
  };
  payment?: BasePayment;
};

/**
 * The product's details.
 */
export type BaseProduct = {
  /**
   * The product's ID.
   */
  id: string;
  /**
   * The product's title.
   */
  title: string;
  /**
   * The product's handle.
   */
  handle: string;
  /**
   * The product's subtitle.
   */
  subtitle: string;
  /**
   * The product's description.
   */
  description: string;
  /**
   * Whether the product is a gift card.
   */
  is_giftcard: boolean;
  /**
   * The product's status.
   */
  status: "draft" | "proposed" | "published" | "rejected";
  /**
   * The product's thumbnail URL.
   */
  thumbnail: string;
  /**
   * The product's width.
   */
  width: number;
  /**
   * The product's weight.
   */
  weight: number;
  /**
   * The product's length.
   */
  length: number;
  /**
   * The product's height.
   */
  height: number;
  /**
   * The product's origin country.
   */
  origin_country: string;
  /**
   * The product's hs code.
   */
  hs_code: string;
  /**
   * The product's mid code.
   */
  mid_code: string;
  /**
   * The product's material.
   */
  material: string;
  collection?: BaseCollection;
  /**
   * The ID of the collection the product belongs to.
   */
  collection_id: string;
  /**
   * The product's categories.
   */
  categories?: Array<BaseProductCategory>;
  type?: BaseProductType;
  /**
   * The ID of the type the product belongs to.
   */
  type_id: string;
  /**
   * The product's tags.
   */
  tags?: Array<BaseProductTag>;
  /**
   * The product's variants.
   */
  variants: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The product's options.
   */
  options: Array<BaseProductOption>;
  /**
   * The product's images.
   */
  images: Array<BaseProductImage>;
  /**
   * Whether the product is discountable.
   */
  discountable: boolean;
  /**
   * The ID of the product in an external or third-party system.
   */
  external_id: string;
  /**
   * The date the product was created.
   */
  created_at: string;
  /**
   * The date the product was updated.
   */
  updated_at: string;
  /**
   * The date the product was deleted.
   */
  deleted_at: string;
  /**
   * The product's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product category's details.
 */
export type BaseProductCategory = {
  /**
   * The category's children.
   */
  category_children: Array<{
    [key: string]: unknown;
  }>;
  parent_category: {
    [key: string]: unknown;
  };
  /**
   * The category's products.
   */
  products?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The category's name.
   */
  name: string;
  /**
   * The category's description.
   */
  description: string;
  /**
   * The category's ID.
   */
  id: string;
  /**
   * The category's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the category was created.
   */
  created_at: string;
  /**
   * The date the category was updated.
   */
  updated_at: string;
  /**
   * The category's unique handle.
   */
  handle: string;
  /**
   * The date the category was deleted.
   */
  deleted_at: string;
  /**
   * Whether the category is active. If disabled, the category isn't shown in the storefront.
   */
  is_active: boolean;
  /**
   * Whether the category is internal. If enabled, the category is only seen by admin users.
   */
  is_internal: boolean;
  /**
   * The category's rank among sibling categories.
   */
  rank: number;
  /**
   * The ID of the category's parent.
   */
  parent_category_id: string;
};

/**
 * The image's details.
 */
export type BaseProductImage = {
  /**
   * The image's ID.
   */
  id: string;
  /**
   * The image's URL.
   */
  url: string;
  /**
   * The date the image was created.
   */
  created_at?: string;
  /**
   * The date the image was updated.
   */
  updated_at?: string;
  /**
   * The date the image was deleted.
   */
  deleted_at?: string;
  /**
   * The image's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product option's details.
 */
export type BaseProductOption = {
  /**
   * The product option's ID.
   */
  id: string;
  /**
   * The product option's title.
   */
  title: string;
  product?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product this option belongs to.
   */
  product_id?: string;
  /**
   * The product option's values.
   */
  values?: Array<BaseProductOptionValue>;
  /**
   * The product option's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the product option was created.
   */
  created_at?: string;
  /**
   * The date the product option was updated.
   */
  updated_at?: string;
  /**
   * The date the product option was deleted.
   */
  deleted_at?: string;
};

/**
 * The product option value's details.
 */
export type BaseProductOptionValue = {
  /**
   * The value's ID.
   */
  id: string;
  /**
   * The value.
   */
  value: string;
  option?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the option this value belongs to.
   */
  option_id?: string;
  /**
   * The value's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the value was created.
   */
  created_at?: string;
  /**
   * The date the value was updated.
   */
  updated_at?: string;
  /**
   * The date the value was deleted.
   */
  deleted_at?: string;
};

/**
 * The product tag's details.
 */
export type BaseProductTag = {
  /**
   * The tag's ID.
   */
  id: string;
  /**
   * The tag's value.
   */
  value: string;
  /**
   * The date the tag was created.
   */
  created_at: string;
  /**
   * The date the tag was updated.
   */
  updated_at: string;
  /**
   * The date the tag was deleted.
   */
  deleted_at?: string;
  /**
   * The tag's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product type's details.
 */
export type BaseProductType = {
  /**
   * The type's ID.
   */
  id: string;
  /**
   * The type's value.
   */
  value: string;
  /**
   * The date the type was created.
   */
  created_at: string;
  /**
   * The date the type was updated.
   */
  updated_at: string;
  /**
   * The date the type was deleted.
   */
  deleted_at?: string;
  /**
   * The type's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product variant's details.
 */
export type BaseProductVariant = {
  /**
   * The variant's ID.
   */
  id: string;
  /**
   * The variant's title.
   */
  title: string;
  /**
   * The variant's SKU.
   */
  sku: string;
  /**
   * The variant's barcode.
   */
  barcode: string;
  /**
   * The variant's EAN code.
   */
  ean: string;
  /**
   * The variant's UPC.
   */
  upc: string;
  /**
   * Whether the variant can be ordered even if it's out of stock.
   */
  allow_backorder: boolean;
  /**
   * Whether the Medusa application manages the variant's inventory quantity and availablility. If disabled, the variant is always considered in stock.
   */
  manage_inventory: boolean;
  /**
   * The variant's inventory quantity. This is only included if you pass in the `fields` query parameter a `+variants.inventory_quantity` parameter.
   */
  inventory_quantity?: number;
  /**
   * The variant's HS code.
   */
  hs_code: string;
  /**
   * The variant's origin country.
   */
  origin_country: string;
  /**
   * The variant's MID code.
   */
  mid_code: string;
  /**
   * The variant's material.
   */
  material: string;
  /**
   * The variant's weight.
   */
  weight: number;
  /**
   * The variant's length.
   */
  length: number;
  /**
   * The variant's height.
   */
  height: number;
  /**
   * The variant's width.
   */
  width: number;
  /**
   * The variant's rank among its sibling variants.
   */
  variant_rank?: number;
  /**
   * The variant's option values.
   */
  options: Array<BaseProductOptionValue>;
  product?: BaseProduct;
  /**
   * The ID of the product that the variant belongs to.
   */
  product_id?: string;
  calculated_price?: BaseCalculatedPriceSet;
  /**
   * The date the variant was created.
   */
  created_at: string;
  /**
   * The date the variant was updated.
   */
  updated_at: string;
  /**
   * The date the variant was deleted.
   */
  deleted_at: string;
  /**
   * The variant's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The rule value's details.
 */
export type BasePromotionRuleValue = {
  /**
   * The value's ID.
   */
  id: string;
  /**
   * The value.
   */
  value?: string;
};

/**
 * The refund's details.
 */
export type BaseRefund = {
  /**
   * The refund's ID.
   */
  id: string;
  /**
   * The refund's amount.
   */
  amount: number;
  /**
   * The ID of the refund reason.
   */
  refund_reason_id?: string;
  /**
   * More details about the refund.
   */
  note?: string;
  /**
   * The date the refund was created.
   */
  created_at: string;
  /**
   * The ID of the user that created the refund.
   */
  created_by?: string;
  payment: {
    [key: string]: unknown;
  };
  refund_reason?: RefundReason;
};

/**
 * The region's details.
 */
export type BaseRegion = {
  /**
   * The region's ID.
   */
  id: string;
  /**
   * The region's name.
   */
  name: string;
  /**
   * The region's currency code.
   */
  currency_code: string;
  /**
   * The region's automatic taxes.
   */
  automatic_taxes?: boolean;
  /**
   * The region's countries.
   */
  countries?: Array<BaseRegionCountry>;
  /**
   * The region's payment providers.
   */
  payment_providers?: Array<AdminPaymentProvider>;
  /**
   * The region's metadata.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The region's created at.
   */
  created_at?: string;
  /**
   * The region's updated at.
   */
  updated_at?: string;
};

/**
 * The country's details.
 */
export type BaseRegionCountry = {
  /**
   * The country's ID.
   */
  id: string;
  /**
   * The country's iso 2.
   */
  iso_2?: string;
  /**
   * The country's iso 3.
   */
  iso_3?: string;
  /**
   * The country's num code.
   */
  num_code?: string;
  /**
   * The country's name.
   */
  name?: string;
  /**
   * The country's display name.
   */
  display_name?: string;
};

/**
 * The operator's details.
 */
export type BaseRuleOperatorOptions = {
  /**
   * The operator's ID.
   */
  id: string;
  /**
   * The operator's value.
   */
  value: string;
  /**
   * The operator's label.
   */
  label: string;
};

/**
 * The adjustment's details.
 */
export type BaseShippingMethodAdjustment = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the shipping method the adjustment is applied on.
   */
  shipping_method_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the associated cart.
   */
  cart_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion applied by this adjustment.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The tax line's details.
 */
export type BaseShippingMethodTaxLine = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of this shipping method the tax line belongs to.
   */
  shipping_method_id: string;
  /**
   * The method's total including taxes and promotions.
   */
  total: number;
  /**
   * The method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the applied tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code that the rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider that calculated the taxes.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * The campaign's details.
 */
export type CampaignResponse = {
  /**
   * The campaign's ID.
   */
  id: string;
  /**
   * The campaign's name.
   */
  name: string;
  /**
   * The campaign's description.
   */
  description: string;
  /**
   * The campaign's currency.
   */
  currency: string;
  /**
   * The campaign's campaign identifier.
   */
  campaign_identifier: string;
  /**
   * The campaign's starts at.
   */
  starts_at: string;
  /**
   * The campaign's ends at.
   */
  ends_at: string;
  /**
   * The campaign's budget.
   */
  budget: {
    /**
     * The budget's ID.
     */
    id: string;
    type: "spend" | "usage";
    /**
     * The budget's currency code.
     */
    currency_code: string;
    /**
     * The budget's limit.
     */
    limit: number;
    /**
     * The budget's used.
     */
    used: number;
  };
};

/**
 * The address to create.
 */
export type CreateAddress = {
  /**
   * The ID of the customer this address belongs to.
   */
  customer_id?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Filter by customer groups to get their associated customers.
 */
export type CustomerGroupInCustomerFilters = {
  id: string | Array<string>;
  name: string | Array<string>;
  /**
   * Filter by the group's creation date.
   */
  created_at: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
  /**
   * Filter by the group's update date.
   */
  updated_at: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
  /**
   * Filter by the group's deletion date.
   */
  deleted_at: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    $eq?: string | Array<string>;
    /**
     * Filter by values not equal to this parameter.
     */
    $ne?: string;
    /**
     * Filter by values in this array.
     */
    $in?: Array<string>;
    /**
     * Filter by values not in this array.
     */
    $nin?: Array<string>;
    $not?:
      | string
      | {
          [key: string]: unknown;
        }
      | Array<string>;
    /**
     * Filter by values greater than this parameter. Useful for numbers and dates only.
     */
    $gt?: string;
    /**
     * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
     */
    $gte?: string;
    /**
     * Filter by values less than this parameter. Useful for numbers and dates only.
     */
    $lt?: string;
    /**
     * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
     */
    $lte?: string;
    /**
     * Apply a `like` filter. Useful for strings only.
     */
    $like?: string;
    /**
     * Apply a regex filter. Useful for strings only.
     */
    $re?: string;
    /**
     * Apply a case-insensitive `like` filter. Useful for strings only.
     */
    $ilike?: string;
    /**
     * Filter to apply on full-text properties.
     */
    $fulltext?: string;
    /**
     * Filter arrays that have overlapping values with this parameter.
     */
    $overlap?: Array<string>;
    /**
     * Filter arrays that contain some of the values of this parameter.
     */
    $contains?: Array<string>;
    /**
     * Filter arrays that contain all values of this parameter.
     */
    $contained?: Array<string>;
    /**
     * Filter by whether a value for this parameter exists (not `null`).
     */
    $exists?: boolean;
  };
};

export type Error = {
  /**
   * A slug code to indicate the type of the error.
   */
  code?:
    | "invalid_state_error"
    | "invalid_request_error"
    | "api_error"
    | "unknown_error";
  /**
   * Description of the error that occurred.
   */
  message?: string;
  /**
   * A slug indicating the type of the error.
   */
  type?:
    | "QueryRunnerAlreadyReleasedError"
    | "TransactionAlreadyStartedError"
    | "TransactionNotStartedError"
    | "conflict"
    | "unauthorized"
    | "payment_authorization_error"
    | "duplicate_error"
    | "not_allowed"
    | "invalid_data"
    | "not_found"
    | "database_error"
    | "unexpected_state"
    | "invalid_argument"
    | "unknown_error";
};

/**
 * A slug code to indicate the type of the error.
 */
export type code =
  | "invalid_state_error"
  | "invalid_request_error"
  | "api_error"
  | "unknown_error";

/**
 * A slug indicating the type of the error.
 */
export type type8 =
  | "QueryRunnerAlreadyReleasedError"
  | "TransactionAlreadyStartedError"
  | "TransactionNotStartedError"
  | "conflict"
  | "unauthorized"
  | "payment_authorization_error"
  | "duplicate_error"
  | "not_allowed"
  | "invalid_data"
  | "not_found"
  | "database_error"
  | "unexpected_state"
  | "invalid_argument"
  | "unknown_error";

/**
 * The inventory level's details
 */
export type InventoryLevel = {
  /**
   * The inventory level's ID.
   */
  id: string;
  /**
   * The ID of the associated inventory item.
   */
  inventory_item_id: string;
  /**
   * The ID of the associated location.
   */
  location_id: string;
  /**
   * The inventory level's stocked quantity.
   */
  stocked_quantity: number;
  /**
   * The inventory level's reserved quantity.
   */
  reserved_quantity: number;
  /**
   * The inventory level's available quantity.
   */
  available_quantity: number;
  /**
   * The inventory level's incoming quantity.
   */
  incoming_quantity: number;
  /**
   * The inventory level's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The order change's order.
 */
export type Order = {
  /**
   * The order's ID.
   */
  id: string;
  /**
   * The order's version.
   */
  version: number;
  order_change?: {
    [key: string]: unknown;
  };
  /**
   * The order's status.
   */
  status:
    | "canceled"
    | "requires_action"
    | "pending"
    | "completed"
    | "draft"
    | "archived";
  /**
   * The ID of the region the order belongs to.
   */
  region_id?: string;
  /**
   * The ID of the customer that placed the order.
   */
  customer_id?: string;
  /**
   * The ID of the sales channel the order was placed in.
   */
  sales_channel_id?: string;
  /**
   * The email of the customer that placed the order.
   */
  email?: string;
  /**
   * The order's currency code.
   */
  currency_code: string;
  shipping_address?: OrderAddress;
  billing_address?: OrderAddress;
  /**
   * The order's items.
   */
  items?: Array<OrderLineItem>;
  /**
   * The order's shipping methods.
   */
  shipping_methods?: Array<OrderShippingMethod>;
  /**
   * The order's transactions.
   */
  transactions?: Array<OrderTransaction>;
  /**
   * The order's summary.
   */
  summary?: {
    [key: string]: unknown;
  };
  /**
   * The order's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the order was canceled.
   */
  canceled_at?: string;
  /**
   * The date the order was created.
   */
  created_at: string;
  /**
   * The date the order was updated.
   */
  updated_at: string;
  /**
   * The order items' total including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The order items' total excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The taxes total for order items, excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The order items' total including taxes and promotions.
   */
  item_total: number;
  /**
   * The order items' total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The tax total of the order items including promotions.
   */
  item_tax_total: number;
  /**
   * The order's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The tax total of the order excluding promotions.
   */
  original_tax_total: number;
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's subtotal excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax total of the order including promotions.
   */
  tax_total: number;
  /**
   * The total discount excluding taxes.
   */
  discount_subtotal: number;
  /**
   * The total discount including taxes.
   */
  discount_total: number;
  /**
   * The tax total applied on the discount.
   */
  discount_tax_total: number;
  /**
   * The order's gift card total.
   */
  gift_card_total: number;
  /**
   * The order's gift card tax total.
   */
  gift_card_tax_total: number;
  /**
   * The order's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The total taxes of the order's shipping including taxes.
   */
  shipping_tax_total: number;
  /**
   * The order's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The total taxes of the order's shipping excluding promotions.
   */
  original_shipping_tax_total: number;
};

/**
 * The order's status.
 */
export type status7 =
  | "canceled"
  | "requires_action"
  | "pending"
  | "completed"
  | "draft"
  | "archived";

/**
 * The address's details.
 */
export type OrderAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the customer the address belongs to.
   */
  customer_id?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The order change's details.
 */
export type OrderChange = {
  /**
   * The order change's ID.
   */
  id: string;
  /**
   * The order change's version. This will be the order's version when the change is applied.
   */
  version: number;
  /**
   * The order change's type.
   */
  change_type?: "return" | "exchange" | "claim" | "edit";
  /**
   * The ID of the order this change applies on.
   */
  order_id: string;
  /**
   * The ID of the associated return.
   */
  return_id: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id: string;
  /**
   * The ID of the associated claim.
   */
  claim_id: string;
  order: {
    [key: string]: unknown;
  };
  return_order: {
    [key: string]: unknown;
  };
  exchange: OrderExchange;
  claim: OrderClaim;
  /**
   * The order change's actions.
   */
  actions: Array<OrderChangeAction>;
  /**
   * The order change's status.
   */
  status: "canceled" | "requested" | "pending" | "confirmed" | "declined";
  /**
   * The ID of the user that requested the change.
   */
  requested_by: string;
  /**
   * The date the order change was requested.
   */
  requested_at: string;
  /**
   * The ID of the user that confirmed the order change.
   */
  confirmed_by: string;
  /**
   * The date the order change was confirmed.
   */
  confirmed_at: string;
  /**
   * The ID of the user that declined the order change.
   */
  declined_by: string;
  /**
   * The reason the order change was declined.
   */
  declined_reason: string;
  /**
   * The order change's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the order change was declined.
   */
  declined_at: string;
  /**
   * The ID of the user that canceled the order change.
   */
  canceled_by: string;
  /**
   * The date the order change was canceled.
   */
  canceled_at: string;
  /**
   * The date the order change was created.
   */
  created_at: string;
  /**
   * The date the order change was updated.
   */
  updated_at: string;
};

/**
 * The order change action's details.
 */
export type OrderChangeAction = {
  /**
   * The action's ID.
   */
  id: string;
  /**
   * The ID of the order change that the action belongs to.
   */
  order_change_id: string;
  order_change: {
    [key: string]: unknown;
  };
  /**
   * The ID of the order the associated change is for.
   */
  order_id: string;
  /**
   * The ID of the associated return.
   */
  return_id: string;
  /**
   * The ID of the associated claim.
   */
  claim_id: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id: string;
  order: Order;
  /**
   * The name of the table this action applies on.
   */
  reference: "claim" | "exchange" | "return" | "order_shipping_method";
  /**
   * The ID of the record in the referenced table.
   */
  reference_id: string;
  /**
   * The applied action.
   */
  action:
    | "CANCEL_RETURN_ITEM"
    | "FULFILL_ITEM"
    | "DELIVER_ITEM"
    | "CANCEL_ITEM_FULFILLMENT"
    | "ITEM_ADD"
    | "ITEM_REMOVE"
    | "ITEM_UPDATE"
    | "RECEIVE_DAMAGED_RETURN_ITEM"
    | "RECEIVE_RETURN_ITEM"
    | "RETURN_ITEM"
    | "SHIPPING_ADD"
    | "SHIPPING_REMOVE"
    | "SHIP_ITEM"
    | "WRITE_OFF_ITEM"
    | "REINSTATE_ITEM";
  /**
   * The action's details.
   */
  details: {
    [key: string]: unknown;
  };
  /**
   * A note that's viewed only by admin users.
   */
  internal_note: string;
  /**
   * The date the action was created.
   */
  created_at: string;
  /**
   * The date the action was updated.
   */
  updated_at: string;
};

/**
 * The order change's claim.
 */
export type OrderClaim = {
  /**
   * The claim's ID.
   */
  id: string;
  /**
   * The ID of the order associated with the claim.
   */
  order_id: string;
  /**
   * The order items targetted by the claim.
   */
  claim_items: Array<BaseClaimItem>;
  /**
   * The outbound or new items of the claim.
   */
  additional_items: Array<BaseClaimItem>;
  return?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the associated return.
   */
  return_id?: string;
  /**
   * Whether the customer should be notified about changes in the claim.
   */
  no_notification?: boolean;
  /**
   * The amount to be refunded.
   */
  refund_amount?: string | number;
  /**
   * The claim's display ID.
   */
  display_id: number;
  /**
   * The claim's shipping methods.
   */
  shipping_methods?: Array<OrderShippingMethod>;
  /**
   * The claim's transactions.
   */
  transactions?: Array<OrderTransaction>;
  /**
   * The claim's metadata, used to store custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The claim's creation date.
   */
  created_at?: string;
  /**
   * The claim's update date.
   */
  updated_at?: string;
  /**
   * The claim's type.
   */
  type: "replace" | "refund";
  order?: Order;
  /**
   * The claim's order version.
   */
  order_version: number;
  raw_refund_amount?: string | number;
  /**
   * The ID of the user that created the claim.
   */
  created_by?: string;
  /**
   * The date the claim was deleted.
   */
  deleted_at?: string;
  /**
   * The date the claim was canceled.
   */
  canceled_at?: string;
};

/**
 * The order change's exchange.
 */
export type OrderExchange = {
  /**
   * The ID of the order the exchange is created for.
   */
  order_id: string;
  /**
   * The new items (outbound) sent by the exchange.
   */
  additional_items: Array<BaseExchangeItem>;
  /**
   * Whether to send the customer notifications when the exchange is updated.
   */
  no_notification?: boolean;
  /**
   * The amount to be exchanged or refunded. If the amount is negative, it must be refunded. If positive, additional payment is required from the customer.
   */
  difference_due?: number;
  return?: Return;
  /**
   * The ID of the associated exchange.
   */
  return_id?: string;
  /**
   * The exchange's ID.
   */
  id: string;
  /**
   * The exchange's display ID.
   */
  display_id: number;
  /**
   * The shipping methods used to send the new (outbound) items.
   */
  shipping_methods?: Array<OrderShippingMethod>;
  /**
   * The exchange's transactions.
   */
  transactions?: Array<OrderTransaction>;
  /**
   * The exchange's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date that the exchange was created.
   */
  created_at?: string;
  /**
   * The date that the exchange was updated.
   */
  updated_at?: string;
  order?: Order;
  /**
   * The version of the order when the exchange is applied.
   */
  order_version: number;
  raw_difference_due?: string | number;
  /**
   * Whether variants that are out of stock can be added to the exchange as outbound items.
   */
  allow_backorder?: boolean;
  /**
   * The ID of the user that created the exchange.
   */
  created_by?: string;
  /**
   * The date the exchange was deleted.
   */
  deleted_at?: string;
  /**
   * The date the exchange was canceled.
   */
  canceled_at?: string;
};

/**
 * The order item's detail.
 */
export type OrderItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The ID of the associated line item.
   */
  item_id: string;
  item: {
    [key: string]: unknown;
  };
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's fulfilled quantity.
   */
  fulfilled_quantity: number;
  /**
   * The item's delivered quantity.
   */
  delivered_quantity: number;
  /**
   * The item's shipped quantity.
   */
  shipped_quantity: number;
  /**
   * The item's quantity that's requested to be returned.
   */
  return_requested_quantity: number;
  /**
   * The item's quantity that's received through a return.
   */
  return_received_quantity: number;
  /**
   * The item's quantity that's returned but dismissed because it's damaged.
   */
  return_dismissed_quantity: number;
  /**
   * The item's quantity that's removed due to an order change.
   */
  written_off_quantity: number;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
};

/**
 * The order line item's details.
 */
export type OrderLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle?: string;
  /**
   * The item's thumbnail URL.
   */
  thumbnail?: string;
  /**
   * The ID of the associated variant.
   */
  variant_id?: string;
  /**
   * The ID of the associated product.
   */
  product_id?: string;
  /**
   * The item's product title.
   */
  product_title?: string;
  /**
   * The item's product description.
   */
  product_description?: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle?: string;
  /**
   * The ID of the associated product's type.
   */
  product_type?: string;
  /**
   * The ID of the associated product's collection.
   */
  product_collection?: string;
  /**
   * The item's product handle.
   */
  product_handle?: string;
  /**
   * The item's variant SKU.
   */
  variant_sku?: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode?: string;
  /**
   * The item's variant title.
   */
  variant_title?: string;
  /**
   * The associated variant's values for the associated product's options.
   */
  variant_option_values?: {
    [key: string]: unknown;
  };
  /**
   * Whether the item requires shipping.
   */
  requires_shipping: boolean;
  /**
   * Whether the item is discountable.
   */
  is_discountable: boolean;
  /**
   * Whether the item's price includes taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
  /**
   * The item's price for a single quantity.
   */
  unit_price: number;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<OrderLineItemTaxLine>;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<OrderLineItemAdjustment>;
  detail: OrderItem;
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The item's total including taxes and promotions.
   */
  original_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the item excluding promotions.
   */
  original_tax_total: number;
  /**
   * The item's total for a single quantity, including taxes and promotions.
   */
  item_total: number;
  /**
   * The item's total for a single quantity, excluding taxes and including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes of a single quantity of the item, including promotions.
   */
  item_tax_total: number;
  /**
   * The item's total including taxes and promotions.
   */
  total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The total taxes of the item, including promotions.
   */
  tax_total: number;
  /**
   * The item's discount total.
   */
  discount_total: number;
  /**
   * The total taxes on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The total amount of the item that can be refunded.
   */
  refundable_total: number;
  /**
   * The total amount that can be refunded of a single quantity of the item.
   */
  refundable_total_per_unit: number;
};

/**
 * The line item adjustment's details.
 */
export type OrderLineItemAdjustment = {
  item: {
    [key: string]: unknown;
  };
  /**
   * The ID of the item this adjustment is for.
   */
  item_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion applied by this adjustment.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The line item tax line's details.
 */
export type OrderLineItemTaxLine = {
  item: {
    [key: string]: unknown;
  };
  /**
   * The ID of the line item that the tax line belongs to.
   */
  item_id: string;
  /**
   * The item's total including taxes and promotions.
   */
  total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the applied tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code that the tax rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider used to calculate the tax lines.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * The item's items.
 */
export type OrderReturnItem = {
  /**
   * The return item's ID.
   */
  id: string;
  /**
   * The return item's quantity.
   */
  quantity: number;
  /**
   * The received quantity of the item. This quantity is added to the stocked inventory quantity of the item.
   */
  received_quantity?: number;
  /**
   * The ID of the return reason associated with the item.
   */
  reason_id?: string;
  /**
   * The ID of the associated order item.
   */
  item_id: string;
  /**
   * The ID of the return this return item belongs to.
   */
  return_id: string;
  /**
   * The return item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the order the return belongs to.
   */
  order_id: string;
  /**
   * The date the item was created.
   */
  created_at?: string;
  /**
   * The date the item was updated.
   */
  updated_at?: string;
};

/**
 * The shipping method's details.
 */
export type OrderShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the order that the shipping method belongs to.
   */
  order_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount includes taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id?: string;
  /**
   * The shipping method's data, useful for the fulfillment provider handling the fulfillment.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<OrderShippingMethodTaxLine>;
  /**
   * The shipping method's adjustments.
   */
  adjustments?: Array<OrderShippingMethodAdjustment>;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The shipping method's subtotal excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the shipping method excluding promotions.
   */
  original_tax_total: number;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The total taxes of the shipping method, including promotions.
   */
  tax_total: number;
  /**
   * The shipping method's discount total.
   */
  discount_total: number;
  /**
   * The total taxes of the discount amount.
   */
  discount_tax_total: number;
};

/**
 * The shipping method adjustment's details.
 */
export type OrderShippingMethodAdjustment = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the shipping method this adjustment is for.
   */
  shipping_method_id: string;
  /**
   * The adjustment's ID.
   */
  id: string;
  /**
   * The adjustment's code.
   */
  code?: string;
  /**
   * The adjustment's amount.
   */
  amount: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The adjustment's description.
   */
  description?: string;
  /**
   * The ID of the promotion this adjustment applies.
   */
  promotion_id?: string;
  /**
   * The adjustment's provider ID.
   */
  provider_id?: string;
  /**
   * The date the adjustment was created.
   */
  created_at: string;
  /**
   * The date the adjustment was updated.
   */
  updated_at: string;
};

/**
 * The shipping method tax line's details.
 */
export type OrderShippingMethodTaxLine = {
  shipping_method: {
    [key: string]: unknown;
  };
  /**
   * The ID of the shipping method that this tax line is for.
   */
  shipping_method_id: string;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax line's ID.
   */
  id: string;
  /**
   * The tax line's description.
   */
  description?: string;
  /**
   * The ID of the applied tax rate.
   */
  tax_rate_id?: string;
  /**
   * The code that the tax rate is identified by.
   */
  code: string;
  /**
   * The rate to charge.
   */
  rate: number;
  /**
   * The ID of the tax provider used to calculate taxes.
   */
  provider_id?: string;
  /**
   * The date the tax line was created.
   */
  created_at: string;
  /**
   * The date the tax line was updated.
   */
  updated_at: string;
};

/**
 * The transaction's details.
 */
export type OrderTransaction = {
  /**
   * The transaction's ID.
   */
  id: string;
  /**
   * The ID of the order this transaction belongs to.
   */
  order_id: string;
  /**
   * The transaction's amount.
   */
  amount: number;
  /**
   * The transaction's currency code.
   */
  currency_code: string;
  /**
   * The name of a table that this transaction references. If this transaction is for captured payment, its value is `capture`. If this transaction is for refunded payment, its value is `refund`.
   */
  reference: "capture" | "refund";
  /**
   * The ID of the referenced record in the referenced table.
   */
  reference_id: string;
  /**
   * The transaction's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date that the transaction was created.
   */
  created_at: string;
  /**
   * The date that the transaction was updated.
   */
  updated_at: string;
  order: {
    [key: string]: unknown;
  };
};

/**
 * The refund reason's details.
 */
export type RefundReason = {
  /**
   * The refund reason's ID.
   */
  id: string;
  /**
   * The refund reason's label.
   */
  label: string;
  /**
   * The refund reason's description.
   */
  description?: string;
  /**
   * The refund reason's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the refund reason was created.
   */
  created_at: string;
  /**
   * The date the refund reason was updated.
   */
  updated_at: string;
};

/**
 * The refund reason's details.
 */
export type RefundReasonResponse = {
  refund_reason: AdminRefundReason;
};

/**
 * The return's details.
 */
export type Return = {
  /**
   * The return's ID.
   */
  id: string;
  /**
   * The return's status.
   */
  status: "canceled" | "requested" | "received" | "partially_received";
  /**
   * The amount refunded by this return.
   */
  refund_amount?: number;
  /**
   * The ID of the associated order.
   */
  order_id: string;
  /**
   * The return's items.
   */
  items: Array<OrderReturnItem>;
  /**
   * The return's shipping methods.
   */
  shipping_methods?: Array<OrderShippingMethod>;
  /**
   * The return's transactions.
   */
  transactions?: Array<OrderTransaction>;
  /**
   * The return's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the return was created.
   */
  created_at?: string;
  /**
   * The date the return was updated.
   */
  updated_at?: string;
  /**
   * The date the return was canceled.
   */
  canceled_at?: string;
  raw_refund_amount?: string | number;
  order?: Order;
  /**
   * The ID of the exchange this return belongs to, if any.
   */
  exchange_id?: string;
  exchange?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the claim this return belongs to, if any.
   */
  claim_id?: string;
  claim?: OrderClaim;
  /**
   * The return order's display ID.
   */
  display_id: number;
  /**
   * The ID of the stock location the items are returned to.
   */
  location_id?: string;
  /**
   * Whether to notify the customer about changes in the return.
   */
  no_notification?: boolean;
  /**
   * The ID of the user that created the return.
   */
  created_by?: string;
  /**
   * The date the return was deleted.
   */
  deleted_at?: string;
  /**
   * The date the return was requested.
   */
  requested_at?: string;
  /**
   * The date the return was received.
   */
  received_at?: string;
};

/**
 * The details of the line item to add.
 */
export type StoreAddCartLineItem = {
  /**
   * The ID of the product variant to add to the cart.
   */
  variant_id: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The cart's details.
 */
export type StoreCart = {
  /**
   * The cart's ID.
   */
  id: string;
  region?: StoreRegion;
  /**
   * The ID of the region the cart belongs to.
   */
  region_id?: string;
  /**
   * The ID of the customer the cart belongs to.
   */
  customer_id?: string;
  /**
   * The ID of the cart's sales channel. Only products that belong to the same sales channel can be added to the cart. The created order will be associated with the same sales channel.
   */
  sales_channel_id?: string;
  /**
   * The email of the customer the cart belongs to.
   */
  email?: string;
  /**
   * The cart's currency code.
   */
  currency_code: string;
  shipping_address?: StoreCartAddress;
  billing_address?: StoreCartAddress;
  /**
   * The cart's items.
   */
  items?: Array<StoreCartLineItem>;
  /**
   * The cart's shipping methods.
   */
  shipping_methods?: Array<StoreCartShippingMethod>;
  payment_collection?: StorePaymentCollection;
  /**
   * The cart's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the cart was created.
   */
  created_at?: string;
  /**
   * The date the cart was updated.
   */
  updated_at?: string;
  /**
   * The cart items' total including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The cart items' total excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The cart items' tax total excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The cart items' total including taxes and promotions.
   */
  item_total: number;
  /**
   * The cart items' total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The cart items' tax total including promotions.
   */
  item_tax_total: number;
  /**
   * The cart's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The cart's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The cart's tax total excluding promotions.
   */
  original_tax_total: number;
  /**
   * The cart's total including taxes and promotions.
   */
  total: number;
  /**
   * The cart's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The cart's tax total including promotions.
   */
  tax_total: number;
  /**
   * The cart's discount total.
   */
  discount_total: number;
  /**
   * The tax total applied on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The total gift card amount applied on the cart.
   */
  gift_card_total: number;
  /**
   * The total taxes applied on the gift card amount.
   */
  gift_card_tax_total: number;
  /**
   * The cart's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The cart's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The total taxes applied on the cart's shipping amount.
   */
  shipping_tax_total: number;
  /**
   * The cart's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The cart's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The total taxes applied on the cart's shipping amount.
   */
  original_shipping_tax_total: number;
};

/**
 * The address's details.
 */
export type StoreCartAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the customer the address belongs to.
   */
  customer_id?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The item's details.
 */
export type StoreCartLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle?: string;
  /**
   * The item's thumbnail URL.
   */
  thumbnail?: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  product?: StoreProduct;
  /**
   * The ID of the associated product.
   */
  product_id?: string;
  /**
   * The item's product title.
   */
  product_title?: string;
  /**
   * The item's product description.
   */
  product_description?: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle?: string;
  /**
   * The ID of the associated product's type.
   */
  product_type?: string;
  /**
   * The ID of the associated product's collection.
   */
  product_collection?: string;
  /**
   * The item's product handle.
   */
  product_handle?: string;
  variant?: StoreProductVariant;
  /**
   * The ID of the associated product variant.
   */
  variant_id?: string;
  /**
   * The item's variant SKU.
   */
  variant_sku?: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode?: string;
  /**
   * The item's variant title.
   */
  variant_title?: string;
  /**
   * The associated variant's value for the product's options.
   */
  variant_option_values?: {
    [key: string]: unknown;
  };
  /**
   * Whether the item requires shipping.
   */
  requires_shipping: boolean;
  /**
   * Whether the item is discountable.
   */
  is_discountable: boolean;
  /**
   * Whether the item's price includes taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
  /**
   * The price of a single quantity of the item.
   */
  unit_price: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<
    {
      /**
       * The details of the item that the tax line belongs to.
       */
      item: {
        [key: string]: unknown;
      };
      /**
       * The ID of the line item this tax line belongs to.
       */
      item_id: string;
      /**
       * The item's total including taxes and promotions.
       */
      total: number;
      /**
       * The item's total excluding taxes, including promotions.
       */
      subtotal: number;
      /**
       * The tax line's ID.
       */
      id: string;
      /**
       * The tax line's description.
       */
      description?: string;
      /**
       * The ID of the applied tax rate.
       */
      tax_rate_id?: string;
      /**
       * The code that the tax rate is identified by.
       */
      code: string;
      /**
       * The charged rate.
       */
      rate: number;
      /**
       * The ID of the tax provider used to calculate the tax line.
       */
      provider_id?: string;
      /**
       * The date the tax line was created.
       */
      created_at: string;
      /**
       * The date the tax line was updated.
       */
      updated_at: string;
    } & {
      /**
       * The details of the item that the tax line belongs to.
       */
      item: {
        [key: string]: unknown;
      };
    }
  >;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<
    {
      /**
       * The details of the item that the adjustment belongs to.
       */
      item: {
        [key: string]: unknown;
      };
      /**
       * The ID of the item that the adjustment belongs to.
       */
      item_id: string;
      /**
       * The adjustment's ID.
       */
      id: string;
      /**
       * The adjustment's code.
       */
      code?: string;
      /**
       * The adjustment's amount.
       */
      amount: number;
      /**
       * The ID of the associated cart.
       */
      cart_id: string;
      /**
       * The adjustment's description.
       */
      description?: string;
      /**
       * The ID of the applied promotion.
       */
      promotion_id?: string;
      /**
       * The adjustment's provider ID.
       */
      provider_id?: string;
      /**
       * The date the adjustment was created.
       */
      created_at: string;
      /**
       * The date the adjustment was updated.
       */
      updated_at: string;
    } & {
      /**
       * The details of the item that the adjustment belongs to.
       */
      item: {
        [key: string]: unknown;
      };
    }
  >;
  cart: {
    [key: string]: unknown;
  };
  /**
   * The ID of the cart that the line item belongs to.
   */
  cart_id: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the item was created.
   */
  created_at?: string;
  /**
   * The date the item was updated.
   */
  updated_at?: string;
  /**
   * The date the item was deleted.
   */
  deleted_at?: string;
  /**
   * The item's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the item excluding promotions.
   */
  original_tax_total: number;
  /**
   * The item's total including taxes and promotions.
   */
  item_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes of the item including promotions.
   */
  item_tax_total: number;
  /**
   * The item's total including taxes and promotions.
   */
  total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The total taxes of the item including promotions.
   */
  tax_total: number;
  /**
   * The total discount of the item.
   */
  discount_total: number;
  /**
   * The total taxes applied on the discounted amount.
   */
  discount_tax_total: number;
};

/**
 * The cart's details.
 */
export type StoreCartResponse = {
  cart: StoreCart;
};

/**
 * A cart's shipping method.
 */
export type StoreCartShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the cart this shipping method belongs to.
   */
  cart_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id?: string;
  /**
   * The shipping method's data, useful for fulfillment handling by third-party services.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<
    {
      /**
       * The details of the method that the tax line belongs to.
       */
      shipping_method: {
        [key: string]: unknown;
      };
      /**
       * The ID of the shipping method this tax line belongs to.
       */
      shipping_method_id: string;
      /**
       * The method's total including taxes and promotions.
       */
      total: number;
      /**
       * The method's total excluding taxes, including promotions.
       */
      subtotal: number;
      /**
       * The tax line's ID.
       */
      id: string;
      /**
       * The tax line's description.
       */
      description?: string;
      /**
       * The ID of the applied tax rate.
       */
      tax_rate_id?: string;
      /**
       * The code that the tax rate is identified by.
       */
      code: string;
      /**
       * The charged rate.
       */
      rate: number;
      /**
       * The ID of the tax provider used to calculate the tax line.
       */
      provider_id?: string;
      /**
       * The date the tax line was created.
       */
      created_at: string;
      /**
       * The date the tax line was updated.
       */
      updated_at: string;
    } & {
      /**
       * The details of the method that the tax line belongs to.
       */
      shipping_method: {
        [key: string]: unknown;
      };
    }
  >;
  /**
   * The shipping method's adjustments, such as applied promotions.
   */
  adjustments?: Array<
    {
      /**
       * The details of the method that the adjustment belongs to.
       */
      shipping_method: {
        [key: string]: unknown;
      };
      /**
       * The adjustment's ID.
       */
      id: string;
      /**
       * The adjustment's code.
       */
      code?: string;
      /**
       * The adjustment's amount.
       */
      amount: number;
      /**
       * The ID of the associated cart.
       */
      cart_id: string;
      /**
       * The adjustment's description.
       */
      description?: string;
      /**
       * The ID of the applied promotion.
       */
      promotion_id?: string;
      /**
       * The adjustment's provider ID.
       */
      provider_id?: string;
      /**
       * The date the adjustment was created.
       */
      created_at: string;
      /**
       * The date the adjustment was updated.
       */
      updated_at: string;
    } & {
      /**
       * The details of the method that the adjustment belongs to.
       */
      shipping_method: {
        [key: string]: unknown;
      };
    }
  >;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes applied on the shipping method's amount including promotions.
   */
  original_tax_total: number;
  /**
   * The shipping method's total amount including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total amount excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The total taxes applied on the shipping method's amount including promotions.
   */
  tax_total: number;
  /**
   * The total amount discounted.
   */
  discount_total: number;
  /**
   * The taxes applied on the discounted amount.
   */
  discount_tax_total: number;
};

/**
 * The shipping option's details.
 */
export type StoreCartShippingOption = {
  /**
   * The shipping option's ID.
   */
  id: string;
  /**
   * The shipping option's name.
   */
  name: string;
  /**
   * The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider.
   */
  price_type: "flat" | "calculated";
  /**
   * The ID of the service zone the shipping option belongs to.
   */
  service_zone_id: string;
  /**
   * The ID of the fulfillment provider handling this option.
   */
  provider_id: string;
  /**
   * The fulfillment provider's details.
   */
  provider: {
    /**
     * The provider's ID.
     */
    id: string;
    /**
     * Whether the provider is enabled.
     */
    is_enabled: boolean;
  };
  /**
   * The shipping option type's details.
   */
  type: {
    /**
     * The type's ID.
     */
    id: string;
    /**
     * The type's label.
     */
    label: string;
    /**
     * The type's description.
     */
    description: string;
    /**
     * The type's code.
     */
    code: string;
  };
  /**
   * The ID of the associated shipping profile.
   */
  shipping_profile_id: string;
  /**
   * The shipping option's amount.
   */
  amount: number;
  /**
   * The shipping option's data, useful for the provider handling fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
};

/**
 * The collection's details.
 */
export type StoreCollection = {
  /**
   * The collection's ID.
   */
  id: string;
  /**
   * The collection's title.
   */
  title: string;
  /**
   * The collection's handle.
   */
  handle: string;
  /**
   * The date the collection was created.
   */
  created_at: string;
  /**
   * The date the collection was updated.
   */
  updated_at: string;
  /**
   * The date the collection was deleted.
   */
  deleted_at: string;
  /**
   * The collection's products.
   */
  products?: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The collection's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
};

/**
 * The collection's details.
 */
export type StoreCollectionResponse = {
  collection: StoreCollection;
};

/**
 * The details of the cart to be created.
 */
export type StoreCreateCart = {
  /**
   * The ID of the cart's region. This affects the prices and currency of the cart.
   */
  region_id?: string;
  shipping_address?: StoreCartAddress;
  billing_address?: StoreCartAddress;
  /**
   * The email of the cart's customer.
   */
  email?: string;
  /**
   * The cart's currency code. If not provided, the region's currency is used. This affects prices in the cart, as well.
   */
  currency_code?: string;
  /**
   * The cart's items.
   */
  items?: Array<StoreCartLineItem>;
  /**
   * The ID of the sales channel that cart is created in. Only products available in that sales channel can be added to the cart. If not provided, the store's default sales channel is associated with the cart instead.
   */
  sales_channel_id?: string;
  /**
   * The cart's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the customer to create.
 */
export type StoreCreateCustomer = {
  /**
   * The customer's email.
   */
  email: string;
  /**
   * The customer's company name.
   */
  company_name?: string;
  /**
   * The customer's first name.
   */
  first_name?: string;
  /**
   * The customer's last name.
   */
  last_name?: string;
  /**
   * The customer's phone.
   */
  phone?: string;
  /**
   * The customer's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details of the payment collection to create.
 */
export type StoreCreatePaymentCollection = {
  /**
   * The ID of the cart this payment collection is for.
   */
  cart_id: string;
};

/**
 * The details of the return to create.
 */
export type StoreCreateReturn = {
  /**
   * The ID of the order this return is created for.
   */
  order_id: string;
  /**
   * The return's items.
   */
  items: Array<StoreCreateReturnItem>;
  return_shipping: StoreCreateReturnShipping;
  /**
   * A note with more details about the return.
   */
  note?: string;
  /**
   * Whether to mark the return as received.
   */
  receive_now?: boolean;
  /**
   * The ID of the location that items are returned to.
   */
  location_id?: string;
};

/**
 * The details of the line item to create.
 */
export type StoreCreateReturnItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The ID of the associated return reason.
   */
  reason_id?: string;
  /**
   * A note with more details about the returned item.
   */
  note?: string;
};

/**
 * The return's shipping details.
 */
export type StoreCreateReturnShipping = {
  /**
   * The ID of the shipping option to use.
   */
  option_id: string;
  /**
   * The shipping's price.
   */
  price?: number;
};

/**
 * The currency's details.
 */
export type StoreCurrency = {
  /**
   * The currency's code.
   */
  code: string;
  /**
   * The currency's symbol.
   */
  symbol: string;
  /**
   * The currency's symbol native.
   */
  symbol_native: string;
  /**
   * The currency's name.
   */
  name: string;
  /**
   * The currency's decimal digits.
   */
  decimal_digits: number;
  /**
   * The currency's rounding.
   */
  rounding: number;
  /**
   * The date the currency was created.
   */
  created_at: string;
  /**
   * The date the currency was updated.
   */
  updated_at: string;
  /**
   * The date the currency was deleted.
   */
  deleted_at: string;
};

/**
 * The paginated list of currencies.
 */
export type StoreCurrencyListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total count of items.
   */
  count: number;
  /**
   * The list of currencies.
   */
  currencies: Array<StoreCurrency>;
};

/**
 * The currency's details.
 */
export type StoreCurrencyResponse = {
  currency: StoreCurrency;
};

/**
 * The customer's details.
 */
export type StoreCustomer = {
  /**
   * The customer's ID.
   */
  id: string;
  /**
   * The customer's email.
   */
  email: string;
  /**
   * The ID of the address used for billing by default.
   */
  default_billing_address_id: string;
  /**
   * The ID of the address used for shipping by default.
   */
  default_shipping_address_id: string;
  /**
   * The customer's company name.
   */
  company_name: string;
  /**
   * The customer's first name.
   */
  first_name: string;
  /**
   * The customer's last name.
   */
  last_name: string;
  /**
   * The customer's addresses.
   */
  addresses: Array<StoreCustomerAddress>;
  /**
   * The customer's phone.
   */
  phone?: string;
  /**
   * The customer's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the customer was created.
   */
  created_at?: string;
  /**
   * The date the customer was updated.
   */
  updated_at?: string;
  /**
   * The date the customer was deleted.
   */
  deleted_at?: string;
};

/**
 * The customer address's details
 */
export type StoreCustomerAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The address's name.
   */
  address_name: string;
  /**
   * Whether the address is used for shipping by default.
   */
  is_default_shipping: boolean;
  /**
   * Whether the address is used for billing by default.
   */
  is_default_billing: boolean;
  /**
   * The ID of the customer the address belongs to.
   */
  customer_id: string;
  /**
   * The address's company.
   */
  company: string;
  /**
   * The address's first name.
   */
  first_name: string;
  /**
   * The address's last name.
   */
  last_name: string;
  /**
   * The address's first line.
   */
  address_1: string;
  /**
   * The address's second line.
   */
  address_2: string;
  /**
   * The address's city.
   */
  city: string;
  /**
   * The address's country code.
   */
  country_code: string;
  /**
   * The address's province.
   */
  province: string;
  /**
   * The address's postal code.
   */
  postal_code: string;
  /**
   * The address's phone.
   */
  phone: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The paginated list of customer addresses.
 */
export type StoreCustomerAddressListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of addresses.
   */
  addresses: Array<StoreCustomerAddress>;
};

/**
 * The address's details.
 */
export type StoreCustomerAddressResponse = {
  address: StoreCustomerAddress;
};

/**
 * The customer's details.
 */
export type StoreCustomerResponse = {
  customer: StoreCustomer;
};

/**
 * The payment session's details.
 */
export type StoreInitializePaymentSession = {
  /**
   * The ID of the payment provider the customer chose.
   */
  provider_id: string;
  /**
   * The payment's context, such as the customer or address details. If the customer is logged-in, the customer `id` is set in the context under a `customer.id` property.
   */
  context?: {
    [key: string]: unknown;
  };
  /**
   * Any data necessary for the payment provider to process the payment.
   */
  data?: {
    [key: string]: unknown;
  };
};

/**
 * The order's details.
 */
export type StoreOrder = {
  /**
   * The order's ID.
   */
  id: string;
  /**
   * The ID of the associated region.
   */
  region_id: string;
  /**
   * The ID of the customer that placed the order.
   */
  customer_id: string;
  /**
   * The ID of the sales channel the order was placed in.
   */
  sales_channel_id: string;
  /**
   * The email of the customer that placed the order.
   */
  email: string;
  /**
   * The order's currency code.
   */
  currency_code: string;
  /**
   * The order's display ID.
   */
  display_id?: number;
  shipping_address?: StoreOrderAddress;
  billing_address?: StoreOrderAddress;
  /**
   * The order's items.
   */
  items: Array<StoreOrderLineItem>;
  /**
   * The order's shipping methods.
   */
  shipping_methods: Array<StoreOrderShippingMethod>;
  /**
   * The order's payment collections.
   */
  payment_collections?: Array<StorePaymentCollection>;
  /**
   * The order's payment status.
   */
  payment_status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized"
    | "captured"
    | "partially_captured"
    | "partially_refunded"
    | "refunded"
    | "requires_action";
  /**
   * The order's fulfillments.
   */
  fulfillments?: Array<StoreOrderFulfillment>;
  /**
   * The order's fulfillment status.
   */
  fulfillment_status:
    | "canceled"
    | "not_fulfilled"
    | "partially_fulfilled"
    | "fulfilled"
    | "partially_shipped"
    | "shipped"
    | "partially_delivered"
    | "delivered";
  summary: BaseOrderSummary;
  /**
   * The order's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the order was created.
   */
  created_at: string;
  /**
   * The date the order was updated.
   */
  updated_at: string;
  /**
   * The order items' total including taxes, excluding promotions.
   */
  original_item_total: number;
  /**
   * The order items' total excluding taxes, including promotions.
   */
  original_item_subtotal: number;
  /**
   * The total taxes applied on the order items, excluding promotions.
   */
  original_item_tax_total: number;
  /**
   * The order items' total including taxes and promotions.
   */
  item_total: number;
  /**
   * The order items' total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes applied on the order's items, including promotions.
   */
  item_tax_total: number;
  /**
   * The order's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the order excluding promotions.
   */
  original_tax_total: number;
  /**
   * The order's total including taxes and promotions.
   */
  total: number;
  /**
   * The order's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax totals of the order including promotions.
   */
  tax_total: number;
  /**
   * The order's discount total.
   */
  discount_total: number;
  /**
   * The total taxes applied on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The order's gift card total.
   */
  gift_card_total: number;
  /**
   * The total taxes applied on the gift card's amount.
   */
  gift_card_tax_total: number;
  /**
   * The order's shipping total including taxes and promotions.
   */
  shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  shipping_subtotal: number;
  /**
   * The total taxes of the order's shipping including promotions.
   */
  shipping_tax_total: number;
  /**
   * The order's shipping total including taxes, excluding promotions.
   */
  original_shipping_total: number;
  /**
   * The order's shipping total excluding taxes, including promotions.
   */
  original_shipping_subtotal: number;
  /**
   * The total taxes of the order's shipping excluding promotions.
   */
  original_shipping_tax_total: number;
  customer?: StoreCustomer;
  /**
   * The order's transactions.
   */
  transactions?: Array<BaseOrderTransaction>;
};

/**
 * An order address
 */
export type StoreOrderAddress = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The ID of the customer this address belongs to.
   */
  customer_id?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  country?: StoreRegionCountry;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the address was created.
   */
  created_at: string;
  /**
   * The date the address was updated.
   */
  updated_at: string;
};

/**
 * The fulfillment's details.
 */
export type StoreOrderFulfillment = {
  /**
   * The fulfillment's ID.
   */
  id: string;
  /**
   * The ID of the location the items are fulfilled from.
   */
  location_id: string;
  /**
   * The date the items were packed.
   */
  packed_at: string;
  /**
   * The date the items were shipped.
   */
  shipped_at: string;
  /**
   * The date the items were delivered.
   */
  delivered_at: string;
  /**
   * The date the items were canceled.
   */
  canceled_at: string;
  /**
   * Data useful for the fulfillment provider handling it. This is taken from the associated shipping option.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The ID of the fulfillment provider used to handle the fulfillment.
   */
  provider_id: string;
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * The fulfillment's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The date the fulfillment was created.
   */
  created_at: string;
  /**
   * The date the fulfillment was updated.
   */
  updated_at: string;
  /**
   * The fulfillment's requires shipping.
   */
  requires_shipping: boolean;
};

/**
 * The item's details.
 */
export type StoreOrderLineItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's title.
   */
  title: string;
  /**
   * The item's subtitle.
   */
  subtitle: string;
  /**
   * The URL of the item's thumbnail.
   */
  thumbnail: string;
  variant?: StoreProductVariant;
  /**
   * The ID of the associated variant.
   */
  variant_id: string;
  product?: StoreProduct;
  /**
   * The ID of the associated product.
   */
  product_id: string;
  /**
   * The item's product title.
   */
  product_title: string;
  /**
   * The item's product description.
   */
  product_description: string;
  /**
   * The item's product subtitle.
   */
  product_subtitle: string;
  /**
   * The item's product type.
   */
  product_type: string;
  /**
   * The ID of the collection the item's product belongs to.
   */
  product_collection: string;
  /**
   * The item's product handle.
   */
  product_handle: string;
  /**
   * The item's variant SKU.
   */
  variant_sku: string;
  /**
   * The item's variant barcode.
   */
  variant_barcode: string;
  /**
   * The item's variant title.
   */
  variant_title: string;
  /**
   * The values of the item variant's options.
   */
  variant_option_values: {
    [key: string]: unknown;
  };
  /**
   * Whether the item requires shipping.
   */
  requires_shipping: boolean;
  /**
   * Whether the item is discountable.
   */
  is_discountable: boolean;
  /**
   * Whether the item is tax inclusive.
   */
  is_tax_inclusive: boolean;
  /**
   * The original price of the item before a promotion or sale.
   */
  compare_at_unit_price?: number;
  /**
   * The item's unit price.
   */
  unit_price: number;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's tax lines.
   */
  tax_lines?: Array<
    {
      /**
       * The tax line's item.
       */
      item: {
        /**
         * The item's ID.
         */
        id: string;
        /**
         * The item's title.
         */
        title: string;
        /**
         * The item's subtitle.
         */
        subtitle: string;
        /**
         * The item's thumbnail.
         */
        thumbnail: string;
        /**
         * The item's variant.
         */
        variant?: {
          /**
           * The variant's ID.
           */
          id: string;
          /**
           * The variant's title.
           */
          title: string;
          /**
           * The variant's sku.
           */
          sku: string;
          /**
           * The variant's barcode.
           */
          barcode: string;
          /**
           * The variant's ean.
           */
          ean: string;
          /**
           * The variant's upc.
           */
          upc: string;
          /**
           * The variant's allow backorder.
           */
          allow_backorder: boolean;
          /**
           * The variant's manage inventory.
           */
          manage_inventory: boolean;
          /**
           * The variant's inventory quantity.
           */
          inventory_quantity?: number;
          /**
           * The variant's hs code.
           */
          hs_code: string;
          /**
           * The variant's origin country.
           */
          origin_country: string;
          /**
           * The variant's mid code.
           */
          mid_code: string;
          /**
           * The variant's material.
           */
          material: string;
          /**
           * The variant's weight.
           */
          weight: number;
          /**
           * The variant's length.
           */
          length: number;
          /**
           * The variant's height.
           */
          height: number;
          /**
           * The variant's width.
           */
          width: number;
          /**
           * The variant's variant rank.
           */
          variant_rank?: number;
          /**
           * The variant's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The variant's product.
           */
          product?: {
            [key: string]: unknown;
          };
          /**
           * The variant's product id.
           */
          product_id?: string;
          /**
           * The variant's calculated price.
           */
          calculated_price?: {
            [key: string]: unknown;
          };
          /**
           * The variant's created at.
           */
          created_at: string;
          /**
           * The variant's updated at.
           */
          updated_at: string;
          /**
           * The variant's deleted at.
           */
          deleted_at: string;
          /**
           * The variant's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's variant id.
         */
        variant_id: string;
        /**
         * The item's product.
         */
        product?: {
          /**
           * The product's ID.
           */
          id: string;
          /**
           * The product's title.
           */
          title: string;
          /**
           * The product's handle.
           */
          handle: string;
          /**
           * The product's subtitle.
           */
          subtitle: string;
          /**
           * The product's description.
           */
          description: string;
          /**
           * The product's is giftcard.
           */
          is_giftcard: boolean;
          /**
           * The product's status.
           */
          status: "draft" | "proposed" | "published" | "rejected";
          /**
           * The product's thumbnail.
           */
          thumbnail: string;
          /**
           * The product's width.
           */
          width: number;
          /**
           * The product's weight.
           */
          weight: number;
          /**
           * The product's length.
           */
          length: number;
          /**
           * The product's height.
           */
          height: number;
          /**
           * The product's origin country.
           */
          origin_country: string;
          /**
           * The product's hs code.
           */
          hs_code: string;
          /**
           * The product's mid code.
           */
          mid_code: string;
          /**
           * The product's material.
           */
          material: string;
          /**
           * The product's collection.
           */
          collection?: {
            [key: string]: unknown;
          };
          /**
           * The product's collection id.
           */
          collection_id: string;
          /**
           * The product's categories.
           */
          categories?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's type.
           */
          type?: {
            [key: string]: unknown;
          };
          /**
           * The product's type id.
           */
          type_id: string;
          /**
           * The product's tags.
           */
          tags?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's variants.
           */
          variants: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's images.
           */
          images: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's discountable.
           */
          discountable: boolean;
          /**
           * The product's external id.
           */
          external_id: string;
          /**
           * The product's created at.
           */
          created_at: string;
          /**
           * The product's updated at.
           */
          updated_at: string;
          /**
           * The product's deleted at.
           */
          deleted_at: string;
          /**
           * The product's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's product id.
         */
        product_id: string;
        /**
         * The item's product title.
         */
        product_title: string;
        /**
         * The item's product description.
         */
        product_description: string;
        /**
         * The item's product subtitle.
         */
        product_subtitle: string;
        /**
         * The item's product type.
         */
        product_type: string;
        /**
         * The item's product collection.
         */
        product_collection: string;
        /**
         * The item's product handle.
         */
        product_handle: string;
        /**
         * The item's variant sku.
         */
        variant_sku: string;
        /**
         * The item's variant barcode.
         */
        variant_barcode: string;
        /**
         * The item's variant title.
         */
        variant_title: string;
        /**
         * The item's variant option values.
         */
        variant_option_values: {
          [key: string]: unknown;
        };
        /**
         * The item's requires shipping.
         */
        requires_shipping: boolean;
        /**
         * The item's is discountable.
         */
        is_discountable: boolean;
        /**
         * The item's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The item's compare at unit price.
         */
        compare_at_unit_price?: number;
        /**
         * The item's unit price.
         */
        unit_price: number;
        /**
         * The item's quantity.
         */
        quantity: number;
        /**
         * The item's tax lines.
         */
        tax_lines?: Array<{
          /**
           * The tax line's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The tax line's item id.
           */
          item_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The item's adjustments.
         */
        adjustments?: Array<{
          /**
           * The adjustment's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's item id.
           */
          item_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The item's detail.
         */
        detail: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's item id.
           */
          item_id: string;
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The detail's quantity.
           */
          quantity: number;
          /**
           * The detail's fulfilled quantity.
           */
          fulfilled_quantity: number;
          /**
           * The detail's delivered quantity.
           */
          delivered_quantity: number;
          /**
           * The detail's shipped quantity.
           */
          shipped_quantity: number;
          /**
           * The detail's return requested quantity.
           */
          return_requested_quantity: number;
          /**
           * The detail's return received quantity.
           */
          return_received_quantity: number;
          /**
           * The detail's return dismissed quantity.
           */
          return_dismissed_quantity: number;
          /**
           * The detail's written off quantity.
           */
          written_off_quantity: number;
          /**
           * The detail's metadata.
           */
          metadata: {
            [key: string]: unknown;
          };
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        };
        /**
         * The item's created at.
         */
        created_at: string;
        /**
         * The item's updated at.
         */
        updated_at: string;
        /**
         * The item's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The item's original total.
         */
        original_total: number;
        /**
         * The item's original subtotal.
         */
        original_subtotal: number;
        /**
         * The item's original tax total.
         */
        original_tax_total: number;
        /**
         * The item's item total.
         */
        item_total: number;
        /**
         * The item's item subtotal.
         */
        item_subtotal: number;
        /**
         * The item's item tax total.
         */
        item_tax_total: number;
        /**
         * The item's total.
         */
        total: number;
        /**
         * The item's subtotal.
         */
        subtotal: number;
        /**
         * The item's tax total.
         */
        tax_total: number;
        /**
         * The item's discount total.
         */
        discount_total: number;
        /**
         * The item's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The item's refundable total.
         */
        refundable_total: number;
        /**
         * The item's refundable total per unit.
         */
        refundable_total_per_unit: number;
      };
      /**
       * The tax line's item id.
       */
      item_id: string;
      /**
       * The tax line's total.
       */
      total: number;
      /**
       * The tax line's subtotal.
       */
      subtotal: number;
      /**
       * The tax line's ID.
       */
      id: string;
      /**
       * The tax line's description.
       */
      description?: string;
      /**
       * The tax line's tax rate id.
       */
      tax_rate_id?: string;
      /**
       * The tax line's code.
       */
      code: string;
      /**
       * The tax line's rate.
       */
      rate: number;
      /**
       * The tax line's provider id.
       */
      provider_id?: string;
      /**
       * The tax line's created at.
       */
      created_at: string;
      /**
       * The tax line's updated at.
       */
      updated_at: string;
    } & {
      /**
       * The tax line's item.
       */
      item: {
        /**
         * The item's variant.
         */
        variant?: {
          /**
           * The variant's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The variant's product.
           */
          product?: {
            [key: string]: unknown;
          };
          /**
           * The variant's length.
           */
          length: number;
          /**
           * The variant's title.
           */
          title: string;
          /**
           * The variant's ID.
           */
          id: string;
          /**
           * The variant's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
          /**
           * The variant's created at.
           */
          created_at: string;
          /**
           * The variant's updated at.
           */
          updated_at: string;
          /**
           * The variant's product id.
           */
          product_id?: string;
          /**
           * The variant's width.
           */
          width: number;
          /**
           * The variant's weight.
           */
          weight: number;
          /**
           * The variant's height.
           */
          height: number;
          /**
           * The variant's origin country.
           */
          origin_country: string;
          /**
           * The variant's hs code.
           */
          hs_code: string;
          /**
           * The variant's mid code.
           */
          mid_code: string;
          /**
           * The variant's material.
           */
          material: string;
          /**
           * The variant's deleted at.
           */
          deleted_at: string;
          /**
           * The variant's sku.
           */
          sku: string;
          /**
           * The variant's barcode.
           */
          barcode: string;
          /**
           * The variant's ean.
           */
          ean: string;
          /**
           * The variant's upc.
           */
          upc: string;
          /**
           * The variant's allow backorder.
           */
          allow_backorder: boolean;
          /**
           * The variant's manage inventory.
           */
          manage_inventory: boolean;
          /**
           * The variant's inventory quantity.
           */
          inventory_quantity?: number;
          /**
           * The variant's variant rank.
           */
          variant_rank?: number;
          /**
           * The variant's calculated price.
           */
          calculated_price?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's product.
         */
        product?: {
          /**
           * The product's collection.
           */
          collection?: {
            [key: string]: unknown;
          };
          /**
           * The product's categories.
           */
          categories?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's variants.
           */
          variants: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's type.
           */
          type?: {
            [key: string]: unknown;
          };
          /**
           * The product's tags.
           */
          tags?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's images.
           */
          images: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's length.
           */
          length: number;
          /**
           * The product's title.
           */
          title: string;
          /**
           * The product's status.
           */
          status: "draft" | "proposed" | "published" | "rejected";
          /**
           * The product's description.
           */
          description: string;
          /**
           * The product's ID.
           */
          id: string;
          /**
           * The product's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
          /**
           * The product's created at.
           */
          created_at: string;
          /**
           * The product's updated at.
           */
          updated_at: string;
          /**
           * The product's subtitle.
           */
          subtitle: string;
          /**
           * The product's thumbnail.
           */
          thumbnail: string;
          /**
           * The product's handle.
           */
          handle: string;
          /**
           * The product's is giftcard.
           */
          is_giftcard: boolean;
          /**
           * The product's width.
           */
          width: number;
          /**
           * The product's weight.
           */
          weight: number;
          /**
           * The product's height.
           */
          height: number;
          /**
           * The product's origin country.
           */
          origin_country: string;
          /**
           * The product's hs code.
           */
          hs_code: string;
          /**
           * The product's mid code.
           */
          mid_code: string;
          /**
           * The product's material.
           */
          material: string;
          /**
           * The product's collection id.
           */
          collection_id: string;
          /**
           * The product's type id.
           */
          type_id: string;
          /**
           * The product's discountable.
           */
          discountable: boolean;
          /**
           * The product's external id.
           */
          external_id: string;
          /**
           * The product's deleted at.
           */
          deleted_at: string;
        };
        /**
         * The item's tax lines.
         */
        tax_lines?: Array<
          {
            /**
             * The tax line's item.
             */
            item: {
              [key: string]: unknown;
            };
            /**
             * The tax line's item id.
             */
            item_id: string;
            /**
             * The tax line's total.
             */
            total: number;
            /**
             * The tax line's subtotal.
             */
            subtotal: number;
            /**
             * The tax line's ID.
             */
            id: string;
            /**
             * The tax line's description.
             */
            description?: string;
            /**
             * The tax line's tax rate id.
             */
            tax_rate_id?: string;
            /**
             * The tax line's code.
             */
            code: string;
            /**
             * The tax line's rate.
             */
            rate: number;
            /**
             * The tax line's provider id.
             */
            provider_id?: string;
            /**
             * The tax line's created at.
             */
            created_at: string;
            /**
             * The tax line's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The tax line's item.
             */
            item: {
              [key: string]: unknown;
            };
          }
        >;
        /**
         * The item's adjustments.
         */
        adjustments?: Array<
          {
            /**
             * The adjustment's item.
             */
            item: {
              [key: string]: unknown;
            };
            /**
             * The adjustment's item id.
             */
            item_id: string;
            /**
             * The adjustment's ID.
             */
            id: string;
            /**
             * The adjustment's code.
             */
            code?: string;
            /**
             * The adjustment's amount.
             */
            amount: number;
            /**
             * The adjustment's order id.
             */
            order_id: string;
            /**
             * The adjustment's description.
             */
            description?: string;
            /**
             * The adjustment's promotion id.
             */
            promotion_id?: string;
            /**
             * The adjustment's provider id.
             */
            provider_id?: string;
            /**
             * The adjustment's created at.
             */
            created_at: string;
            /**
             * The adjustment's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The adjustment's item.
             */
            item: {
              [key: string]: unknown;
            };
          }
        >;
        detail: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's item id.
           */
          item_id: string;
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The detail's quantity.
           */
          quantity: number;
          /**
           * The detail's fulfilled quantity.
           */
          fulfilled_quantity: number;
          /**
           * The detail's delivered quantity.
           */
          delivered_quantity: number;
          /**
           * The detail's shipped quantity.
           */
          shipped_quantity: number;
          /**
           * The detail's return requested quantity.
           */
          return_requested_quantity: number;
          /**
           * The detail's return received quantity.
           */
          return_received_quantity: number;
          /**
           * The detail's return dismissed quantity.
           */
          return_dismissed_quantity: number;
          /**
           * The detail's written off quantity.
           */
          written_off_quantity: number;
          /**
           * The detail's metadata.
           */
          metadata: {
            [key: string]: unknown;
          };
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's title.
         */
        title: string;
        /**
         * The item's ID.
         */
        id: string;
        /**
         * The item's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The item's created at.
         */
        created_at: string;
        /**
         * The item's updated at.
         */
        updated_at: string;
        /**
         * The item's item total.
         */
        item_total: number;
        /**
         * The item's item subtotal.
         */
        item_subtotal: number;
        /**
         * The item's item tax total.
         */
        item_tax_total: number;
        /**
         * The item's original total.
         */
        original_total: number;
        /**
         * The item's original subtotal.
         */
        original_subtotal: number;
        /**
         * The item's original tax total.
         */
        original_tax_total: number;
        /**
         * The item's total.
         */
        total: number;
        /**
         * The item's subtotal.
         */
        subtotal: number;
        /**
         * The item's tax total.
         */
        tax_total: number;
        /**
         * The item's discount total.
         */
        discount_total: number;
        /**
         * The item's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The item's subtitle.
         */
        subtitle: string;
        /**
         * The item's thumbnail.
         */
        thumbnail: string;
        /**
         * The item's variant id.
         */
        variant_id: string;
        /**
         * The item's product id.
         */
        product_id: string;
        /**
         * The item's product title.
         */
        product_title: string;
        /**
         * The item's product description.
         */
        product_description: string;
        /**
         * The item's product subtitle.
         */
        product_subtitle: string;
        /**
         * The item's product type.
         */
        product_type: string;
        /**
         * The item's product collection.
         */
        product_collection: string;
        /**
         * The item's product handle.
         */
        product_handle: string;
        /**
         * The item's variant sku.
         */
        variant_sku: string;
        /**
         * The item's variant barcode.
         */
        variant_barcode: string;
        /**
         * The item's variant title.
         */
        variant_title: string;
        /**
         * The item's variant option values.
         */
        variant_option_values: {
          [key: string]: unknown;
        };
        /**
         * The item's requires shipping.
         */
        requires_shipping: boolean;
        /**
         * The item's is discountable.
         */
        is_discountable: boolean;
        /**
         * The item's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The item's compare at unit price.
         */
        compare_at_unit_price?: number;
        /**
         * The item's unit price.
         */
        unit_price: number;
        /**
         * The item's quantity.
         */
        quantity: number;
        /**
         * The item's refundable total.
         */
        refundable_total: number;
        /**
         * The item's refundable total per unit.
         */
        refundable_total_per_unit: number;
      };
    }
  >;
  /**
   * The item's adjustments.
   */
  adjustments?: Array<
    {
      /**
       * The adjustment's item.
       */
      item: {
        /**
         * The item's ID.
         */
        id: string;
        /**
         * The item's title.
         */
        title: string;
        /**
         * The item's subtitle.
         */
        subtitle: string;
        /**
         * The item's thumbnail.
         */
        thumbnail: string;
        /**
         * The item's variant.
         */
        variant?: {
          /**
           * The variant's ID.
           */
          id: string;
          /**
           * The variant's title.
           */
          title: string;
          /**
           * The variant's sku.
           */
          sku: string;
          /**
           * The variant's barcode.
           */
          barcode: string;
          /**
           * The variant's ean.
           */
          ean: string;
          /**
           * The variant's upc.
           */
          upc: string;
          /**
           * The variant's allow backorder.
           */
          allow_backorder: boolean;
          /**
           * The variant's manage inventory.
           */
          manage_inventory: boolean;
          /**
           * The variant's inventory quantity.
           */
          inventory_quantity?: number;
          /**
           * The variant's hs code.
           */
          hs_code: string;
          /**
           * The variant's origin country.
           */
          origin_country: string;
          /**
           * The variant's mid code.
           */
          mid_code: string;
          /**
           * The variant's material.
           */
          material: string;
          /**
           * The variant's weight.
           */
          weight: number;
          /**
           * The variant's length.
           */
          length: number;
          /**
           * The variant's height.
           */
          height: number;
          /**
           * The variant's width.
           */
          width: number;
          /**
           * The variant's variant rank.
           */
          variant_rank?: number;
          /**
           * The variant's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The variant's product.
           */
          product?: {
            [key: string]: unknown;
          };
          /**
           * The variant's product id.
           */
          product_id?: string;
          /**
           * The variant's calculated price.
           */
          calculated_price?: {
            [key: string]: unknown;
          };
          /**
           * The variant's created at.
           */
          created_at: string;
          /**
           * The variant's updated at.
           */
          updated_at: string;
          /**
           * The variant's deleted at.
           */
          deleted_at: string;
          /**
           * The variant's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's variant id.
         */
        variant_id: string;
        /**
         * The item's product.
         */
        product?: {
          /**
           * The product's ID.
           */
          id: string;
          /**
           * The product's title.
           */
          title: string;
          /**
           * The product's handle.
           */
          handle: string;
          /**
           * The product's subtitle.
           */
          subtitle: string;
          /**
           * The product's description.
           */
          description: string;
          /**
           * The product's is giftcard.
           */
          is_giftcard: boolean;
          /**
           * The product's status.
           */
          status: "draft" | "proposed" | "published" | "rejected";
          /**
           * The product's thumbnail.
           */
          thumbnail: string;
          /**
           * The product's width.
           */
          width: number;
          /**
           * The product's weight.
           */
          weight: number;
          /**
           * The product's length.
           */
          length: number;
          /**
           * The product's height.
           */
          height: number;
          /**
           * The product's origin country.
           */
          origin_country: string;
          /**
           * The product's hs code.
           */
          hs_code: string;
          /**
           * The product's mid code.
           */
          mid_code: string;
          /**
           * The product's material.
           */
          material: string;
          /**
           * The product's collection.
           */
          collection?: {
            [key: string]: unknown;
          };
          /**
           * The product's collection id.
           */
          collection_id: string;
          /**
           * The product's categories.
           */
          categories?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's type.
           */
          type?: {
            [key: string]: unknown;
          };
          /**
           * The product's type id.
           */
          type_id: string;
          /**
           * The product's tags.
           */
          tags?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's variants.
           */
          variants: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's images.
           */
          images: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's discountable.
           */
          discountable: boolean;
          /**
           * The product's external id.
           */
          external_id: string;
          /**
           * The product's created at.
           */
          created_at: string;
          /**
           * The product's updated at.
           */
          updated_at: string;
          /**
           * The product's deleted at.
           */
          deleted_at: string;
          /**
           * The product's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's product id.
         */
        product_id: string;
        /**
         * The item's product title.
         */
        product_title: string;
        /**
         * The item's product description.
         */
        product_description: string;
        /**
         * The item's product subtitle.
         */
        product_subtitle: string;
        /**
         * The item's product type.
         */
        product_type: string;
        /**
         * The item's product collection.
         */
        product_collection: string;
        /**
         * The item's product handle.
         */
        product_handle: string;
        /**
         * The item's variant sku.
         */
        variant_sku: string;
        /**
         * The item's variant barcode.
         */
        variant_barcode: string;
        /**
         * The item's variant title.
         */
        variant_title: string;
        /**
         * The item's variant option values.
         */
        variant_option_values: {
          [key: string]: unknown;
        };
        /**
         * The item's requires shipping.
         */
        requires_shipping: boolean;
        /**
         * The item's is discountable.
         */
        is_discountable: boolean;
        /**
         * The item's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The item's compare at unit price.
         */
        compare_at_unit_price?: number;
        /**
         * The item's unit price.
         */
        unit_price: number;
        /**
         * The item's quantity.
         */
        quantity: number;
        /**
         * The item's tax lines.
         */
        tax_lines?: Array<{
          /**
           * The tax line's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The tax line's item id.
           */
          item_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The item's adjustments.
         */
        adjustments?: Array<{
          /**
           * The adjustment's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's item id.
           */
          item_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The item's detail.
         */
        detail: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's item id.
           */
          item_id: string;
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The detail's quantity.
           */
          quantity: number;
          /**
           * The detail's fulfilled quantity.
           */
          fulfilled_quantity: number;
          /**
           * The detail's delivered quantity.
           */
          delivered_quantity: number;
          /**
           * The detail's shipped quantity.
           */
          shipped_quantity: number;
          /**
           * The detail's return requested quantity.
           */
          return_requested_quantity: number;
          /**
           * The detail's return received quantity.
           */
          return_received_quantity: number;
          /**
           * The detail's return dismissed quantity.
           */
          return_dismissed_quantity: number;
          /**
           * The detail's written off quantity.
           */
          written_off_quantity: number;
          /**
           * The detail's metadata.
           */
          metadata: {
            [key: string]: unknown;
          };
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        };
        /**
         * The item's created at.
         */
        created_at: string;
        /**
         * The item's updated at.
         */
        updated_at: string;
        /**
         * The item's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The item's original total.
         */
        original_total: number;
        /**
         * The item's original subtotal.
         */
        original_subtotal: number;
        /**
         * The item's original tax total.
         */
        original_tax_total: number;
        /**
         * The item's item total.
         */
        item_total: number;
        /**
         * The item's item subtotal.
         */
        item_subtotal: number;
        /**
         * The item's item tax total.
         */
        item_tax_total: number;
        /**
         * The item's total.
         */
        total: number;
        /**
         * The item's subtotal.
         */
        subtotal: number;
        /**
         * The item's tax total.
         */
        tax_total: number;
        /**
         * The item's discount total.
         */
        discount_total: number;
        /**
         * The item's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The item's refundable total.
         */
        refundable_total: number;
        /**
         * The item's refundable total per unit.
         */
        refundable_total_per_unit: number;
      };
      /**
       * The adjustment's item id.
       */
      item_id: string;
      /**
       * The adjustment's ID.
       */
      id: string;
      /**
       * The adjustment's code.
       */
      code?: string;
      /**
       * The adjustment's amount.
       */
      amount: number;
      /**
       * The adjustment's order id.
       */
      order_id: string;
      /**
       * The adjustment's description.
       */
      description?: string;
      /**
       * The adjustment's promotion id.
       */
      promotion_id?: string;
      /**
       * The adjustment's provider id.
       */
      provider_id?: string;
      /**
       * The adjustment's created at.
       */
      created_at: string;
      /**
       * The adjustment's updated at.
       */
      updated_at: string;
    } & {
      /**
       * The adjustment's item.
       */
      item: {
        /**
         * The item's variant.
         */
        variant?: {
          /**
           * The variant's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The variant's product.
           */
          product?: {
            [key: string]: unknown;
          };
          /**
           * The variant's length.
           */
          length: number;
          /**
           * The variant's title.
           */
          title: string;
          /**
           * The variant's ID.
           */
          id: string;
          /**
           * The variant's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
          /**
           * The variant's created at.
           */
          created_at: string;
          /**
           * The variant's updated at.
           */
          updated_at: string;
          /**
           * The variant's product id.
           */
          product_id?: string;
          /**
           * The variant's width.
           */
          width: number;
          /**
           * The variant's weight.
           */
          weight: number;
          /**
           * The variant's height.
           */
          height: number;
          /**
           * The variant's origin country.
           */
          origin_country: string;
          /**
           * The variant's hs code.
           */
          hs_code: string;
          /**
           * The variant's mid code.
           */
          mid_code: string;
          /**
           * The variant's material.
           */
          material: string;
          /**
           * The variant's deleted at.
           */
          deleted_at: string;
          /**
           * The variant's sku.
           */
          sku: string;
          /**
           * The variant's barcode.
           */
          barcode: string;
          /**
           * The variant's ean.
           */
          ean: string;
          /**
           * The variant's upc.
           */
          upc: string;
          /**
           * The variant's allow backorder.
           */
          allow_backorder: boolean;
          /**
           * The variant's manage inventory.
           */
          manage_inventory: boolean;
          /**
           * The variant's inventory quantity.
           */
          inventory_quantity?: number;
          /**
           * The variant's variant rank.
           */
          variant_rank?: number;
          /**
           * The variant's calculated price.
           */
          calculated_price?: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's product.
         */
        product?: {
          /**
           * The product's collection.
           */
          collection?: {
            [key: string]: unknown;
          };
          /**
           * The product's categories.
           */
          categories?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's variants.
           */
          variants: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's type.
           */
          type?: {
            [key: string]: unknown;
          };
          /**
           * The product's tags.
           */
          tags?: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's options.
           */
          options: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's images.
           */
          images: Array<{
            [key: string]: unknown;
          }>;
          /**
           * The product's length.
           */
          length: number;
          /**
           * The product's title.
           */
          title: string;
          /**
           * The product's status.
           */
          status: "draft" | "proposed" | "published" | "rejected";
          /**
           * The product's description.
           */
          description: string;
          /**
           * The product's ID.
           */
          id: string;
          /**
           * The product's metadata.
           */
          metadata?: {
            [key: string]: unknown;
          };
          /**
           * The product's created at.
           */
          created_at: string;
          /**
           * The product's updated at.
           */
          updated_at: string;
          /**
           * The product's subtitle.
           */
          subtitle: string;
          /**
           * The product's thumbnail.
           */
          thumbnail: string;
          /**
           * The product's handle.
           */
          handle: string;
          /**
           * The product's is giftcard.
           */
          is_giftcard: boolean;
          /**
           * The product's width.
           */
          width: number;
          /**
           * The product's weight.
           */
          weight: number;
          /**
           * The product's height.
           */
          height: number;
          /**
           * The product's origin country.
           */
          origin_country: string;
          /**
           * The product's hs code.
           */
          hs_code: string;
          /**
           * The product's mid code.
           */
          mid_code: string;
          /**
           * The product's material.
           */
          material: string;
          /**
           * The product's collection id.
           */
          collection_id: string;
          /**
           * The product's type id.
           */
          type_id: string;
          /**
           * The product's discountable.
           */
          discountable: boolean;
          /**
           * The product's external id.
           */
          external_id: string;
          /**
           * The product's deleted at.
           */
          deleted_at: string;
        };
        /**
         * The item's tax lines.
         */
        tax_lines?: Array<
          {
            /**
             * The tax line's item.
             */
            item: {
              [key: string]: unknown;
            };
            /**
             * The tax line's item id.
             */
            item_id: string;
            /**
             * The tax line's total.
             */
            total: number;
            /**
             * The tax line's subtotal.
             */
            subtotal: number;
            /**
             * The tax line's ID.
             */
            id: string;
            /**
             * The tax line's description.
             */
            description?: string;
            /**
             * The tax line's tax rate id.
             */
            tax_rate_id?: string;
            /**
             * The tax line's code.
             */
            code: string;
            /**
             * The tax line's rate.
             */
            rate: number;
            /**
             * The tax line's provider id.
             */
            provider_id?: string;
            /**
             * The tax line's created at.
             */
            created_at: string;
            /**
             * The tax line's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The tax line's item.
             */
            item: {
              [key: string]: unknown;
            };
          }
        >;
        /**
         * The item's adjustments.
         */
        adjustments?: Array<
          {
            /**
             * The adjustment's item.
             */
            item: {
              [key: string]: unknown;
            };
            /**
             * The adjustment's item id.
             */
            item_id: string;
            /**
             * The adjustment's ID.
             */
            id: string;
            /**
             * The adjustment's code.
             */
            code?: string;
            /**
             * The adjustment's amount.
             */
            amount: number;
            /**
             * The adjustment's order id.
             */
            order_id: string;
            /**
             * The adjustment's description.
             */
            description?: string;
            /**
             * The adjustment's promotion id.
             */
            promotion_id?: string;
            /**
             * The adjustment's provider id.
             */
            provider_id?: string;
            /**
             * The adjustment's created at.
             */
            created_at: string;
            /**
             * The adjustment's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The adjustment's item.
             */
            item: {
              [key: string]: unknown;
            };
          }
        >;
        detail: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's item id.
           */
          item_id: string;
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The detail's quantity.
           */
          quantity: number;
          /**
           * The detail's fulfilled quantity.
           */
          fulfilled_quantity: number;
          /**
           * The detail's delivered quantity.
           */
          delivered_quantity: number;
          /**
           * The detail's shipped quantity.
           */
          shipped_quantity: number;
          /**
           * The detail's return requested quantity.
           */
          return_requested_quantity: number;
          /**
           * The detail's return received quantity.
           */
          return_received_quantity: number;
          /**
           * The detail's return dismissed quantity.
           */
          return_dismissed_quantity: number;
          /**
           * The detail's written off quantity.
           */
          written_off_quantity: number;
          /**
           * The detail's metadata.
           */
          metadata: {
            [key: string]: unknown;
          };
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The detail's item.
           */
          item: {
            [key: string]: unknown;
          };
        };
        /**
         * The item's title.
         */
        title: string;
        /**
         * The item's ID.
         */
        id: string;
        /**
         * The item's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The item's created at.
         */
        created_at: string;
        /**
         * The item's updated at.
         */
        updated_at: string;
        /**
         * The item's item total.
         */
        item_total: number;
        /**
         * The item's item subtotal.
         */
        item_subtotal: number;
        /**
         * The item's item tax total.
         */
        item_tax_total: number;
        /**
         * The item's original total.
         */
        original_total: number;
        /**
         * The item's original subtotal.
         */
        original_subtotal: number;
        /**
         * The item's original tax total.
         */
        original_tax_total: number;
        /**
         * The item's total.
         */
        total: number;
        /**
         * The item's subtotal.
         */
        subtotal: number;
        /**
         * The item's tax total.
         */
        tax_total: number;
        /**
         * The item's discount total.
         */
        discount_total: number;
        /**
         * The item's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The item's subtitle.
         */
        subtitle: string;
        /**
         * The item's thumbnail.
         */
        thumbnail: string;
        /**
         * The item's variant id.
         */
        variant_id: string;
        /**
         * The item's product id.
         */
        product_id: string;
        /**
         * The item's product title.
         */
        product_title: string;
        /**
         * The item's product description.
         */
        product_description: string;
        /**
         * The item's product subtitle.
         */
        product_subtitle: string;
        /**
         * The item's product type.
         */
        product_type: string;
        /**
         * The item's product collection.
         */
        product_collection: string;
        /**
         * The item's product handle.
         */
        product_handle: string;
        /**
         * The item's variant sku.
         */
        variant_sku: string;
        /**
         * The item's variant barcode.
         */
        variant_barcode: string;
        /**
         * The item's variant title.
         */
        variant_title: string;
        /**
         * The item's variant option values.
         */
        variant_option_values: {
          [key: string]: unknown;
        };
        /**
         * The item's requires shipping.
         */
        requires_shipping: boolean;
        /**
         * The item's is discountable.
         */
        is_discountable: boolean;
        /**
         * The item's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The item's compare at unit price.
         */
        compare_at_unit_price?: number;
        /**
         * The item's unit price.
         */
        unit_price: number;
        /**
         * The item's quantity.
         */
        quantity: number;
        /**
         * The item's refundable total.
         */
        refundable_total: number;
        /**
         * The item's refundable total per unit.
         */
        refundable_total_per_unit: number;
      };
    }
  >;
  /**
   * The item's detail.
   */
  detail: BaseOrderItemDetail & {
    /**
     * The detail's item.
     */
    item: {
      /**
       * The item's variant.
       */
      variant?: {
        /**
         * The variant's options.
         */
        options: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The variant's product.
         */
        product?: {
          [key: string]: unknown;
        };
        /**
         * The variant's length.
         */
        length: number;
        /**
         * The variant's title.
         */
        title: string;
        /**
         * The variant's ID.
         */
        id: string;
        /**
         * The variant's metadata.
         */
        metadata?: {
          [key: string]: unknown;
        };
        /**
         * The variant's created at.
         */
        created_at: string;
        /**
         * The variant's updated at.
         */
        updated_at: string;
        /**
         * The variant's product id.
         */
        product_id?: string;
        /**
         * The variant's width.
         */
        width: number;
        /**
         * The variant's weight.
         */
        weight: number;
        /**
         * The variant's height.
         */
        height: number;
        /**
         * The variant's origin country.
         */
        origin_country: string;
        /**
         * The variant's hs code.
         */
        hs_code: string;
        /**
         * The variant's mid code.
         */
        mid_code: string;
        /**
         * The variant's material.
         */
        material: string;
        /**
         * The variant's deleted at.
         */
        deleted_at: string;
        /**
         * The variant's sku.
         */
        sku: string;
        /**
         * The variant's barcode.
         */
        barcode: string;
        /**
         * The variant's ean.
         */
        ean: string;
        /**
         * The variant's upc.
         */
        upc: string;
        /**
         * The variant's allow backorder.
         */
        allow_backorder: boolean;
        /**
         * The variant's manage inventory.
         */
        manage_inventory: boolean;
        /**
         * The variant's inventory quantity.
         */
        inventory_quantity?: number;
        /**
         * The variant's variant rank.
         */
        variant_rank?: number;
        /**
         * The variant's calculated price.
         */
        calculated_price?: {
          [key: string]: unknown;
        };
      };
      /**
       * The item's product.
       */
      product?: {
        /**
         * The product's collection.
         */
        collection?: {
          [key: string]: unknown;
        };
        /**
         * The product's categories.
         */
        categories?: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The product's variants.
         */
        variants: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The product's type.
         */
        type?: {
          [key: string]: unknown;
        };
        /**
         * The product's tags.
         */
        tags?: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The product's options.
         */
        options: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The product's images.
         */
        images: Array<{
          [key: string]: unknown;
        }>;
        /**
         * The product's length.
         */
        length: number;
        /**
         * The product's title.
         */
        title: string;
        /**
         * The product's status.
         */
        status: "draft" | "proposed" | "published" | "rejected";
        /**
         * The product's description.
         */
        description: string;
        /**
         * The product's ID.
         */
        id: string;
        /**
         * The product's metadata.
         */
        metadata?: {
          [key: string]: unknown;
        };
        /**
         * The product's created at.
         */
        created_at: string;
        /**
         * The product's updated at.
         */
        updated_at: string;
        /**
         * The product's subtitle.
         */
        subtitle: string;
        /**
         * The product's thumbnail.
         */
        thumbnail: string;
        /**
         * The product's handle.
         */
        handle: string;
        /**
         * The product's is giftcard.
         */
        is_giftcard: boolean;
        /**
         * The product's width.
         */
        width: number;
        /**
         * The product's weight.
         */
        weight: number;
        /**
         * The product's height.
         */
        height: number;
        /**
         * The product's origin country.
         */
        origin_country: string;
        /**
         * The product's hs code.
         */
        hs_code: string;
        /**
         * The product's mid code.
         */
        mid_code: string;
        /**
         * The product's material.
         */
        material: string;
        /**
         * The product's collection id.
         */
        collection_id: string;
        /**
         * The product's type id.
         */
        type_id: string;
        /**
         * The product's discountable.
         */
        discountable: boolean;
        /**
         * The product's external id.
         */
        external_id: string;
        /**
         * The product's deleted at.
         */
        deleted_at: string;
      };
      /**
       * The item's tax lines.
       */
      tax_lines?: Array<
        {
          /**
           * The tax line's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The tax line's item id.
           */
          item_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The tax line's item.
           */
          item: {
            [key: string]: unknown;
          };
        }
      >;
      /**
       * The item's adjustments.
       */
      adjustments?: Array<
        {
          /**
           * The adjustment's item.
           */
          item: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's item id.
           */
          item_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The adjustment's item.
           */
          item: {
            [key: string]: unknown;
          };
        }
      >;
      detail: {
        /**
         * The detail's ID.
         */
        id: string;
        /**
         * The detail's item id.
         */
        item_id: string;
        /**
         * The detail's item.
         */
        item: {
          [key: string]: unknown;
        };
        /**
         * The detail's quantity.
         */
        quantity: number;
        /**
         * The detail's fulfilled quantity.
         */
        fulfilled_quantity: number;
        /**
         * The detail's delivered quantity.
         */
        delivered_quantity: number;
        /**
         * The detail's shipped quantity.
         */
        shipped_quantity: number;
        /**
         * The detail's return requested quantity.
         */
        return_requested_quantity: number;
        /**
         * The detail's return received quantity.
         */
        return_received_quantity: number;
        /**
         * The detail's return dismissed quantity.
         */
        return_dismissed_quantity: number;
        /**
         * The detail's written off quantity.
         */
        written_off_quantity: number;
        /**
         * The detail's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The detail's created at.
         */
        created_at: string;
        /**
         * The detail's updated at.
         */
        updated_at: string;
      } & {
        /**
         * The detail's item.
         */
        item: {
          [key: string]: unknown;
        };
      };
      /**
       * The item's title.
       */
      title: string;
      /**
       * The item's ID.
       */
      id: string;
      /**
       * The item's metadata.
       */
      metadata: {
        [key: string]: unknown;
      };
      /**
       * The item's created at.
       */
      created_at: string;
      /**
       * The item's updated at.
       */
      updated_at: string;
      /**
       * The item's item total.
       */
      item_total: number;
      /**
       * The item's item subtotal.
       */
      item_subtotal: number;
      /**
       * The item's item tax total.
       */
      item_tax_total: number;
      /**
       * The item's original total.
       */
      original_total: number;
      /**
       * The item's original subtotal.
       */
      original_subtotal: number;
      /**
       * The item's original tax total.
       */
      original_tax_total: number;
      /**
       * The item's total.
       */
      total: number;
      /**
       * The item's subtotal.
       */
      subtotal: number;
      /**
       * The item's tax total.
       */
      tax_total: number;
      /**
       * The item's discount total.
       */
      discount_total: number;
      /**
       * The item's discount tax total.
       */
      discount_tax_total: number;
      /**
       * The item's subtitle.
       */
      subtitle: string;
      /**
       * The item's thumbnail.
       */
      thumbnail: string;
      /**
       * The item's variant id.
       */
      variant_id: string;
      /**
       * The item's product id.
       */
      product_id: string;
      /**
       * The item's product title.
       */
      product_title: string;
      /**
       * The item's product description.
       */
      product_description: string;
      /**
       * The item's product subtitle.
       */
      product_subtitle: string;
      /**
       * The item's product type.
       */
      product_type: string;
      /**
       * The item's product collection.
       */
      product_collection: string;
      /**
       * The item's product handle.
       */
      product_handle: string;
      /**
       * The item's variant sku.
       */
      variant_sku: string;
      /**
       * The item's variant barcode.
       */
      variant_barcode: string;
      /**
       * The item's variant title.
       */
      variant_title: string;
      /**
       * The item's variant option values.
       */
      variant_option_values: {
        [key: string]: unknown;
      };
      /**
       * The item's requires shipping.
       */
      requires_shipping: boolean;
      /**
       * The item's is discountable.
       */
      is_discountable: boolean;
      /**
       * The item's is tax inclusive.
       */
      is_tax_inclusive: boolean;
      /**
       * The item's compare at unit price.
       */
      compare_at_unit_price?: number;
      /**
       * The item's unit price.
       */
      unit_price: number;
      /**
       * The item's quantity.
       */
      quantity: number;
      /**
       * The item's refundable total.
       */
      refundable_total: number;
      /**
       * The item's refundable total per unit.
       */
      refundable_total_per_unit: number;
    };
  };
  /**
   * The date the item was created.
   */
  created_at: string;
  /**
   * The date the item was updated.
   */
  updated_at: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The item's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The total taxes of the item, excluding promotions.
   */
  original_tax_total: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_total: number;
  /**
   * The item's total excluding taxes, including promotions.
   */
  item_subtotal: number;
  /**
   * The total taxes of the item, including promotions.
   */
  item_tax_total: number;
  /**
   * The item's total, including taxes and promotions.
   */
  total: number;
  /**
   * The item's subtotal excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The tax total of the item including promotions.
   */
  tax_total: number;
  /**
   * The total discount amount of the item.
   */
  discount_total: number;
  /**
   * The total taxes applied on the discounted amount.
   */
  discount_tax_total: number;
  /**
   * The total refundable amount of the item's total.
   */
  refundable_total: number;
  /**
   * The total refundable amount of the item's total for a single quantity.
   */
  refundable_total_per_unit: number;
};

/**
 * The order's details.
 */
export type StoreOrderResponse = {
  order: StoreOrder;
};

/**
 * The shipping method's details.
 */
export type StoreOrderShippingMethod = {
  /**
   * The shipping method's ID.
   */
  id: string;
  /**
   * The ID of the order the shipping method belongs to.
   */
  order_id: string;
  /**
   * The shipping method's name.
   */
  name: string;
  /**
   * The shipping method's description.
   */
  description?: string;
  /**
   * The shipping method's amount.
   */
  amount: number;
  /**
   * Whether the shipping method's amount includes applied taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The ID of the shipping option this method was created from.
   */
  shipping_option_id: string;
  /**
   * The shipping method's data, useful for fulfillment provider handling its fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
  /**
   * The shipping method's tax lines.
   */
  tax_lines?: Array<
    {
      /**
       * The tax line's shipping method.
       */
      shipping_method: {
        /**
         * The shipping method's ID.
         */
        id: string;
        /**
         * The shipping method's order id.
         */
        order_id: string;
        /**
         * The shipping method's name.
         */
        name: string;
        /**
         * The shipping method's description.
         */
        description?: string;
        /**
         * The shipping method's amount.
         */
        amount: number;
        /**
         * The shipping method's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The shipping method's shipping option id.
         */
        shipping_option_id: string;
        /**
         * The shipping method's data.
         */
        data: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's tax lines.
         */
        tax_lines?: Array<{
          /**
           * The tax line's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The tax line's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The shipping method's adjustments.
         */
        adjustments?: Array<{
          /**
           * The adjustment's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The shipping method's original total.
         */
        original_total: number;
        /**
         * The shipping method's original subtotal.
         */
        original_subtotal: number;
        /**
         * The shipping method's original tax total.
         */
        original_tax_total: number;
        /**
         * The shipping method's total.
         */
        total: number;
        /**
         * The shipping method's detail.
         */
        detail?: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The detail's claim id.
           */
          claim_id?: string;
          /**
           * The detail's exchange id.
           */
          exchange_id?: string;
          /**
           * The detail's return id.
           */
          return_id?: string;
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        };
        /**
         * The shipping method's subtotal.
         */
        subtotal: number;
        /**
         * The shipping method's tax total.
         */
        tax_total: number;
        /**
         * The shipping method's discount total.
         */
        discount_total: number;
        /**
         * The shipping method's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The shipping method's created at.
         */
        created_at: string;
        /**
         * The shipping method's updated at.
         */
        updated_at: string;
      };
      /**
       * The tax line's shipping method id.
       */
      shipping_method_id: string;
      /**
       * The tax line's total.
       */
      total: number;
      /**
       * The tax line's subtotal.
       */
      subtotal: number;
      /**
       * The tax line's ID.
       */
      id: string;
      /**
       * The tax line's description.
       */
      description?: string;
      /**
       * The tax line's tax rate id.
       */
      tax_rate_id?: string;
      /**
       * The tax line's code.
       */
      code: string;
      /**
       * The tax line's rate.
       */
      rate: number;
      /**
       * The tax line's provider id.
       */
      provider_id?: string;
      /**
       * The tax line's created at.
       */
      created_at: string;
      /**
       * The tax line's updated at.
       */
      updated_at: string;
    } & {
      /**
       * The tax line's shipping method.
       */
      shipping_method: {
        /**
         * The shipping method's tax lines.
         */
        tax_lines?: Array<
          {
            /**
             * The tax line's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
            /**
             * The tax line's shipping method id.
             */
            shipping_method_id: string;
            /**
             * The tax line's total.
             */
            total: number;
            /**
             * The tax line's subtotal.
             */
            subtotal: number;
            /**
             * The tax line's ID.
             */
            id: string;
            /**
             * The tax line's description.
             */
            description?: string;
            /**
             * The tax line's tax rate id.
             */
            tax_rate_id?: string;
            /**
             * The tax line's code.
             */
            code: string;
            /**
             * The tax line's rate.
             */
            rate: number;
            /**
             * The tax line's provider id.
             */
            provider_id?: string;
            /**
             * The tax line's created at.
             */
            created_at: string;
            /**
             * The tax line's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The tax line's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
          }
        >;
        /**
         * The shipping method's adjustments.
         */
        adjustments?: Array<
          {
            /**
             * The adjustment's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
            /**
             * The adjustment's shipping method id.
             */
            shipping_method_id: string;
            /**
             * The adjustment's ID.
             */
            id: string;
            /**
             * The adjustment's code.
             */
            code?: string;
            /**
             * The adjustment's amount.
             */
            amount: number;
            /**
             * The adjustment's order id.
             */
            order_id: string;
            /**
             * The adjustment's description.
             */
            description?: string;
            /**
             * The adjustment's promotion id.
             */
            promotion_id?: string;
            /**
             * The adjustment's provider id.
             */
            provider_id?: string;
            /**
             * The adjustment's created at.
             */
            created_at: string;
            /**
             * The adjustment's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The adjustment's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
          }
        >;
        detail?: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The detail's claim id.
           */
          claim_id?: string;
          /**
           * The detail's exchange id.
           */
          exchange_id?: string;
          /**
           * The detail's return id.
           */
          return_id?: string;
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
        };
        /**
         * The shipping method's ID.
         */
        id: string;
        /**
         * The shipping method's order id.
         */
        order_id: string;
        /**
         * The shipping method's name.
         */
        name: string;
        /**
         * The shipping method's description.
         */
        description?: string;
        /**
         * The shipping method's amount.
         */
        amount: number;
        /**
         * The shipping method's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The shipping method's shipping option id.
         */
        shipping_option_id: string;
        /**
         * The shipping method's data.
         */
        data: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's original total.
         */
        original_total: number;
        /**
         * The shipping method's original subtotal.
         */
        original_subtotal: number;
        /**
         * The shipping method's original tax total.
         */
        original_tax_total: number;
        /**
         * The shipping method's total.
         */
        total: number;
        /**
         * The shipping method's subtotal.
         */
        subtotal: number;
        /**
         * The shipping method's tax total.
         */
        tax_total: number;
        /**
         * The shipping method's discount total.
         */
        discount_total: number;
        /**
         * The shipping method's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The shipping method's created at.
         */
        created_at: string;
        /**
         * The shipping method's updated at.
         */
        updated_at: string;
      };
    }
  >;
  /**
   * The shipping method's adjustments.
   */
  adjustments?: Array<
    {
      /**
       * The adjustment's shipping method.
       */
      shipping_method: {
        /**
         * The shipping method's ID.
         */
        id: string;
        /**
         * The shipping method's order id.
         */
        order_id: string;
        /**
         * The shipping method's name.
         */
        name: string;
        /**
         * The shipping method's description.
         */
        description?: string;
        /**
         * The shipping method's amount.
         */
        amount: number;
        /**
         * The shipping method's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The shipping method's shipping option id.
         */
        shipping_option_id: string;
        /**
         * The shipping method's data.
         */
        data: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's tax lines.
         */
        tax_lines?: Array<{
          /**
           * The tax line's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The tax line's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The shipping method's adjustments.
         */
        adjustments?: Array<{
          /**
           * The adjustment's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        }>;
        /**
         * The shipping method's original total.
         */
        original_total: number;
        /**
         * The shipping method's original subtotal.
         */
        original_subtotal: number;
        /**
         * The shipping method's original tax total.
         */
        original_tax_total: number;
        /**
         * The shipping method's total.
         */
        total: number;
        /**
         * The shipping method's detail.
         */
        detail?: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The detail's claim id.
           */
          claim_id?: string;
          /**
           * The detail's exchange id.
           */
          exchange_id?: string;
          /**
           * The detail's return id.
           */
          return_id?: string;
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        };
        /**
         * The shipping method's subtotal.
         */
        subtotal: number;
        /**
         * The shipping method's tax total.
         */
        tax_total: number;
        /**
         * The shipping method's discount total.
         */
        discount_total: number;
        /**
         * The shipping method's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The shipping method's created at.
         */
        created_at: string;
        /**
         * The shipping method's updated at.
         */
        updated_at: string;
      };
      /**
       * The adjustment's shipping method id.
       */
      shipping_method_id: string;
      /**
       * The adjustment's ID.
       */
      id: string;
      /**
       * The adjustment's code.
       */
      code?: string;
      /**
       * The adjustment's amount.
       */
      amount: number;
      /**
       * The adjustment's order id.
       */
      order_id: string;
      /**
       * The adjustment's description.
       */
      description?: string;
      /**
       * The adjustment's promotion id.
       */
      promotion_id?: string;
      /**
       * The adjustment's provider id.
       */
      provider_id?: string;
      /**
       * The adjustment's created at.
       */
      created_at: string;
      /**
       * The adjustment's updated at.
       */
      updated_at: string;
    } & {
      /**
       * The adjustment's shipping method.
       */
      shipping_method: {
        /**
         * The shipping method's tax lines.
         */
        tax_lines?: Array<
          {
            /**
             * The tax line's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
            /**
             * The tax line's shipping method id.
             */
            shipping_method_id: string;
            /**
             * The tax line's total.
             */
            total: number;
            /**
             * The tax line's subtotal.
             */
            subtotal: number;
            /**
             * The tax line's ID.
             */
            id: string;
            /**
             * The tax line's description.
             */
            description?: string;
            /**
             * The tax line's tax rate id.
             */
            tax_rate_id?: string;
            /**
             * The tax line's code.
             */
            code: string;
            /**
             * The tax line's rate.
             */
            rate: number;
            /**
             * The tax line's provider id.
             */
            provider_id?: string;
            /**
             * The tax line's created at.
             */
            created_at: string;
            /**
             * The tax line's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The tax line's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
          }
        >;
        /**
         * The shipping method's adjustments.
         */
        adjustments?: Array<
          {
            /**
             * The adjustment's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
            /**
             * The adjustment's shipping method id.
             */
            shipping_method_id: string;
            /**
             * The adjustment's ID.
             */
            id: string;
            /**
             * The adjustment's code.
             */
            code?: string;
            /**
             * The adjustment's amount.
             */
            amount: number;
            /**
             * The adjustment's order id.
             */
            order_id: string;
            /**
             * The adjustment's description.
             */
            description?: string;
            /**
             * The adjustment's promotion id.
             */
            promotion_id?: string;
            /**
             * The adjustment's provider id.
             */
            provider_id?: string;
            /**
             * The adjustment's created at.
             */
            created_at: string;
            /**
             * The adjustment's updated at.
             */
            updated_at: string;
          } & {
            /**
             * The adjustment's shipping method.
             */
            shipping_method: {
              [key: string]: unknown;
            };
          }
        >;
        detail?: {
          /**
           * The detail's ID.
           */
          id: string;
          /**
           * The detail's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The detail's claim id.
           */
          claim_id?: string;
          /**
           * The detail's exchange id.
           */
          exchange_id?: string;
          /**
           * The detail's return id.
           */
          return_id?: string;
          /**
           * The detail's created at.
           */
          created_at: string;
          /**
           * The detail's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The detail's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
        };
        /**
         * The shipping method's ID.
         */
        id: string;
        /**
         * The shipping method's order id.
         */
        order_id: string;
        /**
         * The shipping method's name.
         */
        name: string;
        /**
         * The shipping method's description.
         */
        description?: string;
        /**
         * The shipping method's amount.
         */
        amount: number;
        /**
         * The shipping method's is tax inclusive.
         */
        is_tax_inclusive: boolean;
        /**
         * The shipping method's shipping option id.
         */
        shipping_option_id: string;
        /**
         * The shipping method's data.
         */
        data: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's metadata.
         */
        metadata: {
          [key: string]: unknown;
        };
        /**
         * The shipping method's original total.
         */
        original_total: number;
        /**
         * The shipping method's original subtotal.
         */
        original_subtotal: number;
        /**
         * The shipping method's original tax total.
         */
        original_tax_total: number;
        /**
         * The shipping method's total.
         */
        total: number;
        /**
         * The shipping method's subtotal.
         */
        subtotal: number;
        /**
         * The shipping method's tax total.
         */
        tax_total: number;
        /**
         * The shipping method's discount total.
         */
        discount_total: number;
        /**
         * The shipping method's discount tax total.
         */
        discount_tax_total: number;
        /**
         * The shipping method's created at.
         */
        created_at: string;
        /**
         * The shipping method's updated at.
         */
        updated_at: string;
      };
    }
  >;
  /**
   * The shipping method's total including taxes, excluding promotions.
   */
  original_total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  original_subtotal: number;
  /**
   * The shipping method's total taxes excluding promotions.
   */
  original_tax_total: number;
  /**
   * The shipping method's total including taxes and promotions.
   */
  total: number;
  /**
   * The shipping method's total excluding taxes, including promotions.
   */
  subtotal: number;
  /**
   * The shipping method's tax total including promotions.
   */
  tax_total: number;
  /**
   * The total discounts applied on the shipping method.
   */
  discount_total: number;
  /**
   * The taxes applied on the discount amount.
   */
  discount_tax_total: number;
  /**
   * The date the shipping method was created.
   */
  created_at: string;
  /**
   * The date the shipping method was updated.
   */
  updated_at: string;
  /**
   * Details of changes to a shipping method.
   */
  detail?: BaseOrderShippingDetail & {
    /**
     * The detail's shipping method.
     */
    shipping_method: {
      /**
       * The shipping method's tax lines.
       */
      tax_lines?: Array<
        {
          /**
           * The tax line's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The tax line's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The tax line's total.
           */
          total: number;
          /**
           * The tax line's subtotal.
           */
          subtotal: number;
          /**
           * The tax line's ID.
           */
          id: string;
          /**
           * The tax line's description.
           */
          description?: string;
          /**
           * The tax line's tax rate id.
           */
          tax_rate_id?: string;
          /**
           * The tax line's code.
           */
          code: string;
          /**
           * The tax line's rate.
           */
          rate: number;
          /**
           * The tax line's provider id.
           */
          provider_id?: string;
          /**
           * The tax line's created at.
           */
          created_at: string;
          /**
           * The tax line's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The tax line's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
        }
      >;
      /**
       * The shipping method's adjustments.
       */
      adjustments?: Array<
        {
          /**
           * The adjustment's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
          /**
           * The adjustment's shipping method id.
           */
          shipping_method_id: string;
          /**
           * The adjustment's ID.
           */
          id: string;
          /**
           * The adjustment's code.
           */
          code?: string;
          /**
           * The adjustment's amount.
           */
          amount: number;
          /**
           * The adjustment's order id.
           */
          order_id: string;
          /**
           * The adjustment's description.
           */
          description?: string;
          /**
           * The adjustment's promotion id.
           */
          promotion_id?: string;
          /**
           * The adjustment's provider id.
           */
          provider_id?: string;
          /**
           * The adjustment's created at.
           */
          created_at: string;
          /**
           * The adjustment's updated at.
           */
          updated_at: string;
        } & {
          /**
           * The adjustment's shipping method.
           */
          shipping_method: {
            [key: string]: unknown;
          };
        }
      >;
      detail?: {
        /**
         * The detail's ID.
         */
        id: string;
        /**
         * The detail's shipping method id.
         */
        shipping_method_id: string;
        /**
         * The detail's shipping method.
         */
        shipping_method: {
          [key: string]: unknown;
        };
        /**
         * The detail's claim id.
         */
        claim_id?: string;
        /**
         * The detail's exchange id.
         */
        exchange_id?: string;
        /**
         * The detail's return id.
         */
        return_id?: string;
        /**
         * The detail's created at.
         */
        created_at: string;
        /**
         * The detail's updated at.
         */
        updated_at: string;
      } & {
        /**
         * The detail's shipping method.
         */
        shipping_method: {
          [key: string]: unknown;
        };
      };
      /**
       * The shipping method's ID.
       */
      id: string;
      /**
       * The shipping method's order id.
       */
      order_id: string;
      /**
       * The shipping method's name.
       */
      name: string;
      /**
       * The shipping method's description.
       */
      description?: string;
      /**
       * The shipping method's amount.
       */
      amount: number;
      /**
       * The shipping method's is tax inclusive.
       */
      is_tax_inclusive: boolean;
      /**
       * The shipping method's shipping option id.
       */
      shipping_option_id: string;
      /**
       * The shipping method's data.
       */
      data: {
        [key: string]: unknown;
      };
      /**
       * The shipping method's metadata.
       */
      metadata: {
        [key: string]: unknown;
      };
      /**
       * The shipping method's original total.
       */
      original_total: number;
      /**
       * The shipping method's original subtotal.
       */
      original_subtotal: number;
      /**
       * The shipping method's original tax total.
       */
      original_tax_total: number;
      /**
       * The shipping method's total.
       */
      total: number;
      /**
       * The shipping method's subtotal.
       */
      subtotal: number;
      /**
       * The shipping method's tax total.
       */
      tax_total: number;
      /**
       * The shipping method's discount total.
       */
      discount_total: number;
      /**
       * The shipping method's discount tax total.
       */
      discount_tax_total: number;
      /**
       * The shipping method's created at.
       */
      created_at: string;
      /**
       * The shipping method's updated at.
       */
      updated_at: string;
    };
  };
};

/**
 * The payment collection's details.
 */
export type StorePaymentCollection = {
  /**
   * The payment collection's ID.
   */
  id: string;
  /**
   * The payment collection's currency code.
   */
  currency_code: string;
  /**
   * The ID of the region this payment collection is associated with.
   */
  region_id: string;
  /**
   * The total amount to be paid.
   */
  amount: number;
  /**
   * The total authorized amount of the collection's payments.
   */
  authorized_amount?: number;
  /**
   * The total captured amount of the collection's payments.
   */
  captured_amount?: number;
  /**
   * The total refunded amount of the collection's payments.
   */
  refunded_amount?: number;
  /**
   * The date the payment collection was completed.
   */
  completed_at?: string;
  /**
   * The date the payment collection was created.
   */
  created_at?: string;
  /**
   * The date the payment collection was updated.
   */
  updated_at?: string;
  /**
   * The payment collection's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The payment collection's status.
   */
  status:
    | "canceled"
    | "not_paid"
    | "awaiting"
    | "authorized"
    | "partially_authorized";
  /**
   * The payment provider used to process the collection's payments and sessions.
   */
  payment_providers: Array<StorePaymentProvider>;
  /**
   * The payment collection's payment sessions.
   */
  payment_sessions?: Array<StorePaymentSession>;
  /**
   * The payment collection's payments.
   */
  payments?: Array<BasePayment>;
};

/**
 * The payment collection's details.
 */
export type StorePaymentCollectionResponse = {
  payment_collection: StorePaymentCollection;
};

/**
 * The payment provider's details
 */
export type StorePaymentProvider = {
  /**
   * The payment provider's ID.
   */
  id: string;
};

/**
 * The payment session's details.
 */
export type StorePaymentSession = {
  /**
   * The payment session's ID.
   */
  id: string;
  /**
   * The payment session's amount.
   */
  amount: number;
  /**
   * The payment session's currency code.
   */
  currency_code: string;
  /**
   * The ID of the payment provider processing this session.
   */
  provider_id: string;
  /**
   * The payment session's data, useful for the payment provider processing the payment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The context around the payment, such as the customer's details.
   */
  context?: {
    [key: string]: unknown;
  };
  /**
   * The payment session's status.
   */
  status:
    | "authorized"
    | "captured"
    | "canceled"
    | "pending"
    | "requires_more"
    | "error";
  /**
   * The date the payment session was authorized.
   */
  authorized_at?: string;
  payment_collection?: {
    [key: string]: unknown;
  };
  payment?: BasePayment;
};

/**
 * The product's details.
 */
export type StoreProduct = {
  /**
   * The product's categories.
   */
  categories?: Array<{
    [key: string]: unknown;
  }>;
  type?: {
    [key: string]: unknown;
  };
  /**
   * The product's length.
   */
  length: number;
  /**
   * The product's title.
   */
  title: string;
  /**
   * The product's status.
   */
  status: "draft" | "proposed" | "published" | "rejected";
  /**
   * The product's options.
   */
  options: Array<StoreProductOption>;
  /**
   * The product's description.
   */
  description: string;
  /**
   * The product's ID.
   */
  id: string;
  /**
   * The product's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the product was created.
   */
  created_at: string;
  /**
   * The date the product was updated.
   */
  updated_at: string;
  /**
   * The product's variants.
   */
  variants: Array<StoreProductVariant>;
  /**
   * The product's handle.
   */
  handle: string;
  /**
   * The product's subtitle.
   */
  subtitle: string;
  /**
   * Whether the product is a gift card.
   */
  is_giftcard: boolean;
  /**
   * The product's thumbnail URL.
   */
  thumbnail: string;
  /**
   * The product's width.
   */
  width: number;
  /**
   * The product's weight.
   */
  weight: number;
  /**
   * The product's height.
   */
  height: number;
  /**
   * The product's origin country.
   */
  origin_country: string;
  /**
   * The product's HS code.
   */
  hs_code: string;
  /**
   * The product's MID code.
   */
  mid_code: string;
  /**
   * The product's material.
   */
  material: string;
  collection?: StoreCollection;
  /**
   * The ID of the collection that the product belongs to.
   */
  collection_id: string;
  /**
   * The ID of the product's type.
   */
  type_id: string;
  /**
   * The product's tags.
   */
  tags?: Array<StoreProductTag>;
  /**
   * The product's images.
   */
  images: Array<StoreProductImage>;
  /**
   * Whether the product can be discounted.
   */
  discountable: boolean;
  /**
   * The ID of the product in an external service or system.
   */
  external_id: string;
  /**
   * The date the product was deleted.
   */
  deleted_at: string;
};

/**
 * The category's details.
 */
export type StoreProductCategory = {
  /**
   * The category's products.
   */
  products?: Array<StoreProduct>;
  /**
   * The category's ID.
   */
  id: string;
  /**
   * The category's name.
   */
  name: string;
  /**
   * The category's description.
   */
  description: string;
  /**
   * The category's handle.
   */
  handle: string;
  /**
   * The category's rank.
   */
  rank: number;
  /**
   * The ID of the category's parent.
   */
  parent_category_id: string;
  parent_category: {
    [key: string]: unknown;
  };
  /**
   * The category's children.
   */
  category_children: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The category's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the category was created.
   */
  created_at: string;
  /**
   * The date the category was updated.
   */
  updated_at: string;
  /**
   * The date the category was deleted.
   */
  deleted_at: string;
};

/**
 * The paginated list of product categories.
 */
export type StoreProductCategoryListResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The list of product categories.
   */
  product_categories: Array<StoreProductCategory>;
};

/**
 * The product category's details.
 */
export type StoreProductCategoryResponse = {
  product_category: StoreProductCategory;
};

/**
 * The image's details.
 */
export type StoreProductImage = {
  /**
   * The image's ID.
   */
  id: string;
  /**
   * The image's URL.
   */
  url: string;
  /**
   * The date the image was created.
   */
  created_at?: string;
  /**
   * The date the image was updated.
   */
  updated_at?: string;
  /**
   * The date the image was deleted.
   */
  deleted_at?: string;
  /**
   * The image's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The product option's details.
 */
export type StoreProductOption = {
  /**
   * The option's ID.
   */
  id: string;
  /**
   * The option's title.
   */
  title: string;
  product?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the product this option belongs to.
   */
  product_id?: string;
  /**
   * The option's values.
   */
  values?: Array<StoreProductOptionValue>;
  /**
   * The option's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the product option was created.
   */
  created_at?: string;
  /**
   * The date the product option was updated.
   */
  updated_at?: string;
  /**
   * The date the product option was deleted.
   */
  deleted_at?: string;
};

/**
 * The product option value's details.
 */
export type StoreProductOptionValue = {
  /**
   * The value's ID.
   */
  id: string;
  /**
   * The value.
   */
  value: string;
  option?: {
    [key: string]: unknown;
  };
  /**
   * The ID of the option this value belongs to.
   */
  option_id?: string;
  /**
   * The value's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the value was created.
   */
  created_at?: string;
  /**
   * The date the value was updated.
   */
  updated_at?: string;
  /**
   * The date the value was deleted.
   */
  deleted_at?: string;
};

/**
 * The product's details.
 */
export type StoreProductResponse = {
  product: StoreProduct;
};

/**
 * The tag's details.
 */
export type StoreProductTag = {
  /**
   * The tag's ID.
   */
  id: string;
  /**
   * The tag's value.
   */
  value: string;
  /**
   * The date the tag was created.
   */
  created_at: string;
  /**
   * The date the tag was updated.
   */
  updated_at: string;
  /**
   * The date the tag was deleted.
   */
  deleted_at?: string;
  /**
   * The tag's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The variant's details.
 */
export type StoreProductVariant = {
  /**
   * The variant's options.
   */
  options: Array<StoreProductOptionValue>;
  product?: {
    [key: string]: unknown;
  };
  /**
   * The variant's length.
   */
  length: number;
  /**
   * The variant's title.
   */
  title: string;
  /**
   * The variant's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The variant's ID.
   */
  id: string;
  /**
   * The variant's width.
   */
  width: number;
  /**
   * The variant's weight.
   */
  weight: number;
  /**
   * The variant's height.
   */
  height: number;
  /**
   * The variant's origin country.
   */
  origin_country: string;
  /**
   * The variant's HS code.
   */
  hs_code: string;
  /**
   * The variant's MID code.
   */
  mid_code: string;
  /**
   * The variant's material.
   */
  material: string;
  /**
   * The date the variant was created.
   */
  created_at: string;
  /**
   * The date the variant was updated.
   */
  updated_at: string;
  /**
   * The date the variant was deleted.
   */
  deleted_at: string;
  /**
   * The ID of the product this variant belongs to.
   */
  product_id?: string;
  /**
   * The variant's SKU.
   */
  sku: string;
  /**
   * The variant's barcode.
   */
  barcode: string;
  /**
   * The variant's EAN.
   */
  ean: string;
  /**
   * The variant's UPC.
   */
  upc: string;
  /**
   * Whether the variant can be ordered even if it's not in stock.
   */
  allow_backorder: boolean;
  /**
   * Whether Medusa manages the variant's inventory. If disabled, the variant is always considered in stock.
   */
  manage_inventory: boolean;
  /**
   * The variant's inventory quantity. This property is only available if you pass `+variants.inventory_quantity` in the `fields` query parameter.
   */
  inventory_quantity?: number;
  /**
   * The variant's rank among its siblings.
   */
  variant_rank?: number;
  calculated_price?: BaseCalculatedPriceSet;
};

/**
 * The region's details.
 */
export type StoreRegion = {
  /**
   * The region's ID.
   */
  id: string;
  /**
   * The region's name.
   */
  name: string;
  /**
   * The region's currency code.
   */
  currency_code: string;
  /**
   * Whether taxes are calculated automatically during checkout for carts that belong to this region.
   */
  automatic_taxes?: boolean;
  /**
   * The region's countries.
   */
  countries?: Array<BaseRegionCountry>;
  /**
   * The region's payment providers.
   */
  payment_providers?: Array<AdminPaymentProvider>;
  /**
   * The region's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the region was created.
   */
  created_at?: string;
  /**
   * The date the region was updated.
   */
  updated_at?: string;
};

/**
 * The country's details.
 */
export type StoreRegionCountry = {
  /**
   * The country's ID.
   */
  id: string;
  /**
   * The country's ISO 2.
   */
  iso_2?: string;
  /**
   * The country's ISO 3.
   */
  iso_3?: string;
  /**
   * The country's num code.
   */
  num_code?: string;
  /**
   * The country's name.
   */
  name?: string;
  /**
   * The country's display name.
   */
  display_name?: string;
};

/**
 * The return's details.
 */
export type StoreReturn = {
  /**
   * The return's ID.
   */
  id: string;
  /**
   * The ID of the order this return is created for.
   */
  order_id: string;
  /**
   * The return's status.
   */
  status?: string;
  /**
   * The ID of the associated exchange.
   */
  exchange_id?: string;
  /**
   * The ID of the location the items are returned to.
   */
  location_id?: string;
  /**
   * The ID of the associated claim.
   */
  claim_id?: string;
  /**
   * The return's display ID.
   */
  display_id: number;
  /**
   * The return's refunded amount.
   */
  refund_amount?: number;
  /**
   * The return's items.
   */
  items: Array<StoreReturnItem>;
  /**
   * The date the return was received.
   */
  received_at: string;
  /**
   * The date the return was created.
   */
  created_at: string;
  /**
   * The date the return was updated.
   */
  canceled_at: string;
};

/**
 * The return item's details.
 */
export type StoreReturnItem = {
  /**
   * The item's ID.
   */
  id: string;
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's received quantity.
   */
  received_quantity: number;
  /**
   * The item's damaged quantity.
   */
  damaged_quantity: number;
  /**
   * The ID of the item's reason.
   */
  reason_id?: string;
  /**
   * A note with more details on why the item is returned.
   */
  note?: string;
  /**
   * The ID of the item in the order.
   */
  item_id: string;
  /**
   * The ID of the return this item belongs to.
   */
  return_id: string;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The return reason's details.
 */
export type StoreReturnReason = {
  /**
   * The return reason's ID.
   */
  id: string;
  /**
   * The return reason's value.
   */
  value: string;
  /**
   * The return reason's label.
   */
  label: string;
  /**
   * The return reason's description.
   */
  description?: string;
  /**
   * The return reason's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The date the return reason was created.
   */
  created_at: string;
  /**
   * The date the return reason was updated.
   */
  updated_at: string;
};

/**
 * The return reason's details.
 */
export type StoreReturnReasonResponse = {
  return_reason: StoreReturnReason;
};

/**
 * The return's details.
 */
export type StoreReturnResponse = {
  return: StoreReturn;
};

/**
 * The shipping option's details.
 */
export type StoreShippingOption = {
  /**
   * The shipping option's ID.
   */
  id: string;
  /**
   * The shipping option's name.
   */
  name: string;
  /**
   * The shipping option's price type. If it's `flat`, the price is fixed and is set in the `prices` property. If it's `calculated`, the price is calculated on checkout by the associated fulfillment provider.
   */
  price_type: "flat" | "calculated";
  /**
   * The ID of the service zone the shipping option belongs to.
   */
  service_zone_id: string;
  /**
   * The ID of the fulfillment provider handling this option.
   */
  provider_id: string;
  provider: BaseFulfillmentProvider;
  /**
   * The ID of the shipping option's type.
   */
  shipping_option_type_id: string;
  type: StoreShippingOptionType;
  /**
   * The ID of the associated shipping profile.
   */
  shipping_profile_id: string;
  /**
   * The shipping option's amount.
   */
  amount: number;
  /**
   * Whether the amount includes taxes.
   */
  is_tax_inclusive: boolean;
  /**
   * The shipping option's data, useful for the provider handling fulfillment.
   */
  data: {
    [key: string]: unknown;
  };
  /**
   * The shipping option's metadata, can hold custom key-value pairs.
   */
  metadata: {
    [key: string]: unknown;
  };
};

/**
 * The shipping option's details.
 */
export type StoreShippingOptionListResponse = {
  /**
   * The shipping option's shipping options.
   */
  shipping_options: Array<StoreCartShippingOption>;
};

/**
 * The shipping option type's details.
 */
export type StoreShippingOptionType = {
  /**
   * The type's ID.
   */
  id: string;
  /**
   * The type's label.
   */
  label: string;
  /**
   * The type's description.
   */
  description: string;
  /**
   * The type's code.
   */
  code: string;
  /**
   * The ID of the associated shipping option.
   */
  shipping_option_id: string;
  /**
   * The date the type was created.
   */
  created_at: string;
  /**
   * The date the type was updated.
   */
  updated_at: string;
  /**
   * The date the type was deleted.
   */
  deleted_at: string;
};

/**
 * The details to update in the line item.
 */
export type StoreUpdateCartLineItem = {
  /**
   * The item's quantity.
   */
  quantity: number;
  /**
   * The item's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in the customer.
 */
export type StoreUpdateCustomer = {
  /**
   * The customer's company name.
   */
  company_name?: string;
  /**
   * The customer's first name.
   */
  first_name?: string;
  /**
   * The customer's last name.
   */
  last_name?: string;
  /**
   * The customer's phone.
   */
  phone?: string;
};

/**
 * The details to update in the address.
 */
export type UpdateAddress = {
  /**
   * The ID of an existing address to update.
   */
  id: string;
  /**
   * The ID of the customer that this address belongs to.
   */
  customer_id?: string;
  /**
   * The address's company.
   */
  company?: string;
  /**
   * The address's first name.
   */
  first_name?: string;
  /**
   * The address's last name.
   */
  last_name?: string;
  /**
   * The address's first line.
   */
  address_1?: string;
  /**
   * The address's second line.
   */
  address_2?: string;
  /**
   * The address's city.
   */
  city?: string;
  /**
   * The address's country code.
   */
  country_code?: string;
  /**
   * The address's province.
   */
  province?: string;
  /**
   * The address's postal code.
   */
  postal_code?: string;
  /**
   * The address's phone.
   */
  phone?: string;
  /**
   * The address's metadata, can hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The details to update in a cart.
 */
export type UpdateCartData = {
  /**
   * The ID of the associated region. This can affect the prices and currency code of the cart.
   */
  region_id?: string;
  /**
   * The ID of the customer that the cart belongs to.
   */
  customer_id?: string;
  /**
   * The ID of the associated sales channel. Only products available in this channel can be added to the cart.
   */
  sales_channel_id?: string;
  /**
   * The email of the customer that the cart belongs to.
   */
  email?: string;
  /**
   * The cart's currency code.
   */
  currency_code?: string;
  /**
   * The ID of the cart's shipping address.
   */
  shipping_address_id?: string;
  /**
   * The ID of the cart's billing address.
   */
  billing_address_id?: string;
  billing_address?: CreateAddress | UpdateAddress;
  shipping_address?: CreateAddress | UpdateAddress;
  /**
   * The cart's metadata, ca hold custom key-value pairs.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * The workflow execution's context.
 */
export type WorkflowExecutionContext = {
  /**
   * The context's data.
   */
  data?: {
    /**
     * The step's invokation details.
     */
    invoke: {
      [key: string]: {
        /**
         * The invokation's details.
         */
        output?: {
          /**
           * the step's output
           */
          output: unknown;
          /**
           * the compensation function's input.
           */
          compensateInput: unknown;
        };
      };
    };
    /**
     * the payload of the transaction.
     */
    payload?: unknown;
  };
  /**
   * The context's compensate.
   */
  compensate: {
    [key: string]: unknown;
  };
  /**
   * The context's errors.
   */
  errors: Array<{
    /**
     * The error's details.
     */
    error: {
      [key: string]: unknown;
    };
    /**
     * The error's action.
     */
    action: string;
    /**
     * The error's handler type.
     */
    handlerType: string;
  }>;
};

export type PostActorTypeAuthProviderData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * The provider used for authentication.
     */
    auth_provider: string;
  };
};

export type PostActorTypeAuthProviderResponse =
  | AuthResponse
  | AuthCallbackResponse;

export type PostActorTypeAuthProviderError = Error | string;

export type PostActorTypeAuthProviderCallbackData = {
  path: {
    /**
     * The provider used for authentication.
     */
    auth_provider: string;
  };
};

export type PostActorTypeAuthProviderCallbackResponse = AuthResponse;

export type PostActorTypeAuthProviderCallbackError = Error | string;

export type PostActorTypeAuthProviderRegisterData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * The provider used for authentication.
     */
    auth_provider: string;
  };
};

export type PostActorTypeAuthProviderRegisterResponse = AuthResponse;

export type PostActorTypeAuthProviderRegisterError = Error | string;

export type PostActorTypeAuthProviderResetPasswordData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * The provider used for authentication.
     */
    auth_provider: string;
  };
};

export type PostActorTypeAuthProviderResetPasswordResponse = unknown;

export type PostActorTypeAuthProviderResetPasswordError = Error | string;

export type PostActorTypeAuthProviderUpdateData = {
  body?: {
    [key: string]: unknown;
  };
  path: {
    /**
     * The provider used for authentication.
     */
    auth_provider: string;
  };
  query: {
    /**
     * The reset password token received using the Get Reset Password API route.
     */
    token: string;
  };
};

export type PostActorTypeAuthProviderUpdateResponse = {
  /**
   * Whether the password was reset successfully.
   */
  success: boolean;
};

export type PostActorTypeAuthProviderUpdateError = Error | string;

export type PostSessionResponse = AuthStoreSessionResponse;

export type PostSessionError = Error | string;

export type DeleteSessionResponse = {
  /**
   * Whether the session was deleted successfully.
   */
  success: boolean;
};

export type DeleteSessionError = Error | string;

export type PostAdminAuthTokenRefreshResponse = AuthResponse;

export type PostAdminAuthTokenRefreshError = Error | string;

export type PostCartsData = {
  body?: StoreCreateCart & {
    /**
     * Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter.
     */
    additional_data?: {
      [key: string]: unknown;
    };
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsResponse = StoreCartResponse;

export type PostCartsError = Error | string;

export type GetCartsIdData = {
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetCartsIdResponse = StoreCartResponse;

export type GetCartsIdError = Error | string;

export type PostCartsIdData = {
  body?: UpdateCartData & {
    /**
     * Pass additional custom data to the API route. This data is passed to the underlying workflow under the `additional_data` parameter.
     */
    additional_data?: {
      [key: string]: unknown;
    };
  };
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdResponse = {
  cart: StoreCart;
};

export type PostCartsIdError = Error | string;

export type PostCartsIdCompleteData = {
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdCompleteResponse =
  | {
      /**
       * The type of the returned object. In this case, the order is returned because the cart was completed successfully.
       */
      type: string;
      order: StoreOrder;
    }
  | {
      /**
       * The type of the returned object. In this case, the cart is returned because an error has occurred.
       */
      type: string;
      cart: StoreCart;
      /**
       * The error's details.
       */
      error: {
        /**
         * The error's message.
         */
        message: string;
        /**
         * The error's name.
         */
        name: string;
        /**
         * The error's type. Can be a [MedusaError type](https://docs.medusajs.com/v2/advanced-development/api-routes/errors#medusaerror-types) or `payment_authorization_error` or `payment_requires_more_error` for payment-related errors.
         *
         */
        type: string;
      };
    };

export type PostCartsIdCompleteError = Error | string;

export type PostCartsIdLineItemsData = {
  body?: StoreAddCartLineItem;
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdLineItemsResponse = StoreCartResponse;

export type PostCartsIdLineItemsError = Error | string;

export type PostCartsIdLineItemsLineIdData = {
  body?: StoreUpdateCartLineItem;
  path: {
    /**
     * The cart's ID.
     */
    id: string;
    /**
     * The line item's ID.
     */
    line_id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdLineItemsLineIdResponse = StoreCartResponse;

export type PostCartsIdLineItemsLineIdError = Error | string;

export type DeleteCartsIdLineItemsLineIdData = {
  path: {
    /**
     * The cart's ID.
     */
    id: string;
    /**
     * The line item's ID.
     */
    line_id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type DeleteCartsIdLineItemsLineIdResponse = {
  /**
   * The ID of the deleted line item.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the item was deleted.
   */
  deleted: boolean;
} & {
  /**
   * The cart that the item belonged to.
   */
  parent?: StoreCart;
};

export type DeleteCartsIdLineItemsLineIdError = Error | string;

export type PostCartsIdPromotionsData = {
  body?: {
    /**
     * Promotion codes to add to the cart.
     */
    promo_codes: Array<string>;
  };
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdPromotionsResponse = StoreCartResponse;

export type PostCartsIdPromotionsError = Error | string;

export type DeleteCartsIdPromotionsData = {
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type DeleteCartsIdPromotionsResponse = {
  cart: StoreCart;
};

export type DeleteCartsIdPromotionsError = Error | string;

export type PostCartsIdShippingMethodsData = {
  body?: {
    /**
     * The ID of the shipping option this method is created from.
     */
    option_id: string;
    /**
     * Any additional data relevant for the third-party fulfillment provider to process the shipment.
     */
    data?: {
      [key: string]: unknown;
    };
  };
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdShippingMethodsResponse = StoreCartResponse;

export type PostCartsIdShippingMethodsError = Error | string;

export type PostCartsIdTaxesData = {
  path: {
    /**
     * The cart's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCartsIdTaxesResponse = StoreCartResponse;

export type PostCartsIdTaxesError = Error | string;

export type GetCollectionsData = {
  query?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Filter by the collection's creation date.
     */
    created_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    handle?: string | Array<string>;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * Search term to filter the collection's searchable properties.
     */
    q?: string;
    title?: string | Array<string>;
    /**
     * Filter by the collection's update date.
     */
    updated_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
  };
};

export type GetCollectionsResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The collection's collections.
   */
  collections: Array<StoreCollection>;
};

export type GetCollectionsError = Error | string;

export type GetCollectionsIdData = {
  path: {
    /**
     * The collection's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetCollectionsIdResponse = StoreCollectionResponse;

export type GetCollectionsIdError = Error | string;

export type GetCurrenciesData = {
  query?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    code?: string | Array<string>;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * Search term to filter the currency's searchable properties.
     */
    q?: string;
  };
};

export type GetCurrenciesResponse = StoreCurrencyListResponse;

export type GetCurrenciesError = Error | string;

export type GetCurrenciesCodeData = {
  path: {
    /**
     * The currency's code.
     */
    code: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetCurrenciesCodeResponse = StoreCurrencyResponse;

export type GetCurrenciesCodeError = Error | string;

export type PostCustomersData = {
  body?: StoreCreateCustomer;
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCustomersResponse = StoreCustomerResponse;

export type PostCustomersError = Error | string;

export type GetCustomersMeData = {
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetCustomersMeResponse = StoreCustomerResponse;

export type GetCustomersMeError = Error | string;

export type PostCustomersMeData = {
  body?: StoreUpdateCustomer;
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCustomersMeResponse = StoreCustomerResponse;

export type PostCustomersMeError = Error | string;

export type GetCustomersMeAddressesData = {
  query?: {
    /**
     * Filter by the address's city.
     */
    city?: string | Array<string>;
    /**
     * Filter by the address's country code.
     */
    country_code?: string | Array<string>;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * Filter by the address's postal code.
     */
    postal_code?: string | Array<string>;
    /**
     * Search term to filter the address's searchable properties.
     */
    q?: string;
  };
};

export type GetCustomersMeAddressesResponse = StoreCustomerAddressListResponse;

export type GetCustomersMeAddressesError = Error | string;

export type PostCustomersMeAddressesData = {
  body?: {
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's phone.
     */
    phone?: string;
    /**
     * The address's company.
     */
    company?: string;
    /**
     * The address's first line.
     */
    address_1?: string;
    /**
     * The address's second line.
     */
    address_2?: string;
    /**
     * The address's city.
     */
    city?: string;
    /**
     * The address's country code.
     */
    country_code?: string;
    /**
     * The address's province.
     */
    province?: string;
    /**
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * The address's name.
     */
    address_name?: string;
    /**
     * Whether the address is used by default for shipping during checkout.
     */
    is_default_shipping?: boolean;
    /**
     * Whether the address is used by default for billing during checkout.
     */
    is_default_billing?: boolean;
    /**
     * Holds custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCustomersMeAddressesResponse = StoreCustomerResponse;

export type PostCustomersMeAddressesError = Error | string;

export type GetCustomersMeAddressesAddressIdData = {
  path: {
    /**
     * The address's ID.
     */
    address_id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetCustomersMeAddressesAddressIdResponse =
  StoreCustomerAddressResponse;

export type GetCustomersMeAddressesAddressIdError = Error | string;

export type PostCustomersMeAddressesAddressIdData = {
  body?: {
    /**
     * The customer's first name.
     */
    first_name?: string;
    /**
     * The customer's last name.
     */
    last_name?: string;
    /**
     * The customer's phone.
     */
    phone?: string;
    /**
     * The address's company.
     */
    company?: string;
    /**
     * The address's first line.
     */
    address_1?: string;
    /**
     * The address's second line.
     */
    address_2?: string;
    /**
     * The address's city.
     */
    city?: string;
    /**
     * The address's country code.
     */
    country_code?: string;
    /**
     * The address's province.
     */
    province?: string;
    /**
     * The address's postal code.
     */
    postal_code?: string;
    /**
     * The address's name.
     */
    address_name?: string;
    /**
     * Whether the address is used by default for shipping during checkout.
     */
    is_default_shipping?: boolean;
    /**
     * Whether the address is used by default for billing during checkout.
     */
    is_default_billing?: boolean;
    /**
     * Holds custom key-value pairs.
     */
    metadata?: {
      [key: string]: unknown;
    };
  };
  path: {
    /**
     * The address's ID.
     */
    address_id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostCustomersMeAddressesAddressIdResponse = StoreCustomerResponse;

export type PostCustomersMeAddressesAddressIdError = Error | string;

export type DeleteCustomersMeAddressesAddressIdData = {
  path: {
    /**
     * The address's ID.
     */
    address_id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type DeleteCustomersMeAddressesAddressIdResponse = {
  /**
   * The address's ID.
   */
  id: string;
  /**
   * The name of the deleted object.
   */
  object: string;
  /**
   * Whether the address was deleted.
   */
  deleted: boolean;
} & {
  /**
   * The details of the customer the address belongs to.
   */
  parent?: StoreCustomer;
};

export type DeleteCustomersMeAddressesAddressIdError = Error | string;

export type GetOrdersData = {
  query?: {
    $and?: Array<{
      [key: string]: unknown;
    }>;
    $or?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    id?: string | Array<string>;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    status?:
      | string
      | Array<
          | "canceled"
          | "requires_action"
          | "pending"
          | "completed"
          | "draft"
          | "archived"
        >;
  };
};

export type GetOrdersResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The order's orders.
   */
  orders: Array<StoreOrder>;
};

export type GetOrdersError = Error | string;

export type GetOrdersIdData = {
  path: {
    /**
     * The order's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetOrdersIdResponse = StoreOrderResponse;

export type GetOrdersIdError = Error | string;

export type PostPaymentCollectionsData = {
  body?: StoreCreatePaymentCollection;
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostPaymentCollectionsResponse = StorePaymentCollectionResponse;

export type PostPaymentCollectionsError = Error | string;

export type PostPaymentCollectionsIdPaymentSessionsData = {
  body?: StoreInitializePaymentSession;
  path: {
    /**
     * The payment collection's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type PostPaymentCollectionsIdPaymentSessionsResponse =
  StorePaymentCollectionResponse;

export type PostPaymentCollectionsIdPaymentSessionsError = Error | string;

export type GetPaymentProvidersData = {
  query: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * Filter by a region ID to get the payment providers enabled in that region.
     */
    region_id: string;
  };
};

export type GetPaymentProvidersResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The list of payment providers.
   */
  payment_providers: Array<StorePaymentProvider>;
};

export type GetPaymentProvidersError = Error | string;

export type GetProductCategoriesData = {
  query?: {
    $and?: Array<{
      [key: string]: unknown;
    }>;
    $or?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Filter by the category's creation date.
     */
    created_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
    description?: string | Array<string>;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    handle?: string | Array<string>;
    id?: string | Array<string>;
    /**
     * Whether to retrieve the category's parent. When enabled, the parent category is set in the `parent_category` property.
     */
    include_ancestors_tree?: boolean;
    /**
     * Whether to retrieve a list of child categories. When enabled, the parent categories are added to the `category_children` property.
     */
    include_descendants_tree?: boolean;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    name?: string | Array<string>;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    parent_category_id?: string | Array<string>;
    /**
     * Search term to filter the product category's properties.
     */
    q?: string;
    /**
     * Filter by the category's update date.
     */
    updated_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
  };
};

export type GetProductCategoriesResponse = StoreProductCategoryListResponse;

export type GetProductCategoriesError = Error | string;

export type GetProductCategoriesIdData = {
  path: {
    /**
     * The product category's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Whether to retrieve the category's parent. When enabled, the parent category is set in the `parent_category` property.
     */
    include_ancestors_tree?: boolean;
    /**
     * Whether to retrieve a list of child categories. When enabled, the parent categories are added to the `category_children` property.
     */
    include_descendants_tree?: boolean;
  };
};

export type GetProductCategoriesIdResponse = StoreProductCategoryResponse;

export type GetProductCategoriesIdError = Error | string;

export type GetProductsData = {
  query?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    category_id?: string | Array<string>;
    /**
     * Filter by a collection's ID to retrieve the products in it.
     */
    collection_id?: unknown;
    /**
     * Filter by the product's creation date.
     */
    created_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
    /**
     * The currency code to retrieve prices in.
     */
    currency_code?: string;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Filter by product handles.
     */
    handle?: string | Array<string>;
    id?: string | Array<string>;
    /**
     * Whether the product is a gift card.
     */
    is_giftcard?: boolean;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * The province the products are being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
     */
    province?: string;
    /**
     * Search term to filter the product's searchable properties.
     */
    q?: string;
    /**
     * The ID of the region the products are being viewed from. This is required if you're retrieving product variant prices with taxes.
     */
    region_id?: string;
    sales_channel_id?: string | Array<string>;
    /**
     * Filter by a tag's ID to retrieve the products in it.
     */
    tag_id?: string | Array<string>;
    /**
     * Filter by product titles.
     */
    title?: string | Array<string>;
    /**
     * Filter by a type's ID to retrieve the products in it.
     */
    type_id?: string | Array<string>;
    /**
     * Filter by the product's update date.
     */
    updated_at?: {
      /**
       * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
       */
      $and?: Array<{
        [key: string]: unknown;
      }>;
      /**
       * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
       */
      $or?: Array<{
        [key: string]: unknown;
      }>;
      $eq?: string | Array<string>;
      /**
       * Filter by values not equal to this parameter.
       */
      $ne?: string;
      /**
       * Filter by values in this array.
       */
      $in?: Array<string>;
      /**
       * Filter by values not in this array.
       */
      $nin?: Array<string>;
      $not?:
        | string
        | {
            /**
             * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
             */
            $and?: Array<{
              [key: string]: unknown;
            }>;
            /**
             * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
             */
            $or?: Array<{
              [key: string]: unknown;
            }>;
            $eq?: string | Array<string>;
            /**
             * Filter by values not matching this parameter.
             */
            $ne?: string;
            /**
             * Filter by values in this array.
             */
            $in?: Array<string>;
            /**
             * Filter by values not in this array.
             */
            $nin?: Array<string>;
            $not?:
              | string
              | {
                  [key: string]: unknown;
                }
              | Array<string>;
            /**
             * Filter by values greater than this parameter. Useful for numbers and dates only.
             */
            $gt?: string;
            /**
             * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
             */
            $gte?: string;
            /**
             * Filter by values less than this parameter. Useful for numbers and dates only.
             */
            $lt?: string;
            /**
             * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
             */
            $lte?: string;
            /**
             * Apply a `like` filter. Useful for strings only.
             */
            $like?: string;
            /**
             * Apply a regex filter. Useful for strings only.
             */
            $re?: string;
            /**
             * Apply a case-insensitive `like` filter. Useful for strings only.
             */
            $ilike?: string;
            /**
             * Filter to apply on full-text properties.
             */
            $fulltext?: string;
            /**
             * Filter arrays that have overlapping values with this parameter.
             */
            $overlap?: Array<string>;
            /**
             * Filter arrays that contain some of the values of this parameter.
             */
            $contains?: Array<string>;
            /**
             * Filter arrays that contain all values of this parameter.
             */
            $contained?: Array<string>;
            /**
             * Filter by whether a value for this parameter exists (not `null`).
             */
            $exists?: boolean;
          }
        | Array<string>;
      /**
       * Filter by values greater than this parameter. Useful for numbers and dates only.
       */
      $gt?: string;
      /**
       * Filter by values greater than or equal to this parameter. Useful for numbers and dates only.
       */
      $gte?: string;
      /**
       * Filter by values less than this parameter. Useful for numbers and dates only.
       */
      $lt?: string;
      /**
       * Filter by values less than or equal to this parameter. Useful for numbers and dates only.
       */
      $lte?: string;
      /**
       * Apply a `like` filter. Useful for strings only.
       */
      $like?: string;
      /**
       * Apply a regex filter. Useful for strings only.
       */
      $re?: string;
      /**
       * Apply a case-insensitive `like` filter. Useful for strings only.
       */
      $ilike?: string;
      /**
       * Filter to apply on full-text properties.
       */
      $fulltext?: string;
      /**
       * Filter arrays that have overlapping values with this parameter.
       */
      $overlap?: Array<string>;
      /**
       * Filter arrays that contain some of the values of this parameter.
       */
      $contains?: Array<string>;
      /**
       * Filter arrays that contain all values of this parameter.
       */
      $contained?: Array<string>;
      /**
       * Filter by whether a value for this parameter exists (not `null`).
       */
      $exists?: boolean;
    };
    /**
     * Filter the products' variants.
     */
    variants?: {
      /**
       * Filter by the variants' options.
       */
      options?: {
        /**
         * The ID of the option to filter by.
         */
        option_id: string;
        /**
         * Filter by a value of the option.
         */
        value: string;
      };
    };
  };
};

export type GetProductsResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The list of products.
   */
  products: Array<{
    [key: string]: unknown;
  }>;
};

export type GetProductsError = Error | string;

export type GetProductsIdData = {
  path: {
    /**
     * The product's ID.
     */
    id: string;
  };
  query?: {
    /**
     * The ID of the customer's cart. If set, the cart's region and shipping address's country code and province are used instead of the `region_id`, `country_code`, and `province` properties.
     */
    cart_id?: string;
    /**
     * The country code the product is being viewed from. This is required if you're retrieving product variant prices with taxes.
     */
    country_code?: string;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * The province the product is being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
     */
    province?: string;
    /**
     * The ID of the region the product is being viewed from. This is required if you're retrieving product variant prices with taxes.
     */
    region_id?: string;
  };
};

export type GetProductsIdResponse = StoreProductResponse;

export type GetProductsIdError = Error | string;

export type GetRegionsData = {
  query?: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    currency_code?: string | Array<string>;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    id?: string | Array<string>;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    name?: string | Array<string>;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
    /**
     * Search term to filter the region's searchable properties.
     */
    q?: string;
  };
};

export type GetRegionsResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The list of regions.
   */
  regions: Array<StoreRegion>;
};

export type GetRegionsError = Error | string;

export type GetRegionsIdData = {
  path: {
    /**
     * The region's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetRegionsIdResponse = {
  region: StoreRegion;
};

export type GetRegionsIdError = Error | string;

export type PostReturnData = {
  body?: StoreCreateReturn;
};

export type PostReturnResponse = StoreReturnResponse;

export type PostReturnError = Error | string;

export type GetReturnReasonsData = {
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
  };
};

export type GetReturnReasonsResponse = {
  /**
   * The maximum number of items returned.
   */
  limit: number;
  /**
   * The number of items skipped before retrieving the returned items.
   */
  offset: number;
  /**
   * The total number of items.
   */
  count: number;
} & {
  /**
   * The list of return reasons.
   */
  return_reasons: Array<StoreReturnReason>;
};

export type GetReturnReasonsError = Error | string;

export type GetReturnReasonsIdData = {
  path: {
    /**
     * The return reason's ID.
     */
    id: string;
  };
  query?: {
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
  };
};

export type GetReturnReasonsIdResponse = StoreReturnReasonResponse;

export type GetReturnReasonsIdError = Error | string;

export type GetShippingOptionsData = {
  query: {
    /**
     * Join query parameters with an AND condition. Each object's content is the same type as the expected query parameters.
     */
    $and?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * Join query parameters with an OR condition. Each object's content is the same type as the expected query parameters.
     */
    $or?: Array<{
      [key: string]: unknown;
    }>;
    /**
     * The ID of the cart to retrieve its shipping options.
     */
    cart_id: string;
    /**
     * Comma-separated fields that should be included in the returned data. if a field is prefixed with `+` it will be added to the default fields, using `-` will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    fields?: string;
    /**
     * Whether the shipping option can be used for returns.
     */
    is_return?: boolean;
    /**
     * Limit the number of items returned in the list.
     */
    limit?: number;
    /**
     * The number of items to skip when retrieving a list.
     */
    offset?: number;
    /**
     * The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with `-`.
     */
    order?: string;
  };
};

export type GetShippingOptionsResponse = StoreShippingOptionListResponse;

export type GetShippingOptionsError = Error | string;
