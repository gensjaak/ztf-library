// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  PostActorTypeAuthProviderData,
  PostActorTypeAuthProviderError,
  PostActorTypeAuthProviderResponse,
  PostActorTypeAuthProviderCallbackData,
  PostActorTypeAuthProviderCallbackError,
  PostActorTypeAuthProviderCallbackResponse,
  PostActorTypeAuthProviderRegisterData,
  PostActorTypeAuthProviderRegisterError,
  PostActorTypeAuthProviderRegisterResponse,
  PostActorTypeAuthProviderResetPasswordData,
  PostActorTypeAuthProviderResetPasswordError,
  PostActorTypeAuthProviderResetPasswordResponse,
  PostActorTypeAuthProviderUpdateData,
  PostActorTypeAuthProviderUpdateError,
  PostActorTypeAuthProviderUpdateResponse,
  PostSessionError,
  PostSessionResponse,
  DeleteSessionError,
  DeleteSessionResponse,
  PostAdminAuthTokenRefreshError,
  PostAdminAuthTokenRefreshResponse,
  PostCartsData,
  PostCartsError,
  PostCartsResponse,
  GetCartsIdData,
  GetCartsIdError,
  GetCartsIdResponse,
  PostCartsIdData,
  PostCartsIdError,
  PostCartsIdResponse,
  PostCartsIdCompleteData,
  PostCartsIdCompleteError,
  PostCartsIdCompleteResponse,
  PostCartsIdLineItemsData,
  PostCartsIdLineItemsError,
  PostCartsIdLineItemsResponse,
  PostCartsIdLineItemsLineIdData,
  PostCartsIdLineItemsLineIdError,
  PostCartsIdLineItemsLineIdResponse,
  DeleteCartsIdLineItemsLineIdData,
  DeleteCartsIdLineItemsLineIdError,
  DeleteCartsIdLineItemsLineIdResponse,
  PostCartsIdPromotionsData,
  PostCartsIdPromotionsError,
  PostCartsIdPromotionsResponse,
  DeleteCartsIdPromotionsData,
  DeleteCartsIdPromotionsError,
  DeleteCartsIdPromotionsResponse,
  PostCartsIdShippingMethodsData,
  PostCartsIdShippingMethodsError,
  PostCartsIdShippingMethodsResponse,
  PostCartsIdTaxesData,
  PostCartsIdTaxesError,
  PostCartsIdTaxesResponse,
  GetCollectionsData,
  GetCollectionsError,
  GetCollectionsResponse,
  GetCollectionsIdData,
  GetCollectionsIdError,
  GetCollectionsIdResponse,
  GetCurrenciesData,
  GetCurrenciesError,
  GetCurrenciesResponse,
  GetCurrenciesCodeData,
  GetCurrenciesCodeError,
  GetCurrenciesCodeResponse,
  PostCustomersData,
  PostCustomersError,
  PostCustomersResponse,
  GetCustomersMeData,
  GetCustomersMeError,
  GetCustomersMeResponse,
  PostCustomersMeData,
  PostCustomersMeError,
  PostCustomersMeResponse,
  GetCustomersMeAddressesData,
  GetCustomersMeAddressesError,
  GetCustomersMeAddressesResponse,
  PostCustomersMeAddressesData,
  PostCustomersMeAddressesError,
  PostCustomersMeAddressesResponse,
  GetCustomersMeAddressesAddressIdData,
  GetCustomersMeAddressesAddressIdError,
  GetCustomersMeAddressesAddressIdResponse,
  PostCustomersMeAddressesAddressIdData,
  PostCustomersMeAddressesAddressIdError,
  PostCustomersMeAddressesAddressIdResponse,
  DeleteCustomersMeAddressesAddressIdData,
  DeleteCustomersMeAddressesAddressIdError,
  DeleteCustomersMeAddressesAddressIdResponse,
  GetOrdersData,
  GetOrdersError,
  GetOrdersResponse,
  GetOrdersIdData,
  GetOrdersIdError,
  GetOrdersIdResponse,
  PostPaymentCollectionsData,
  PostPaymentCollectionsError,
  PostPaymentCollectionsResponse,
  PostPaymentCollectionsIdPaymentSessionsData,
  PostPaymentCollectionsIdPaymentSessionsError,
  PostPaymentCollectionsIdPaymentSessionsResponse,
  GetPaymentProvidersData,
  GetPaymentProvidersError,
  GetPaymentProvidersResponse,
  GetProductCategoriesData,
  GetProductCategoriesError,
  GetProductCategoriesResponse,
  GetProductCategoriesIdData,
  GetProductCategoriesIdError,
  GetProductCategoriesIdResponse,
  GetProductsData,
  GetProductsError,
  GetProductsResponse,
  GetProductsIdData,
  GetProductsIdError,
  GetProductsIdResponse,
  GetRegionsData,
  GetRegionsError,
  GetRegionsResponse,
  GetRegionsIdData,
  GetRegionsIdError,
  GetRegionsIdResponse,
  PostReturnData,
  PostReturnError,
  PostReturnResponse,
  GetReturnReasonsData,
  GetReturnReasonsError,
  GetReturnReasonsResponse,
  GetReturnReasonsIdData,
  GetReturnReasonsIdError,
  GetReturnReasonsIdResponse,
  GetShippingOptionsData,
  GetShippingOptionsError,
  GetShippingOptionsResponse,
} from "./types.gen";

// export const client = createClient(createConfig());

/**
 * Authenticate Customer
 * Authenticate a customer and receive the JWT token to be used in the header of subsequent requests.
 *
 * When used with a third-party provider, such as Google, the request returns a `location` property. You redirect to the specified URL in your storefront to continue authentication with the third-party service.
 *
 */
export const postActorTypeAuthProvider = <ThrowOnError extends boolean = false>(
  options: Options<PostActorTypeAuthProviderData, ThrowOnError>
) => {
  return options?.client!.post<
    PostActorTypeAuthProviderResponse,
    PostActorTypeAuthProviderError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/customer/{auth_provider}",
  });
};

/**
 * Validate Authentication Callback
 * This API route is used by your storefront or frontend application when a third-party provider redirects to it after authentication.
 *
 * It validates the authentication with the third-party provider and, if successful, returns an authentication token.
 *
 * You can decode the JWT token using libraries like [react-jwt](https://www.npmjs.com/package/react-jwt) in the storefront. If the decoded data doesn't  have an `actor_id` property, then you must register the customer using the Create Customer API route passing the token in the request's Authorization header.
 *
 */
export const postActorTypeAuthProviderCallback = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostActorTypeAuthProviderCallbackData, ThrowOnError>
) => {
  return options?.client!.post<
    PostActorTypeAuthProviderCallbackResponse,
    PostActorTypeAuthProviderCallbackError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/customer/{auth_provider}/callback",
  });
};

/**
 * Retrieve Registration JWT Token
 * This API route retrieves a registration JWT token of a customer that hasn't been registered yet. The token is used in the header of requests that create a customer.
 */
export const postActorTypeAuthProviderRegister = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostActorTypeAuthProviderRegisterData, ThrowOnError>
) => {
  return options?.client!.post<
    PostActorTypeAuthProviderRegisterResponse,
    PostActorTypeAuthProviderRegisterError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/customer/{auth_provider}/register",
  });
};

/**
 * Generate Reset Password Token for Customer
 * Generate a reset password token for a customer. This API route emits the `auth.password_reset` event, passing it the token as a payload. You can listen to that event and send the user a notification. The notification should have a URL that accepts a `token` query parameter.
 *
 *
 * Use the generated token to update the user's password using the Reset Password API route.
 *
 */
export const postActorTypeAuthProviderResetPassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostActorTypeAuthProviderResetPasswordData, ThrowOnError>
) => {
  return options?.client!.post<
    PostActorTypeAuthProviderResetPasswordResponse,
    PostActorTypeAuthProviderResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/customer/{auth_provider}/reset-password",
  });
};

/**
 * Reset a Customer's Password
 * Reset a customer's password. Generate the reset password token first using the Get Reset Password Token API route.
 */
export const postActorTypeAuthProviderUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostActorTypeAuthProviderUpdateData, ThrowOnError>
) => {
  return options?.client!.post<
    PostActorTypeAuthProviderUpdateResponse,
    PostActorTypeAuthProviderUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/customer/{auth_provider}/update",
  });
};

/**
 * Set Authentication Session
 * Set the cookie session ID of a customer. The customer must be previously authenticated with the `/auth/customer/{provider}` API route first, as the JWT token is required in the header of the request.
 */
export const postSession = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return options?.client!.post<
    PostSessionResponse,
    PostSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/session",
  });
};

/**
 * Delete Authentication Session
 * Deletes the cookie session ID previously set for authentication.
 */
export const deleteSession = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return options?.client!.delete<
    DeleteSessionResponse,
    DeleteSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/session",
  });
};

/**
 * Refresh Authentication Token
 * Refresh the authentication token of a customer. This is useful after authenticating a customer with a third-party service to ensure the token holds the new user's details, or when you don't want customers to re-login every day.
 */
export const postAdminAuthTokenRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return options?.client!.post<
    PostAdminAuthTokenRefreshResponse,
    PostAdminAuthTokenRefreshError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/token/refresh",
  });
};

/**
 * Create Cart
 * Create a cart.
 */
export const postCarts = <ThrowOnError extends boolean = false>(
  options?: Options<PostCartsData, ThrowOnError>
) => {
  return options?.client!.post<PostCartsResponse, PostCartsError, ThrowOnError>(
    {
      ...options,
      url: "/store/carts",
    }
  );
};

/**
 * Get a Cart
 * Retrieve a cart by its ID. You can expand the cart's relations or select the fields that should be returned.
 */
export const getCartsId = <ThrowOnError extends boolean = false>(
  options: Options<GetCartsIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCartsIdResponse,
    GetCartsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}",
  });
};

/**
 * Update a Cart
 * Update a cart's details. This unsets the shipping an payment methods chosen before, and the customer would have to choose them again.
 */
export const postCartsId = <ThrowOnError extends boolean = false>(
  options: Options<PostCartsIdData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdResponse,
    PostCartsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}",
  });
};

/**
 * Complete Cart
 * Complete a cart and place an order.
 */
export const postCartsIdComplete = <ThrowOnError extends boolean = false>(
  options: Options<PostCartsIdCompleteData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdCompleteResponse,
    PostCartsIdCompleteError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/complete",
  });
};

/**
 * Add Line Item to Cart
 * Add a product variant as a line item in the cart.
 */
export const postCartsIdLineItems = <ThrowOnError extends boolean = false>(
  options: Options<PostCartsIdLineItemsData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdLineItemsResponse,
    PostCartsIdLineItemsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/line-items",
  });
};

/**
 * Update a Line Item in a Cart
 * Update a line item's details in the cart.
 */
export const postCartsIdLineItemsLineId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCartsIdLineItemsLineIdData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdLineItemsLineIdResponse,
    PostCartsIdLineItemsLineIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/line-items/{line_id}",
  });
};

/**
 * Remove Line Item from Cart
 * Remove a line item from a cart.
 */
export const deleteCartsIdLineItemsLineId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCartsIdLineItemsLineIdData, ThrowOnError>
) => {
  return options?.client!.delete<
    DeleteCartsIdLineItemsLineIdResponse,
    DeleteCartsIdLineItemsLineIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/line-items/{line_id}",
  });
};

/**
 * Add Promotions to Cart
 * Add a list of promotions to a cart.
 */
export const postCartsIdPromotions = <ThrowOnError extends boolean = false>(
  options: Options<PostCartsIdPromotionsData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdPromotionsResponse,
    PostCartsIdPromotionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/promotions",
  });
};

/**
 * Remove Promotions from Cart
 * Remove a list of promotions from a cart.
 */
export const deleteCartsIdPromotions = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCartsIdPromotionsData, ThrowOnError>
) => {
  return options?.client!.delete<
    DeleteCartsIdPromotionsResponse,
    DeleteCartsIdPromotionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/promotions",
  });
};

/**
 * Add Shipping Method to Cart
 * Add a shipping method to a cart. Use this API route when the customer chooses their preferred shipping option.
 */
export const postCartsIdShippingMethods = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCartsIdShippingMethodsData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdShippingMethodsResponse,
    PostCartsIdShippingMethodsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/shipping-methods",
  });
};

/**
 * Calculate Cart Taxes
 * Calculate the cart's tax lines and amounts.
 */
export const postCartsIdTaxes = <ThrowOnError extends boolean = false>(
  options: Options<PostCartsIdTaxesData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCartsIdTaxesResponse,
    PostCartsIdTaxesError,
    ThrowOnError
  >({
    ...options,
    url: "/store/carts/{id}/taxes",
  });
};

/**
 * List Collections
 * Retrieve a list of collections. The collections can be filtered by fields such as `handle`. The collections can also be sorted or paginated.
 */
export const getCollections = <ThrowOnError extends boolean = false>(
  options?: Options<GetCollectionsData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCollectionsResponse,
    GetCollectionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/collections",
  });
};

/**
 * Get a Collection
 * Retrieve a collection by its ID. You can expand the collection's relations or select the fields that should be returned.
 */
export const getCollectionsId = <ThrowOnError extends boolean = false>(
  options: Options<GetCollectionsIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCollectionsIdResponse,
    GetCollectionsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/collections/{id}",
  });
};

/**
 * List Currencies
 * Retrieve a list of currencies. The currencies can be filtered by fields such as `code`. The currencies can also be sorted or paginated.
 */
export const getCurrencies = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrenciesData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCurrenciesResponse,
    GetCurrenciesError,
    ThrowOnError
  >({
    ...options,
    url: "/store/currencies",
  });
};

/**
 * Get a Currency
 * Retrieve a currency by its code. You can expand the currency's relations or select the fields that should be returned.
 */
export const getCurrenciesCode = <ThrowOnError extends boolean = false>(
  options: Options<GetCurrenciesCodeData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCurrenciesCodeResponse,
    GetCurrenciesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/store/currencies/{code}",
  });
};

/**
 * Register Customer
 * Register a customer. Use the `/auth/customer/emailpass/register` API route first to retrieve the registration token and pass it in the header of the request.
 */
export const postCustomers = <ThrowOnError extends boolean = false>(
  options?: Options<PostCustomersData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCustomersResponse,
    PostCustomersError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers",
  });
};

/**
 * Get Logged-in Customer
 * Retrieve the logged-in customer. You can expand the customer's relations or select the fields that should be returned.
 */
export const getCustomersMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetCustomersMeData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCustomersMeResponse,
    GetCustomersMeError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me",
  });
};

/**
 * Update Customer
 * Update the logged-in customer's details.
 */
export const postCustomersMe = <ThrowOnError extends boolean = false>(
  options?: Options<PostCustomersMeData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCustomersMeResponse,
    PostCustomersMeError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me",
  });
};

/**
 * List Customer's Addresses
 * Retrieve the addresses of the logged-in customer. The addresses can be filtered by fields such as `country_code`. The addresses can also be sorted or paginated.
 */
export const getCustomersMeAddresses = <ThrowOnError extends boolean = false>(
  options?: Options<GetCustomersMeAddressesData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCustomersMeAddressesResponse,
    GetCustomersMeAddressesError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me/addresses",
  });
};

/**
 * Create Address for Logged-In Customer
 * Create an address for the logged-in customer.
 */
export const postCustomersMeAddresses = <ThrowOnError extends boolean = false>(
  options?: Options<PostCustomersMeAddressesData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCustomersMeAddressesResponse,
    PostCustomersMeAddressesError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me/addresses",
  });
};

/**
 * Get Customer's Address
 * Retrieve an address of the logged-in customer. You can expand the address's relations or select the fields that should be returned.
 */
export const getCustomersMeAddressesAddressId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetCustomersMeAddressesAddressIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetCustomersMeAddressesAddressIdResponse,
    GetCustomersMeAddressesAddressIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me/addresses/{address_id}",
  });
};

/**
 * Update Customer's Address
 * Update the logged-in customer's address.
 */
export const postCustomersMeAddressesAddressId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCustomersMeAddressesAddressIdData, ThrowOnError>
) => {
  return options?.client!.post<
    PostCustomersMeAddressesAddressIdResponse,
    PostCustomersMeAddressesAddressIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me/addresses/{address_id}",
  });
};

/**
 * Remove Customer's Address
 * Remove an address of the logged-in customer.
 */
export const deleteCustomersMeAddressesAddressId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCustomersMeAddressesAddressIdData, ThrowOnError>
) => {
  return options?.client!.delete<
    DeleteCustomersMeAddressesAddressIdResponse,
    DeleteCustomersMeAddressesAddressIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/customers/me/addresses/{address_id}",
  });
};

/**
 * List Logged-in Customer's Orders
 * Retrieve the orders of the logged-in customer. The orders can be filtered by fields such as `id`. The orders can also be sorted or paginated.
 */
export const getOrders = <ThrowOnError extends boolean = false>(
  options?: Options<GetOrdersData, ThrowOnError>
) => {
  return options?.client!.get<GetOrdersResponse, GetOrdersError, ThrowOnError>({
    ...options,
    url: "/store/orders",
  });
};

/**
 * Get an Order
 * Retrieve an order by its ID. You can expand the order's relations or select the fields that should be returned.
 */
export const getOrdersId = <ThrowOnError extends boolean = false>(
  options: Options<GetOrdersIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetOrdersIdResponse,
    GetOrdersIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/orders/{id}",
  });
};

/**
 * Create Payment Collection
 * Create a payment collection for a cart. This is used during checkout, where the payment collection holds the cart's payment sessions.
 */
export const postPaymentCollections = <ThrowOnError extends boolean = false>(
  options?: Options<PostPaymentCollectionsData, ThrowOnError>
) => {
  return options?.client!.post<
    PostPaymentCollectionsResponse,
    PostPaymentCollectionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/payment-collections",
  });
};

/**
 * Initialize Payment Session of a Payment Collection
 * Initialize and add a payment session to a payment collection. This is used during checkout, where you create a payment collection for the cart, then initialize a payment session for the payment provider that the customer chooses.
 */
export const postPaymentCollectionsIdPaymentSessions = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostPaymentCollectionsIdPaymentSessionsData, ThrowOnError>
) => {
  return options?.client!.post<
    PostPaymentCollectionsIdPaymentSessionsResponse,
    PostPaymentCollectionsIdPaymentSessionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/payment-collections/{id}/payment-sessions",
  });
};

/**
 * List Payment Providers
 * Retrieve a list of payment providers. You must provide the `region_id` query parameter to retrieve the payment providers enabled in that region.
 */
export const getPaymentProviders = <ThrowOnError extends boolean = false>(
  options: Options<GetPaymentProvidersData, ThrowOnError>
) => {
  return options?.client!.get<
    GetPaymentProvidersResponse,
    GetPaymentProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/store/payment-providers",
  });
};

/**
 * List Product Categories
 * Retrieve a list of product categories. The product categories can be filtered by fields such as `id`. The product categories can also be sorted or paginated.
 */
export const getProductCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetProductCategoriesData, ThrowOnError>
) => {
  return options?.client!.get<
    GetProductCategoriesResponse,
    GetProductCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/store/product-categories",
  });
};

/**
 * Get a Product Category
 * Retrieve a product category by its ID. You can expand the product category's relations or select the fields that should be returned.
 */
export const getProductCategoriesId = <ThrowOnError extends boolean = false>(
  options: Options<GetProductCategoriesIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetProductCategoriesIdResponse,
    GetProductCategoriesIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/product-categories/{id}",
  });
};

/**
 * List Products
 * Retrieve a list of products. The products can be filtered by fields such as `id`. The products can also be sorted or paginated.
 */
export const getProducts = <ThrowOnError extends boolean = false>(
  options?: Options<GetProductsData, ThrowOnError>
) => {
  return options?.client!.get<
    GetProductsResponse,
    GetProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/products",
  });
};

/**
 * Get a Product
 * Retrieve a product by its ID. You can expand the product's relations or select the fields that should be returned.
 */
export const getProductsId = <ThrowOnError extends boolean = false>(
  options: Options<GetProductsIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetProductsIdResponse,
    GetProductsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/products/{id}",
  });
};

/**
 * List Regions
 * Retrieve a list of regions. The regions can be filtered by fields such as `id`. The regions can also be sorted or paginated.
 */
export const getRegions = <ThrowOnError extends boolean = false>(
  options?: Options<GetRegionsData, ThrowOnError>
) => {
  return options?.client!.get<
    GetRegionsResponse,
    GetRegionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/regions",
  });
};

/**
 * Get a Region
 * Retrieve a region by its ID. You can expand the region's relations or select the fields that should be returned.
 */
export const getRegionsId = <ThrowOnError extends boolean = false>(
  options: Options<GetRegionsIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetRegionsIdResponse,
    GetRegionsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/regions/{id}",
  });
};

/**
 * Create Return
 * Create a return for an order's items. The admin receives the return and process it from their side.
 */
export const postReturn = <ThrowOnError extends boolean = false>(
  options?: Options<PostReturnData, ThrowOnError>
) => {
  return options?.client!.post<
    PostReturnResponse,
    PostReturnError,
    ThrowOnError
  >({
    ...options,
    url: "/store/return",
  });
};

/**
 * List Return Reasons
 * Retrieve a list of return reasons. The return reasons can be sorted or paginated.
 */
export const getReturnReasons = <ThrowOnError extends boolean = false>(
  options?: Options<GetReturnReasonsData, ThrowOnError>
) => {
  return options?.client!.get<
    GetReturnReasonsResponse,
    GetReturnReasonsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/return-reasons",
  });
};

/**
 * Get a Return Reason
 * Retrieve a return reason by its ID. You can expand the return reason's relations or select the fields that should be returned.
 */
export const getReturnReasonsId = <ThrowOnError extends boolean = false>(
  options: Options<GetReturnReasonsIdData, ThrowOnError>
) => {
  return options?.client!.get<
    GetReturnReasonsIdResponse,
    GetReturnReasonsIdError,
    ThrowOnError
  >({
    ...options,
    url: "/store/return-reasons/{id}",
  });
};

/**
 * List Shipping Options for Cart
 * Retrieve a list of shipping options for a cart. The cart's ID is set in the required `cart_id` query parameter.
 *
 * The shipping options also be sorted or paginated.
 *
 */
export const getShippingOptions = <ThrowOnError extends boolean = false>(
  options: Options<GetShippingOptionsData, ThrowOnError>
) => {
  return options?.client!.get<
    GetShippingOptionsResponse,
    GetShippingOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/store/shipping-options",
  });
};
